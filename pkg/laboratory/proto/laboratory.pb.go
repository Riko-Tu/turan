// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.14.0
// source: laboratory.proto

package laboratory

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetCosUploadTmpSecretRequest_OpType int32

const (
	GetCosUploadTmpSecretRequest_experiment GetCosUploadTmpSecretRequest_OpType = 0 // 实验,默认值
)

// Enum value maps for GetCosUploadTmpSecretRequest_OpType.
var (
	GetCosUploadTmpSecretRequest_OpType_name = map[int32]string{
		0: "experiment",
	}
	GetCosUploadTmpSecretRequest_OpType_value = map[string]int32{
		"experiment": 0,
	}
)

func (x GetCosUploadTmpSecretRequest_OpType) Enum() *GetCosUploadTmpSecretRequest_OpType {
	p := new(GetCosUploadTmpSecretRequest_OpType)
	*p = x
	return p
}

func (x GetCosUploadTmpSecretRequest_OpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetCosUploadTmpSecretRequest_OpType) Descriptor() protoreflect.EnumDescriptor {
	return file_laboratory_proto_enumTypes[0].Descriptor()
}

func (GetCosUploadTmpSecretRequest_OpType) Type() protoreflect.EnumType {
	return &file_laboratory_proto_enumTypes[0]
}

func (x GetCosUploadTmpSecretRequest_OpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetCosUploadTmpSecretRequest_OpType.Descriptor instead.
func (GetCosUploadTmpSecretRequest_OpType) EnumDescriptor() ([]byte, []int) {
	return file_laboratory_proto_rawDescGZIP(), []int{29, 0}
}

// COS秘钥(临时)
type CosCredential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// COS服务返回的临时ID
	TmpSecretID string `protobuf:"bytes,1,opt,name=tmpSecretID,proto3" json:"tmpSecretID,omitempty"`
	// COS服务返回的临时Key
	TmpSecretKey string `protobuf:"bytes,2,opt,name=tmpSecretKey,proto3" json:"tmpSecretKey,omitempty"`
	// COS服务返回的Token
	SessionToken string `protobuf:"bytes,3,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// 存储桶名,不含子目录，不含http：//或者cos：// url
	Bucket string `protobuf:"bytes,4,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Region string `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	// ExpiredTime
	ExpiredTime int64 `protobuf:"varint,6,opt,name=expired_time,json=expiredTime,proto3" json:"expired_time,omitempty"`
	// Expiration
	Expiration string `protobuf:"bytes,7,opt,name=expiration,proto3" json:"expiration,omitempty"`
	// StartTime
	StartTime int64 `protobuf:"varint,8,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
}

func (x *CosCredential) Reset() {
	*x = CosCredential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laboratory_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CosCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CosCredential) ProtoMessage() {}

func (x *CosCredential) ProtoReflect() protoreflect.Message {
	mi := &file_laboratory_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CosCredential.ProtoReflect.Descriptor instead.
func (*CosCredential) Descriptor() ([]byte, []int) {
	return file_laboratory_proto_rawDescGZIP(), []int{0}
}

func (x *CosCredential) GetTmpSecretID() string {
	if x != nil {
		return x.TmpSecretID
	}
	return ""
}

func (x *CosCredential) GetTmpSecretKey() string {
	if x != nil {
		return x.TmpSecretKey
	}
	return ""
}

func (x *CosCredential) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *CosCredential) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *CosCredential) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CosCredential) GetExpiredTime() int64 {
	if x != nil {
		return x.ExpiredTime
	}
	return 0
}

func (x *CosCredential) GetExpiration() string {
	if x != nil {
		return x.Expiration
	}
	return ""
}

func (x *CosCredential) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

// 创建web console docker容器
type CreateWebConsoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int64  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	ProjectId int64  `protobuf:"varint,2,opt,name=projectId,proto3" json:"projectId,omitempty"`
	Secret    string `protobuf:"bytes,3,opt,name=secret,proto3" json:"secret,omitempty"`
	TefsUrl   string `protobuf:"bytes,4,opt,name=tefsUrl,proto3" json:"tefsUrl,omitempty"`
}

func (x *CreateWebConsoleRequest) Reset() {
	*x = CreateWebConsoleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laboratory_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWebConsoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWebConsoleRequest) ProtoMessage() {}

func (x *CreateWebConsoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_laboratory_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWebConsoleRequest.ProtoReflect.Descriptor instead.
func (*CreateWebConsoleRequest) Descriptor() ([]byte, []int) {
	return file_laboratory_proto_rawDescGZIP(), []int{1}
}

func (x *CreateWebConsoleRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateWebConsoleRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *CreateWebConsoleRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *CreateWebConsoleRequest) GetTefsUrl() string {
	if x != nil {
		return x.TefsUrl
	}
	return ""
}

type CreateWebConsoleReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateWebConsoleReply) Reset() {
	*x = CreateWebConsoleReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laboratory_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWebConsoleReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWebConsoleReply) ProtoMessage() {}

func (x *CreateWebConsoleReply) ProtoReflect() protoreflect.Message {
	mi := &file_laboratory_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWebConsoleReply.ProtoReflect.Descriptor instead.
func (*CreateWebConsoleReply) Descriptor() ([]byte, []int) {
	return file_laboratory_proto_rawDescGZIP(), []int{2}
}

func (x *CreateWebConsoleReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// (getCosTmpSecretRequest) returns (getCosTmpSecretReply)
type GetCosTmpSecretRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CosPath string `protobuf:"bytes,1,opt,name=cosPath,proto3" json:"cosPath,omitempty"`
}

func (x *GetCosTmpSecretRequest) Reset() {
	*x = GetCosTmpSecretRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laboratory_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCosTmpSecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCosTmpSecretRequest) ProtoMessage() {}

func (x *GetCosTmpSecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_laboratory_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCosTmpSecretRequest.ProtoReflect.Descriptor instead.
func (*GetCosTmpSecretRequest) Descriptor() ([]byte, []int) {
	return file_laboratory_proto_rawDescGZIP(), []int{3}
}

func (x *GetCosTmpSecretRequest) GetCosPath() string {
	if x != nil {
		return x.CosPath
	}
	return ""
}

type GetCosTmpSecretReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CosCredential *CosCredential `protobuf:"bytes,1,opt,name=cosCredential,proto3" json:"cosCredential,omitempty"`
	CosBaseUrl    string         `protobuf:"bytes,2,opt,name=cosBaseUrl,proto3" json:"cosBaseUrl,omitempty"`
}

func (x *GetCosTmpSecretReply) Reset() {
	*x = GetCosTmpSecretReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laboratory_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCosTmpSecretReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCosTmpSecretReply) ProtoMessage() {}

func (x *GetCosTmpSecretReply) ProtoReflect() protoreflect.Message {
	mi := &file_laboratory_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCosTmpSecretReply.ProtoReflect.Descriptor instead.
func (*GetCosTmpSecretReply) Descriptor() ([]byte, []int) {
	return file_laboratory_proto_rawDescGZIP(), []int{4}
}

func (x *GetCosTmpSecretReply) GetCosCredential() *CosCredential {
	if x != nil {
		return x.CosCredential
	}
	return nil
}

func (x *GetCosTmpSecretReply) GetCosBaseUrl() string {
	if x != nil {
		return x.CosBaseUrl
	}
	return ""
}

// 获取删除cos实验文件临时权限，附带查询权限
type GetCosDeleteTmpSecretRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	ExperimentId int64 `protobuf:"varint,2,opt,name=experimentId,proto3" json:"experimentId,omitempty"`
}

func (x *GetCosDeleteTmpSecretRequest) Reset() {
	*x = GetCosDeleteTmpSecretRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laboratory_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCosDeleteTmpSecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCosDeleteTmpSecretRequest) ProtoMessage() {}

func (x *GetCosDeleteTmpSecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_laboratory_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCosDeleteTmpSecretRequest.ProtoReflect.Descriptor instead.
func (*GetCosDeleteTmpSecretRequest) Descriptor() ([]byte, []int) {
	return file_laboratory_proto_rawDescGZIP(), []int{5}
}

func (x *GetCosDeleteTmpSecretRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetCosDeleteTmpSecretRequest) GetExperimentId() int64 {
	if x != nil {
		return x.ExperimentId
	}
	return 0
}

type GetCosDeleteTmpSecretReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CosCredential *CosCredential `protobuf:"bytes,1,opt,name=cosCredential,proto3" json:"cosCredential,omitempty"`
	CosBaseUrl    string         `protobuf:"bytes,2,opt,name=cosBaseUrl,proto3" json:"cosBaseUrl,omitempty"`
}

func (x *GetCosDeleteTmpSecretReply) Reset() {
	*x = GetCosDeleteTmpSecretReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laboratory_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCosDeleteTmpSecretReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCosDeleteTmpSecretReply) ProtoMessage() {}

func (x *GetCosDeleteTmpSecretReply) ProtoReflect() protoreflect.Message {
	mi := &file_laboratory_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCosDeleteTmpSecretReply.ProtoReflect.Descriptor instead.
func (*GetCosDeleteTmpSecretReply) Descriptor() ([]byte, []int) {
	return file_laboratory_proto_rawDescGZIP(), []int{6}
}

func (x *GetCosDeleteTmpSecretReply) GetCosCredential() *CosCredential {
	if x != nil {
		return x.CosCredential
	}
	return nil
}

func (x *GetCosDeleteTmpSecretReply) GetCosBaseUrl() string {
	if x != nil {
		return x.CosBaseUrl
	}
	return ""
}

// 查询实验环境列表
type QueryExperimentEnvListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset uint64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *QueryExperimentEnvListRequest) Reset() {
	*x = QueryExperimentEnvListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laboratory_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryExperimentEnvListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryExperimentEnvListRequest) ProtoMessage() {}

func (x *QueryExperimentEnvListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_laboratory_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryExperimentEnvListRequest.ProtoReflect.Descriptor instead.
func (*QueryExperimentEnvListRequest) Descriptor() ([]byte, []int) {
	return file_laboratory_proto_rawDescGZIP(), []int{7}
}

func (x *QueryExperimentEnvListRequest) GetOffset() uint64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *QueryExperimentEnvListRequest) GetLimit() uint64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type QueryExperimentEnvListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JsonResponse string `protobuf:"bytes,1,opt,name=jsonResponse,proto3" json:"jsonResponse,omitempty"`
}

func (x *QueryExperimentEnvListReply) Reset() {
	*x = QueryExperimentEnvListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laboratory_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryExperimentEnvListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryExperimentEnvListReply) ProtoMessage() {}

func (x *QueryExperimentEnvListReply) ProtoReflect() protoreflect.Message {
	mi := &file_laboratory_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryExperimentEnvListReply.ProtoReflect.Descriptor instead.
func (*QueryExperimentEnvListReply) Descriptor() ([]byte, []int) {
	return file_laboratory_proto_rawDescGZIP(), []int{8}
}

func (x *QueryExperimentEnvListReply) GetJsonResponse() string {
	if x != nil {
		return x.JsonResponse
	}
	return ""
}

// 按cmvImageId 查询 cmvImage
type CvmImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CvmImageId string `protobuf:"bytes,1,opt,name=cvmImageId,proto3" json:"cvmImageId,omitempty"`
}

func (x *CvmImageRequest) Reset() {
	*x = CvmImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laboratory_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CvmImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CvmImageRequest) ProtoMessage() {}

func (x *CvmImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_laboratory_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CvmImageRequest.ProtoReflect.Descriptor instead.
func (*CvmImageRequest) Descriptor() ([]byte, []int) {
	return file_laboratory_proto_rawDescGZIP(), []int{9}
}

func (x *CvmImageRequest) GetCvmImageId() string {
	if x != nil {
		return x.CvmImageId
	}
	return ""
}

type CvmImageReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseJson string `protobuf:"bytes,1,opt,name=responseJson,proto3" json:"responseJson,omitempty"`
	// 腾讯云账户
	CloudAccount string `protobuf:"bytes,2,opt,name=cloudAccount,proto3" json:"cloudAccount,omitempty"`
}

func (x *CvmImageReply) Reset() {
	*x = CvmImageReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laboratory_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CvmImageReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CvmImageReply) ProtoMessage() {}

func (x *CvmImageReply) ProtoReflect() protoreflect.Message {
	mi := &file_laboratory_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CvmImageReply.ProtoReflect.Descriptor instead.
func (*CvmImageReply) Descriptor() ([]byte, []int) {
	return file_laboratory_proto_rawDescGZIP(), []int{10}
}

func (x *CvmImageReply) GetResponseJson() string {
	if x != nil {
		return x.ResponseJson
	}
	return ""
}

func (x *CvmImageReply) GetCloudAccount() string {
	if x != nil {
		return x.CloudAccount
	}
	return ""
}

// cmv可以zone列表
type AvailableZoneListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AvailableZoneListRequest) Reset() {
	*x = AvailableZoneListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laboratory_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableZoneListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableZoneListRequest) ProtoMessage() {}

func (x *AvailableZoneListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_laboratory_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableZoneListRequest.ProtoReflect.Descriptor instead.
func (*AvailableZoneListRequest) Descriptor() ([]byte, []int) {
	return file_laboratory_proto_rawDescGZIP(), []int{11}
}

type AvailableZoneListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ZoneList []string `protobuf:"bytes,1,rep,name=zoneList,proto3" json:"zoneList,omitempty"`
}

func (x *AvailableZoneListReply) Reset() {
	*x = AvailableZoneListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laboratory_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailableZoneListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableZoneListReply) ProtoMessage() {}

func (x *AvailableZoneListReply) ProtoReflect() protoreflect.Message {
	mi := &file_laboratory_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableZoneListReply.ProtoReflect.Descriptor instead.
func (*AvailableZoneListReply) Descriptor() ([]byte, []int) {
	return file_laboratory_proto_rawDescGZIP(), []int{12}
}

func (x *AvailableZoneListReply) GetZoneList() []string {
	if x != nil {
		return x.ZoneList
	}
	return nil
}

// 获取cvm详情列表
type GetCvmListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int64  `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int64  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Zone   string `protobuf:"bytes,3,opt,name=zone,proto3" json:"zone,omitempty"`
}

func (x *GetCvmListRequest) Reset() {
	*x = GetCvmListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laboratory_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCvmListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCvmListRequest) ProtoMessage() {}

func (x *GetCvmListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_laboratory_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCvmListRequest.ProtoReflect.Descriptor instead.
func (*GetCvmListRequest) Descriptor() ([]byte, []int) {
	return file_laboratory_proto_rawDescGZIP(), []int{13}
}

func (x *GetCvmListRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetCvmListRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetCvmListRequest) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

type GetCvmListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cvm list 详情
	DescribeCvmListJson string `protobuf:"bytes,1,opt,name=describeCvmListJson,proto3" json:"describeCvmListJson,omitempty"`
}

func (x *GetCvmListReply) Reset() {
	*x = GetCvmListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laboratory_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCvmListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCvmListReply) ProtoMessage() {}

func (x *GetCvmListReply) ProtoReflect() protoreflect.Message {
	mi := &file_laboratory_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCvmListReply.ProtoReflect.Descriptor instead.
func (*GetCvmListReply) Descriptor() ([]byte, []int) {
	return file_laboratory_proto_rawDescGZIP(), []int{14}
}

func (x *GetCvmListReply) GetDescribeCvmListJson() string {
	if x != nil {
		return x.DescribeCvmListJson
	}
	return ""
}

// 删除计算环境请求和回复
type DeleteExperimentEnvRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 批量计算环境id
	BatchEnvId string `protobuf:"bytes,1,opt,name=batchEnvId,proto3" json:"batchEnvId,omitempty"`
}

func (x *DeleteExperimentEnvRequest) Reset() {
	*x = DeleteExperimentEnvRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laboratory_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExperimentEnvRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExperimentEnvRequest) ProtoMessage() {}

func (x *DeleteExperimentEnvRequest) ProtoReflect() protoreflect.Message {
	mi := &file_laboratory_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExperimentEnvRequest.ProtoReflect.Descriptor instead.
func (*DeleteExperimentEnvRequest) Descriptor() ([]byte, []int) {
	return file_laboratory_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteExperimentEnvRequest) GetBatchEnvId() string {
	if x != nil {
		return x.BatchEnvId
	}
	return ""
}

type DeleteExperimentEnvReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteExperimentEnvReply) Reset() {
	*x = DeleteExperimentEnvReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laboratory_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExperimentEnvReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExperimentEnvReply) ProtoMessage() {}

func (x *DeleteExperimentEnvReply) ProtoReflect() protoreflect.Message {
	mi := &file_laboratory_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExperimentEnvReply.ProtoReflect.Descriptor instead.
func (*DeleteExperimentEnvReply) Descriptor() ([]byte, []int) {
	return file_laboratory_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteExperimentEnvReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 查询实验环境请求和回复
type QueryExperimentEnvRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 批量计算环境id
	BatchEnvId string `protobuf:"bytes,1,opt,name=batchEnvId,proto3" json:"batchEnvId,omitempty"`
}

func (x *QueryExperimentEnvRequest) Reset() {
	*x = QueryExperimentEnvRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laboratory_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryExperimentEnvRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryExperimentEnvRequest) ProtoMessage() {}

func (x *QueryExperimentEnvRequest) ProtoReflect() protoreflect.Message {
	mi := &file_laboratory_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryExperimentEnvRequest.ProtoReflect.Descriptor instead.
func (*QueryExperimentEnvRequest) Descriptor() ([]byte, []int) {
	return file_laboratory_proto_rawDescGZIP(), []int{17}
}

func (x *QueryExperimentEnvRequest) GetBatchEnvId() string {
	if x != nil {
		return x.BatchEnvId
	}
	return ""
}

type QueryExperimentEnvReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 批量计算环境详情json
	DescribeEnvJson string `protobuf:"bytes,1,opt,name=describeEnvJson,proto3" json:"describeEnvJson,omitempty"`
}

func (x *QueryExperimentEnvReply) Reset() {
	*x = QueryExperimentEnvReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laboratory_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryExperimentEnvReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryExperimentEnvReply) ProtoMessage() {}

func (x *QueryExperimentEnvReply) ProtoReflect() protoreflect.Message {
	mi := &file_laboratory_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryExperimentEnvReply.ProtoReflect.Descriptor instead.
func (*QueryExperimentEnvReply) Descriptor() ([]byte, []int) {
	return file_laboratory_proto_rawDescGZIP(), []int{18}
}

func (x *QueryExperimentEnvReply) GetDescribeEnvJson() string {
	if x != nil {
		return x.DescribeEnvJson
	}
	return ""
}

// 创建实验环境请求和回复
type CreateExperimentEnvRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// cvm镜像id
	CvmImageId string `protobuf:"bytes,1,opt,name=cvmImageId,proto3" json:"cvmImageId,omitempty"`
	// 节点数量
	NodeNum int64 `protobuf:"varint,2,opt,name=nodeNum,proto3" json:"nodeNum,omitempty"`
	// 输入文件cos路径
	InputCosPath string `protobuf:"bytes,3,opt,name=inputCosPath,proto3" json:"inputCosPath,omitempty"`
	Zone         string `protobuf:"bytes,4,opt,name=zone,proto3" json:"zone,omitempty"`
	// cvm实例类型
	InstanceType string `protobuf:"bytes,5,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
	// 云硬盘类型
	DiskType string `protobuf:"bytes,6,opt,name=diskType,proto3" json:"diskType,omitempty"`
	// 云硬盘size
	DiskSize int64 `protobuf:"varint,7,opt,name=diskSize,proto3" json:"diskSize,omitempty"`
}

func (x *CreateExperimentEnvRequest) Reset() {
	*x = CreateExperimentEnvRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laboratory_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateExperimentEnvRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExperimentEnvRequest) ProtoMessage() {}

func (x *CreateExperimentEnvRequest) ProtoReflect() protoreflect.Message {
	mi := &file_laboratory_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExperimentEnvRequest.ProtoReflect.Descriptor instead.
func (*CreateExperimentEnvRequest) Descriptor() ([]byte, []int) {
	return file_laboratory_proto_rawDescGZIP(), []int{19}
}

func (x *CreateExperimentEnvRequest) GetCvmImageId() string {
	if x != nil {
		return x.CvmImageId
	}
	return ""
}

func (x *CreateExperimentEnvRequest) GetNodeNum() int64 {
	if x != nil {
		return x.NodeNum
	}
	return 0
}

func (x *CreateExperimentEnvRequest) GetInputCosPath() string {
	if x != nil {
		return x.InputCosPath
	}
	return ""
}

func (x *CreateExperimentEnvRequest) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *CreateExperimentEnvRequest) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *CreateExperimentEnvRequest) GetDiskType() string {
	if x != nil {
		return x.DiskType
	}
	return ""
}

func (x *CreateExperimentEnvRequest) GetDiskSize() int64 {
	if x != nil {
		return x.DiskSize
	}
	return 0
}

type CreateExperimentEnvReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 批量计算环境id
	EnvId string `protobuf:"bytes,1,opt,name=envId,proto3" json:"envId,omitempty"`
}

func (x *CreateExperimentEnvReply) Reset() {
	*x = CreateExperimentEnvReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laboratory_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateExperimentEnvReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExperimentEnvReply) ProtoMessage() {}

func (x *CreateExperimentEnvReply) ProtoReflect() protoreflect.Message {
	mi := &file_laboratory_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExperimentEnvReply.ProtoReflect.Descriptor instead.
func (*CreateExperimentEnvReply) Descriptor() ([]byte, []int) {
	return file_laboratory_proto_rawDescGZIP(), []int{20}
}

func (x *CreateExperimentEnvReply) GetEnvId() string {
	if x != nil {
		return x.EnvId
	}
	return ""
}

// 删除实验请求和回复
type DeleteExperimentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jid string `protobuf:"bytes,1,opt,name=jid,proto3" json:"jid,omitempty"`
}

func (x *DeleteExperimentRequest) Reset() {
	*x = DeleteExperimentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laboratory_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExperimentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExperimentRequest) ProtoMessage() {}

func (x *DeleteExperimentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_laboratory_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExperimentRequest.ProtoReflect.Descriptor instead.
func (*DeleteExperimentRequest) Descriptor() ([]byte, []int) {
	return file_laboratory_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteExperimentRequest) GetJid() string {
	if x != nil {
		return x.Jid
	}
	return ""
}

type DeleteExperimentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteExperimentReply) Reset() {
	*x = DeleteExperimentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laboratory_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExperimentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExperimentReply) ProtoMessage() {}

func (x *DeleteExperimentReply) ProtoReflect() protoreflect.Message {
	mi := &file_laboratory_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExperimentReply.ProtoReflect.Descriptor instead.
func (*DeleteExperimentReply) Descriptor() ([]byte, []int) {
	return file_laboratory_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteExperimentReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 查询实验详情请求和回复
type QueryExperimentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jid string `protobuf:"bytes,1,opt,name=jid,proto3" json:"jid,omitempty"`
}

func (x *QueryExperimentRequest) Reset() {
	*x = QueryExperimentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laboratory_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryExperimentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryExperimentRequest) ProtoMessage() {}

func (x *QueryExperimentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_laboratory_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryExperimentRequest.ProtoReflect.Descriptor instead.
func (*QueryExperimentRequest) Descriptor() ([]byte, []int) {
	return file_laboratory_proto_rawDescGZIP(), []int{23}
}

func (x *QueryExperimentRequest) GetJid() string {
	if x != nil {
		return x.Jid
	}
	return ""
}

type QueryExperimentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobDetailsJson string `protobuf:"bytes,1,opt,name=jobDetailsJson,proto3" json:"jobDetailsJson,omitempty"`
}

func (x *QueryExperimentReply) Reset() {
	*x = QueryExperimentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laboratory_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryExperimentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryExperimentReply) ProtoMessage() {}

func (x *QueryExperimentReply) ProtoReflect() protoreflect.Message {
	mi := &file_laboratory_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryExperimentReply.ProtoReflect.Descriptor instead.
func (*QueryExperimentReply) Descriptor() ([]byte, []int) {
	return file_laboratory_proto_rawDescGZIP(), []int{24}
}

func (x *QueryExperimentReply) GetJobDetailsJson() string {
	if x != nil {
		return x.JobDetailsJson
	}
	return ""
}

// 终止实验请求和回复
type TerminateExperimentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// batch compute 任务id
	Jid string `protobuf:"bytes,1,opt,name=jid,proto3" json:"jid,omitempty"`
}

func (x *TerminateExperimentRequest) Reset() {
	*x = TerminateExperimentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laboratory_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminateExperimentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateExperimentRequest) ProtoMessage() {}

func (x *TerminateExperimentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_laboratory_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateExperimentRequest.ProtoReflect.Descriptor instead.
func (*TerminateExperimentRequest) Descriptor() ([]byte, []int) {
	return file_laboratory_proto_rawDescGZIP(), []int{25}
}

func (x *TerminateExperimentRequest) GetJid() string {
	if x != nil {
		return x.Jid
	}
	return ""
}

type TerminateExperimentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TerminateExperimentReply) Reset() {
	*x = TerminateExperimentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laboratory_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminateExperimentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateExperimentReply) ProtoMessage() {}

func (x *TerminateExperimentReply) ProtoReflect() protoreflect.Message {
	mi := &file_laboratory_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateExperimentReply.ProtoReflect.Descriptor instead.
func (*TerminateExperimentReply) Descriptor() ([]byte, []int) {
	return file_laboratory_proto_rawDescGZIP(), []int{26}
}

func (x *TerminateExperimentReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 提交实验
type SubmitExperimentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 运行指令(base64编码)
	B64RunCmd string `protobuf:"bytes,1,opt,name=b64RunCmd,proto3" json:"b64RunCmd,omitempty"`
	// 实验名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 实验描述
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// 计算任务的超时时间
	Timeout uint64 `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// cos实验文件保存基本路径
	CosPath string `protobuf:"bytes,5,opt,name=cosPath,proto3" json:"cosPath,omitempty"`
	// 批量计算环境id
	BatchEnvId string `protobuf:"bytes,6,opt,name=batchEnvId,proto3" json:"batchEnvId,omitempty"`
	Zone       string `protobuf:"bytes,7,opt,name=zone,proto3" json:"zone,omitempty"`
}

func (x *SubmitExperimentRequest) Reset() {
	*x = SubmitExperimentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laboratory_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitExperimentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitExperimentRequest) ProtoMessage() {}

func (x *SubmitExperimentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_laboratory_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitExperimentRequest.ProtoReflect.Descriptor instead.
func (*SubmitExperimentRequest) Descriptor() ([]byte, []int) {
	return file_laboratory_proto_rawDescGZIP(), []int{27}
}

func (x *SubmitExperimentRequest) GetB64RunCmd() string {
	if x != nil {
		return x.B64RunCmd
	}
	return ""
}

func (x *SubmitExperimentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubmitExperimentRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SubmitExperimentRequest) GetTimeout() uint64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *SubmitExperimentRequest) GetCosPath() string {
	if x != nil {
		return x.CosPath
	}
	return ""
}

func (x *SubmitExperimentRequest) GetBatchEnvId() string {
	if x != nil {
		return x.BatchEnvId
	}
	return ""
}

func (x *SubmitExperimentRequest) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

type SubmitExperimentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jid string `protobuf:"bytes,1,opt,name=jid,proto3" json:"jid,omitempty"`
}

func (x *SubmitExperimentReply) Reset() {
	*x = SubmitExperimentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laboratory_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitExperimentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitExperimentReply) ProtoMessage() {}

func (x *SubmitExperimentReply) ProtoReflect() protoreflect.Message {
	mi := &file_laboratory_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitExperimentReply.ProtoReflect.Descriptor instead.
func (*SubmitExperimentReply) Descriptor() ([]byte, []int) {
	return file_laboratory_proto_rawDescGZIP(), []int{28}
}

func (x *SubmitExperimentReply) GetJid() string {
	if x != nil {
		return x.Jid
	}
	return ""
}

// 获取cos上传临时秘钥
type GetCosUploadTmpSecretRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpType            GetCosUploadTmpSecretRequest_OpType `protobuf:"varint,1,opt,name=opType,proto3,enum=laboratory.GetCosUploadTmpSecretRequest_OpType" json:"opType,omitempty"`
	ExperimentDir     string                              `protobuf:"bytes,2,opt,name=experimentDir,proto3" json:"experimentDir,omitempty"`         // 实验文件在cos的文件夹，如果op_type=experiment,此参数必须
	CopyExperimentDir string                              `protobuf:"bytes,3,opt,name=copyExperimentDir,proto3" json:"copyExperimentDir,omitempty"` // copy实验时实验
}

func (x *GetCosUploadTmpSecretRequest) Reset() {
	*x = GetCosUploadTmpSecretRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laboratory_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCosUploadTmpSecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCosUploadTmpSecretRequest) ProtoMessage() {}

func (x *GetCosUploadTmpSecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_laboratory_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCosUploadTmpSecretRequest.ProtoReflect.Descriptor instead.
func (*GetCosUploadTmpSecretRequest) Descriptor() ([]byte, []int) {
	return file_laboratory_proto_rawDescGZIP(), []int{29}
}

func (x *GetCosUploadTmpSecretRequest) GetOpType() GetCosUploadTmpSecretRequest_OpType {
	if x != nil {
		return x.OpType
	}
	return GetCosUploadTmpSecretRequest_experiment
}

func (x *GetCosUploadTmpSecretRequest) GetExperimentDir() string {
	if x != nil {
		return x.ExperimentDir
	}
	return ""
}

func (x *GetCosUploadTmpSecretRequest) GetCopyExperimentDir() string {
	if x != nil {
		return x.CopyExperimentDir
	}
	return ""
}

type GetCosUploadTmpSecretReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CosCredential *CosCredential `protobuf:"bytes,1,opt,name=cosCredential,proto3" json:"cosCredential,omitempty"`
	CosBaseUrl    string         `protobuf:"bytes,2,opt,name=cosBaseUrl,proto3" json:"cosBaseUrl,omitempty"`
}

func (x *GetCosUploadTmpSecretReply) Reset() {
	*x = GetCosUploadTmpSecretReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laboratory_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCosUploadTmpSecretReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCosUploadTmpSecretReply) ProtoMessage() {}

func (x *GetCosUploadTmpSecretReply) ProtoReflect() protoreflect.Message {
	mi := &file_laboratory_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCosUploadTmpSecretReply.ProtoReflect.Descriptor instead.
func (*GetCosUploadTmpSecretReply) Descriptor() ([]byte, []int) {
	return file_laboratory_proto_rawDescGZIP(), []int{30}
}

func (x *GetCosUploadTmpSecretReply) GetCosCredential() *CosCredential {
	if x != nil {
		return x.CosCredential
	}
	return nil
}

func (x *GetCosUploadTmpSecretReply) GetCosBaseUrl() string {
	if x != nil {
		return x.CosBaseUrl
	}
	return ""
}

// 获取cos下载临时秘钥
type GetCosDownloadTmpSecretRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId int64 `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *GetCosDownloadTmpSecretRequest) Reset() {
	*x = GetCosDownloadTmpSecretRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laboratory_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCosDownloadTmpSecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCosDownloadTmpSecretRequest) ProtoMessage() {}

func (x *GetCosDownloadTmpSecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_laboratory_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCosDownloadTmpSecretRequest.ProtoReflect.Descriptor instead.
func (*GetCosDownloadTmpSecretRequest) Descriptor() ([]byte, []int) {
	return file_laboratory_proto_rawDescGZIP(), []int{31}
}

func (x *GetCosDownloadTmpSecretRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type GetCosDownloadTmpSecretReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CosCredential *CosCredential `protobuf:"bytes,1,opt,name=cosCredential,proto3" json:"cosCredential,omitempty"`
	CosBaseUrl    string         `protobuf:"bytes,2,opt,name=cosBaseUrl,proto3" json:"cosBaseUrl,omitempty"`
}

func (x *GetCosDownloadTmpSecretReply) Reset() {
	*x = GetCosDownloadTmpSecretReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_laboratory_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCosDownloadTmpSecretReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCosDownloadTmpSecretReply) ProtoMessage() {}

func (x *GetCosDownloadTmpSecretReply) ProtoReflect() protoreflect.Message {
	mi := &file_laboratory_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCosDownloadTmpSecretReply.ProtoReflect.Descriptor instead.
func (*GetCosDownloadTmpSecretReply) Descriptor() ([]byte, []int) {
	return file_laboratory_proto_rawDescGZIP(), []int{32}
}

func (x *GetCosDownloadTmpSecretReply) GetCosCredential() *CosCredential {
	if x != nil {
		return x.CosCredential
	}
	return nil
}

func (x *GetCosDownloadTmpSecretReply) GetCosBaseUrl() string {
	if x != nil {
		return x.CosBaseUrl
	}
	return ""
}

var File_laboratory_proto protoreflect.FileDescriptor

var file_laboratory_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x8b,
	0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x73, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6d, 0x70, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x81, 0x01, 0x0a,
	0x17, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x65, 0x66, 0x73, 0x55, 0x72,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x65, 0x66, 0x73, 0x55, 0x72, 0x6c,
	0x22, 0x31, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6e,
	0x73, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x32, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x54, 0x6d, 0x70,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x73, 0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x73, 0x50, 0x61, 0x74, 0x68, 0x22, 0x77, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x43, 0x6f,
	0x73, 0x54, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x3f, 0x0a, 0x0d, 0x63, 0x6f, 0x73, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x73, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x52, 0x0d, 0x63, 0x6f, 0x73, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x73, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c,
	0x22, 0x5a, 0x0a, 0x1c, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x7d, 0x0a, 0x1a,
	0x67, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6d, 0x70, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x6f,
	0x73, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43,
	0x6f, 0x73, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0d, 0x63, 0x6f,
	0x73, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x73, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x73, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x4d, 0x0a, 0x1d, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e,
	0x76, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x41, 0x0a, 0x1b, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x6a, 0x73, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x0a,
	0x0f, 0x63, 0x76, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x76, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x76, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x22, 0x57, 0x0a, 0x0d, 0x63, 0x76, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x73, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x1a, 0x0a, 0x18, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x34, 0x0a, 0x16, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x7a, 0x6f, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x55, 0x0a, 0x11, 0x67,
	0x65, 0x74, 0x43, 0x76, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f,
	0x6e, 0x65, 0x22, 0x43, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x43, 0x76, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x43, 0x76, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x76, 0x6d, 0x4c,
	0x69, 0x73, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x3c, 0x0a, 0x1a, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e,
	0x76, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x45, 0x6e, 0x76, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x18, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3b, 0x0a, 0x19, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e,
	0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x45, 0x6e, 0x76, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x45, 0x6e, 0x76, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x17, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45,
	0x6e, 0x76, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x45, 0x6e, 0x76, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0xea, 0x01,
	0x0a, 0x1a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x76, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x76, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6e,
	0x6f, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x43,
	0x6f, 0x73, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x43, 0x6f, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f,
	0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x30, 0x0a, 0x18, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e,
	0x76, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6e, 0x76, 0x49, 0x64, 0x22, 0x2b, 0x0a, 0x17,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6a, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6a, 0x69, 0x64, 0x22, 0x31, 0x0a, 0x15, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2a, 0x0a, 0x16,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6a, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6a, 0x69, 0x64, 0x22, 0x3e, 0x0a, 0x14, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x26, 0x0a, 0x0e, 0x6a, 0x6f, 0x62, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4a, 0x73,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6a, 0x6f, 0x62, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x2e, 0x0a, 0x1a, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6a, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6a, 0x69, 0x64, 0x22, 0x34, 0x0a, 0x18, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xd5,
	0x01, 0x0a, 0x17, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x36,
	0x34, 0x52, 0x75, 0x6e, 0x43, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x36, 0x34, 0x52, 0x75, 0x6e, 0x43, 0x6d, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x73, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x73, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x76, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x76,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x22, 0x29, 0x0a, 0x15, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6a, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6a, 0x69,
	0x64, 0x22, 0xd5, 0x01, 0x0a, 0x1c, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x55, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x47, 0x0a, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x67, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6d, 0x70, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69,
	0x72, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x70, 0x79, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f,
	0x70, 0x79, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x69, 0x72, 0x22,
	0x18, 0x0a, 0x06, 0x4f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x00, 0x22, 0x7d, 0x0a, 0x1a, 0x67, 0x65, 0x74,
	0x43, 0x6f, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x6f, 0x73, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x73, 0x43,
	0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0d, 0x63, 0x6f, 0x73, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x42,
	0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x73, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x38, 0x0a, 0x1e, 0x67, 0x65, 0x74, 0x43,
	0x6f, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6d, 0x70, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x7f, 0x0a, 0x1c, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x6f, 0x73, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x43, 0x6f, 0x73, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x0d, 0x63, 0x6f, 0x73, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x73, 0x42, 0x61, 0x73, 0x65,
	0x55, 0x72, 0x6c, 0x32, 0xa5, 0x0c, 0x0a, 0x0a, 0x4c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x59, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x54, 0x6d, 0x70, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x22, 0x2e, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x54, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x54, 0x6d, 0x70,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6b, 0x0a,
	0x15, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6d, 0x70,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x28, 0x2e, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x67, 0x65,
	0x74, 0x43, 0x6f, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6d, 0x70, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x17, 0x67, 0x65,
	0x74, 0x43, 0x6f, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6d, 0x70, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x2a, 0x2e, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x67,
	0x65, 0x74, 0x43, 0x6f, 0x73, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6d, 0x70,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6b, 0x0a,
	0x15, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6d, 0x70,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x28, 0x2e, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x67, 0x65,
	0x74, 0x43, 0x6f, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6d, 0x70, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x13, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e,
	0x76, 0x12, 0x26, 0x2e, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x45,
	0x6e, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x62, 0x0a, 0x12, 0x71, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x12, 0x25, 0x2e, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x16, 0x71, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x29, 0x2e, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6c, 0x61, 0x62,
	0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x12, 0x26, 0x2e, 0x6c,
	0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x10,
	0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x23, 0x2e, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x13, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x26, 0x2e, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6c, 0x61, 0x62, 0x6f,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x59, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6c, 0x61, 0x62, 0x6f, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x10,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x23, 0x2e, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0a, 0x67, 0x65,
	0x74, 0x43, 0x76, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x6c, 0x61, 0x62, 0x6f, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x67, 0x65, 0x74, 0x43, 0x76, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x67, 0x65, 0x74, 0x43, 0x76, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x2e, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x08, 0x63, 0x76, 0x6d, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x1b, 0x2e, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79,
	0x2e, 0x63, 0x76, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x19, 0x2e, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x63, 0x76,
	0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5c, 0x0a,
	0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c,
	0x65, 0x12, 0x23, 0x2e, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6e, 0x73, 0x6f, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x65, 0x62, 0x43, 0x6f, 0x6e,
	0x73, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x0e, 0x5a, 0x0c, 0x2e,
	0x3b, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_laboratory_proto_rawDescOnce sync.Once
	file_laboratory_proto_rawDescData = file_laboratory_proto_rawDesc
)

func file_laboratory_proto_rawDescGZIP() []byte {
	file_laboratory_proto_rawDescOnce.Do(func() {
		file_laboratory_proto_rawDescData = protoimpl.X.CompressGZIP(file_laboratory_proto_rawDescData)
	})
	return file_laboratory_proto_rawDescData
}

var file_laboratory_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_laboratory_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_laboratory_proto_goTypes = []interface{}{
	(GetCosUploadTmpSecretRequest_OpType)(0), // 0: laboratory.getCosUploadTmpSecretRequest.OpType
	(*CosCredential)(nil),                    // 1: laboratory.CosCredential
	(*CreateWebConsoleRequest)(nil),          // 2: laboratory.createWebConsoleRequest
	(*CreateWebConsoleReply)(nil),            // 3: laboratory.createWebConsoleReply
	(*GetCosTmpSecretRequest)(nil),           // 4: laboratory.getCosTmpSecretRequest
	(*GetCosTmpSecretReply)(nil),             // 5: laboratory.getCosTmpSecretReply
	(*GetCosDeleteTmpSecretRequest)(nil),     // 6: laboratory.getCosDeleteTmpSecretRequest
	(*GetCosDeleteTmpSecretReply)(nil),       // 7: laboratory.getCosDeleteTmpSecretReply
	(*QueryExperimentEnvListRequest)(nil),    // 8: laboratory.queryExperimentEnvListRequest
	(*QueryExperimentEnvListReply)(nil),      // 9: laboratory.queryExperimentEnvListReply
	(*CvmImageRequest)(nil),                  // 10: laboratory.cvmImageRequest
	(*CvmImageReply)(nil),                    // 11: laboratory.cvmImageReply
	(*AvailableZoneListRequest)(nil),         // 12: laboratory.availableZoneListRequest
	(*AvailableZoneListReply)(nil),           // 13: laboratory.availableZoneListReply
	(*GetCvmListRequest)(nil),                // 14: laboratory.getCvmListRequest
	(*GetCvmListReply)(nil),                  // 15: laboratory.getCvmListReply
	(*DeleteExperimentEnvRequest)(nil),       // 16: laboratory.deleteExperimentEnvRequest
	(*DeleteExperimentEnvReply)(nil),         // 17: laboratory.deleteExperimentEnvReply
	(*QueryExperimentEnvRequest)(nil),        // 18: laboratory.queryExperimentEnvRequest
	(*QueryExperimentEnvReply)(nil),          // 19: laboratory.queryExperimentEnvReply
	(*CreateExperimentEnvRequest)(nil),       // 20: laboratory.createExperimentEnvRequest
	(*CreateExperimentEnvReply)(nil),         // 21: laboratory.createExperimentEnvReply
	(*DeleteExperimentRequest)(nil),          // 22: laboratory.deleteExperimentRequest
	(*DeleteExperimentReply)(nil),            // 23: laboratory.deleteExperimentReply
	(*QueryExperimentRequest)(nil),           // 24: laboratory.queryExperimentRequest
	(*QueryExperimentReply)(nil),             // 25: laboratory.queryExperimentReply
	(*TerminateExperimentRequest)(nil),       // 26: laboratory.terminateExperimentRequest
	(*TerminateExperimentReply)(nil),         // 27: laboratory.terminateExperimentReply
	(*SubmitExperimentRequest)(nil),          // 28: laboratory.submitExperimentRequest
	(*SubmitExperimentReply)(nil),            // 29: laboratory.submitExperimentReply
	(*GetCosUploadTmpSecretRequest)(nil),     // 30: laboratory.getCosUploadTmpSecretRequest
	(*GetCosUploadTmpSecretReply)(nil),       // 31: laboratory.getCosUploadTmpSecretReply
	(*GetCosDownloadTmpSecretRequest)(nil),   // 32: laboratory.getCosDownloadTmpSecretRequest
	(*GetCosDownloadTmpSecretReply)(nil),     // 33: laboratory.getCosDownloadTmpSecretReply
}
var file_laboratory_proto_depIdxs = []int32{
	1,  // 0: laboratory.getCosTmpSecretReply.cosCredential:type_name -> laboratory.CosCredential
	1,  // 1: laboratory.getCosDeleteTmpSecretReply.cosCredential:type_name -> laboratory.CosCredential
	0,  // 2: laboratory.getCosUploadTmpSecretRequest.opType:type_name -> laboratory.getCosUploadTmpSecretRequest.OpType
	1,  // 3: laboratory.getCosUploadTmpSecretReply.cosCredential:type_name -> laboratory.CosCredential
	1,  // 4: laboratory.getCosDownloadTmpSecretReply.cosCredential:type_name -> laboratory.CosCredential
	4,  // 5: laboratory.Laboratory.getCosTmpSecret:input_type -> laboratory.getCosTmpSecretRequest
	30, // 6: laboratory.Laboratory.getCosUploadTmpSecret:input_type -> laboratory.getCosUploadTmpSecretRequest
	32, // 7: laboratory.Laboratory.getCosDownloadTmpSecret:input_type -> laboratory.getCosDownloadTmpSecretRequest
	6,  // 8: laboratory.Laboratory.getCosDeleteTmpSecret:input_type -> laboratory.getCosDeleteTmpSecretRequest
	20, // 9: laboratory.Laboratory.createExperimentEnv:input_type -> laboratory.createExperimentEnvRequest
	18, // 10: laboratory.Laboratory.queryExperimentEnv:input_type -> laboratory.queryExperimentEnvRequest
	8,  // 11: laboratory.Laboratory.queryExperimentEnvList:input_type -> laboratory.queryExperimentEnvListRequest
	16, // 12: laboratory.Laboratory.deleteExperimentEnv:input_type -> laboratory.deleteExperimentEnvRequest
	28, // 13: laboratory.Laboratory.submitExperiment:input_type -> laboratory.submitExperimentRequest
	26, // 14: laboratory.Laboratory.terminateExperiment:input_type -> laboratory.terminateExperimentRequest
	24, // 15: laboratory.Laboratory.queryExperiment:input_type -> laboratory.queryExperimentRequest
	22, // 16: laboratory.Laboratory.deleteExperiment:input_type -> laboratory.deleteExperimentRequest
	14, // 17: laboratory.Laboratory.getCvmList:input_type -> laboratory.getCvmListRequest
	12, // 18: laboratory.Laboratory.availableZoneList:input_type -> laboratory.availableZoneListRequest
	10, // 19: laboratory.Laboratory.cvmImage:input_type -> laboratory.cvmImageRequest
	2,  // 20: laboratory.Laboratory.createWebConsole:input_type -> laboratory.createWebConsoleRequest
	5,  // 21: laboratory.Laboratory.getCosTmpSecret:output_type -> laboratory.getCosTmpSecretReply
	31, // 22: laboratory.Laboratory.getCosUploadTmpSecret:output_type -> laboratory.getCosUploadTmpSecretReply
	33, // 23: laboratory.Laboratory.getCosDownloadTmpSecret:output_type -> laboratory.getCosDownloadTmpSecretReply
	7,  // 24: laboratory.Laboratory.getCosDeleteTmpSecret:output_type -> laboratory.getCosDeleteTmpSecretReply
	21, // 25: laboratory.Laboratory.createExperimentEnv:output_type -> laboratory.createExperimentEnvReply
	19, // 26: laboratory.Laboratory.queryExperimentEnv:output_type -> laboratory.queryExperimentEnvReply
	9,  // 27: laboratory.Laboratory.queryExperimentEnvList:output_type -> laboratory.queryExperimentEnvListReply
	17, // 28: laboratory.Laboratory.deleteExperimentEnv:output_type -> laboratory.deleteExperimentEnvReply
	29, // 29: laboratory.Laboratory.submitExperiment:output_type -> laboratory.submitExperimentReply
	27, // 30: laboratory.Laboratory.terminateExperiment:output_type -> laboratory.terminateExperimentReply
	25, // 31: laboratory.Laboratory.queryExperiment:output_type -> laboratory.queryExperimentReply
	23, // 32: laboratory.Laboratory.deleteExperiment:output_type -> laboratory.deleteExperimentReply
	15, // 33: laboratory.Laboratory.getCvmList:output_type -> laboratory.getCvmListReply
	13, // 34: laboratory.Laboratory.availableZoneList:output_type -> laboratory.availableZoneListReply
	11, // 35: laboratory.Laboratory.cvmImage:output_type -> laboratory.cvmImageReply
	3,  // 36: laboratory.Laboratory.createWebConsole:output_type -> laboratory.createWebConsoleReply
	21, // [21:37] is the sub-list for method output_type
	5,  // [5:21] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_laboratory_proto_init() }
func file_laboratory_proto_init() {
	if File_laboratory_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_laboratory_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CosCredential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laboratory_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWebConsoleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laboratory_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWebConsoleReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laboratory_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCosTmpSecretRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laboratory_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCosTmpSecretReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laboratory_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCosDeleteTmpSecretRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laboratory_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCosDeleteTmpSecretReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laboratory_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryExperimentEnvListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laboratory_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryExperimentEnvListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laboratory_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CvmImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laboratory_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CvmImageReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laboratory_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableZoneListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laboratory_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailableZoneListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laboratory_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCvmListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laboratory_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCvmListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laboratory_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExperimentEnvRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laboratory_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExperimentEnvReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laboratory_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryExperimentEnvRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laboratory_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryExperimentEnvReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laboratory_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateExperimentEnvRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laboratory_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateExperimentEnvReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laboratory_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExperimentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laboratory_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExperimentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laboratory_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryExperimentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laboratory_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryExperimentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laboratory_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminateExperimentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laboratory_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminateExperimentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laboratory_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitExperimentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laboratory_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitExperimentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laboratory_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCosUploadTmpSecretRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laboratory_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCosUploadTmpSecretReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laboratory_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCosDownloadTmpSecretRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_laboratory_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCosDownloadTmpSecretReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_laboratory_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_laboratory_proto_goTypes,
		DependencyIndexes: file_laboratory_proto_depIdxs,
		EnumInfos:         file_laboratory_proto_enumTypes,
		MessageInfos:      file_laboratory_proto_msgTypes,
	}.Build()
	File_laboratory_proto = out.File
	file_laboratory_proto_rawDesc = nil
	file_laboratory_proto_goTypes = nil
	file_laboratory_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LaboratoryClient is the client API for Laboratory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LaboratoryClient interface {
	// 获取cos临时秘钥,上传指定固定文件路径，下载给定范围，删除，所有权限
	GetCosTmpSecret(ctx context.Context, in *GetCosTmpSecretRequest, opts ...grpc.CallOption) (*GetCosTmpSecretReply, error)
	GetCosUploadTmpSecret(ctx context.Context, in *GetCosUploadTmpSecretRequest, opts ...grpc.CallOption) (*GetCosUploadTmpSecretReply, error)
	GetCosDownloadTmpSecret(ctx context.Context, in *GetCosDownloadTmpSecretRequest, opts ...grpc.CallOption) (*GetCosDownloadTmpSecretReply, error)
	GetCosDeleteTmpSecret(ctx context.Context, in *GetCosDeleteTmpSecretRequest, opts ...grpc.CallOption) (*GetCosDeleteTmpSecretReply, error)
	// 创建实验环境
	CreateExperimentEnv(ctx context.Context, in *CreateExperimentEnvRequest, opts ...grpc.CallOption) (*CreateExperimentEnvReply, error)
	// 查询实验环境
	QueryExperimentEnv(ctx context.Context, in *QueryExperimentEnvRequest, opts ...grpc.CallOption) (*QueryExperimentEnvReply, error)
	// 查询实验环境列表
	QueryExperimentEnvList(ctx context.Context, in *QueryExperimentEnvListRequest, opts ...grpc.CallOption) (*QueryExperimentEnvListReply, error)
	// 删除实验环境
	DeleteExperimentEnv(ctx context.Context, in *DeleteExperimentEnvRequest, opts ...grpc.CallOption) (*DeleteExperimentEnvReply, error)
	// 提交实验
	SubmitExperiment(ctx context.Context, in *SubmitExperimentRequest, opts ...grpc.CallOption) (*SubmitExperimentReply, error)
	// 终止实验
	TerminateExperiment(ctx context.Context, in *TerminateExperimentRequest, opts ...grpc.CallOption) (*TerminateExperimentReply, error)
	// 查询实验详情
	QueryExperiment(ctx context.Context, in *QueryExperimentRequest, opts ...grpc.CallOption) (*QueryExperimentReply, error)
	// 删除实验
	DeleteExperiment(ctx context.Context, in *DeleteExperimentRequest, opts ...grpc.CallOption) (*DeleteExperimentReply, error)
	// cvm详情列表
	GetCvmList(ctx context.Context, in *GetCvmListRequest, opts ...grpc.CallOption) (*GetCvmListReply, error)
	// cmv可用zone列表
	AvailableZoneList(ctx context.Context, in *AvailableZoneListRequest, opts ...grpc.CallOption) (*AvailableZoneListReply, error)
	// 按cmvImageId 查询 cmvImage
	CvmImage(ctx context.Context, in *CvmImageRequest, opts ...grpc.CallOption) (*CvmImageReply, error)
	// 创建web console docker容器
	CreateWebConsole(ctx context.Context, in *CreateWebConsoleRequest, opts ...grpc.CallOption) (*CreateWebConsoleReply, error)
}

type laboratoryClient struct {
	cc grpc.ClientConnInterface
}

func NewLaboratoryClient(cc grpc.ClientConnInterface) LaboratoryClient {
	return &laboratoryClient{cc}
}

func (c *laboratoryClient) GetCosTmpSecret(ctx context.Context, in *GetCosTmpSecretRequest, opts ...grpc.CallOption) (*GetCosTmpSecretReply, error) {
	out := new(GetCosTmpSecretReply)
	err := c.cc.Invoke(ctx, "/laboratory.Laboratory/getCosTmpSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laboratoryClient) GetCosUploadTmpSecret(ctx context.Context, in *GetCosUploadTmpSecretRequest, opts ...grpc.CallOption) (*GetCosUploadTmpSecretReply, error) {
	out := new(GetCosUploadTmpSecretReply)
	err := c.cc.Invoke(ctx, "/laboratory.Laboratory/getCosUploadTmpSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laboratoryClient) GetCosDownloadTmpSecret(ctx context.Context, in *GetCosDownloadTmpSecretRequest, opts ...grpc.CallOption) (*GetCosDownloadTmpSecretReply, error) {
	out := new(GetCosDownloadTmpSecretReply)
	err := c.cc.Invoke(ctx, "/laboratory.Laboratory/getCosDownloadTmpSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laboratoryClient) GetCosDeleteTmpSecret(ctx context.Context, in *GetCosDeleteTmpSecretRequest, opts ...grpc.CallOption) (*GetCosDeleteTmpSecretReply, error) {
	out := new(GetCosDeleteTmpSecretReply)
	err := c.cc.Invoke(ctx, "/laboratory.Laboratory/getCosDeleteTmpSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laboratoryClient) CreateExperimentEnv(ctx context.Context, in *CreateExperimentEnvRequest, opts ...grpc.CallOption) (*CreateExperimentEnvReply, error) {
	out := new(CreateExperimentEnvReply)
	err := c.cc.Invoke(ctx, "/laboratory.Laboratory/createExperimentEnv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laboratoryClient) QueryExperimentEnv(ctx context.Context, in *QueryExperimentEnvRequest, opts ...grpc.CallOption) (*QueryExperimentEnvReply, error) {
	out := new(QueryExperimentEnvReply)
	err := c.cc.Invoke(ctx, "/laboratory.Laboratory/queryExperimentEnv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laboratoryClient) QueryExperimentEnvList(ctx context.Context, in *QueryExperimentEnvListRequest, opts ...grpc.CallOption) (*QueryExperimentEnvListReply, error) {
	out := new(QueryExperimentEnvListReply)
	err := c.cc.Invoke(ctx, "/laboratory.Laboratory/queryExperimentEnvList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laboratoryClient) DeleteExperimentEnv(ctx context.Context, in *DeleteExperimentEnvRequest, opts ...grpc.CallOption) (*DeleteExperimentEnvReply, error) {
	out := new(DeleteExperimentEnvReply)
	err := c.cc.Invoke(ctx, "/laboratory.Laboratory/deleteExperimentEnv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laboratoryClient) SubmitExperiment(ctx context.Context, in *SubmitExperimentRequest, opts ...grpc.CallOption) (*SubmitExperimentReply, error) {
	out := new(SubmitExperimentReply)
	err := c.cc.Invoke(ctx, "/laboratory.Laboratory/submitExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laboratoryClient) TerminateExperiment(ctx context.Context, in *TerminateExperimentRequest, opts ...grpc.CallOption) (*TerminateExperimentReply, error) {
	out := new(TerminateExperimentReply)
	err := c.cc.Invoke(ctx, "/laboratory.Laboratory/terminateExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laboratoryClient) QueryExperiment(ctx context.Context, in *QueryExperimentRequest, opts ...grpc.CallOption) (*QueryExperimentReply, error) {
	out := new(QueryExperimentReply)
	err := c.cc.Invoke(ctx, "/laboratory.Laboratory/queryExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laboratoryClient) DeleteExperiment(ctx context.Context, in *DeleteExperimentRequest, opts ...grpc.CallOption) (*DeleteExperimentReply, error) {
	out := new(DeleteExperimentReply)
	err := c.cc.Invoke(ctx, "/laboratory.Laboratory/deleteExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laboratoryClient) GetCvmList(ctx context.Context, in *GetCvmListRequest, opts ...grpc.CallOption) (*GetCvmListReply, error) {
	out := new(GetCvmListReply)
	err := c.cc.Invoke(ctx, "/laboratory.Laboratory/getCvmList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laboratoryClient) AvailableZoneList(ctx context.Context, in *AvailableZoneListRequest, opts ...grpc.CallOption) (*AvailableZoneListReply, error) {
	out := new(AvailableZoneListReply)
	err := c.cc.Invoke(ctx, "/laboratory.Laboratory/availableZoneList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laboratoryClient) CvmImage(ctx context.Context, in *CvmImageRequest, opts ...grpc.CallOption) (*CvmImageReply, error) {
	out := new(CvmImageReply)
	err := c.cc.Invoke(ctx, "/laboratory.Laboratory/cvmImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laboratoryClient) CreateWebConsole(ctx context.Context, in *CreateWebConsoleRequest, opts ...grpc.CallOption) (*CreateWebConsoleReply, error) {
	out := new(CreateWebConsoleReply)
	err := c.cc.Invoke(ctx, "/laboratory.Laboratory/createWebConsole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LaboratoryServer is the server API for Laboratory service.
type LaboratoryServer interface {
	// 获取cos临时秘钥,上传指定固定文件路径，下载给定范围，删除，所有权限
	GetCosTmpSecret(context.Context, *GetCosTmpSecretRequest) (*GetCosTmpSecretReply, error)
	GetCosUploadTmpSecret(context.Context, *GetCosUploadTmpSecretRequest) (*GetCosUploadTmpSecretReply, error)
	GetCosDownloadTmpSecret(context.Context, *GetCosDownloadTmpSecretRequest) (*GetCosDownloadTmpSecretReply, error)
	GetCosDeleteTmpSecret(context.Context, *GetCosDeleteTmpSecretRequest) (*GetCosDeleteTmpSecretReply, error)
	// 创建实验环境
	CreateExperimentEnv(context.Context, *CreateExperimentEnvRequest) (*CreateExperimentEnvReply, error)
	// 查询实验环境
	QueryExperimentEnv(context.Context, *QueryExperimentEnvRequest) (*QueryExperimentEnvReply, error)
	// 查询实验环境列表
	QueryExperimentEnvList(context.Context, *QueryExperimentEnvListRequest) (*QueryExperimentEnvListReply, error)
	// 删除实验环境
	DeleteExperimentEnv(context.Context, *DeleteExperimentEnvRequest) (*DeleteExperimentEnvReply, error)
	// 提交实验
	SubmitExperiment(context.Context, *SubmitExperimentRequest) (*SubmitExperimentReply, error)
	// 终止实验
	TerminateExperiment(context.Context, *TerminateExperimentRequest) (*TerminateExperimentReply, error)
	// 查询实验详情
	QueryExperiment(context.Context, *QueryExperimentRequest) (*QueryExperimentReply, error)
	// 删除实验
	DeleteExperiment(context.Context, *DeleteExperimentRequest) (*DeleteExperimentReply, error)
	// cvm详情列表
	GetCvmList(context.Context, *GetCvmListRequest) (*GetCvmListReply, error)
	// cmv可用zone列表
	AvailableZoneList(context.Context, *AvailableZoneListRequest) (*AvailableZoneListReply, error)
	// 按cmvImageId 查询 cmvImage
	CvmImage(context.Context, *CvmImageRequest) (*CvmImageReply, error)
	// 创建web console docker容器
	CreateWebConsole(context.Context, *CreateWebConsoleRequest) (*CreateWebConsoleReply, error)
}

// UnimplementedLaboratoryServer can be embedded to have forward compatible implementations.
type UnimplementedLaboratoryServer struct {
}

func (*UnimplementedLaboratoryServer) GetCosTmpSecret(context.Context, *GetCosTmpSecretRequest) (*GetCosTmpSecretReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCosTmpSecret not implemented")
}
func (*UnimplementedLaboratoryServer) GetCosUploadTmpSecret(context.Context, *GetCosUploadTmpSecretRequest) (*GetCosUploadTmpSecretReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCosUploadTmpSecret not implemented")
}
func (*UnimplementedLaboratoryServer) GetCosDownloadTmpSecret(context.Context, *GetCosDownloadTmpSecretRequest) (*GetCosDownloadTmpSecretReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCosDownloadTmpSecret not implemented")
}
func (*UnimplementedLaboratoryServer) GetCosDeleteTmpSecret(context.Context, *GetCosDeleteTmpSecretRequest) (*GetCosDeleteTmpSecretReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCosDeleteTmpSecret not implemented")
}
func (*UnimplementedLaboratoryServer) CreateExperimentEnv(context.Context, *CreateExperimentEnvRequest) (*CreateExperimentEnvReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExperimentEnv not implemented")
}
func (*UnimplementedLaboratoryServer) QueryExperimentEnv(context.Context, *QueryExperimentEnvRequest) (*QueryExperimentEnvReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryExperimentEnv not implemented")
}
func (*UnimplementedLaboratoryServer) QueryExperimentEnvList(context.Context, *QueryExperimentEnvListRequest) (*QueryExperimentEnvListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryExperimentEnvList not implemented")
}
func (*UnimplementedLaboratoryServer) DeleteExperimentEnv(context.Context, *DeleteExperimentEnvRequest) (*DeleteExperimentEnvReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExperimentEnv not implemented")
}
func (*UnimplementedLaboratoryServer) SubmitExperiment(context.Context, *SubmitExperimentRequest) (*SubmitExperimentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitExperiment not implemented")
}
func (*UnimplementedLaboratoryServer) TerminateExperiment(context.Context, *TerminateExperimentRequest) (*TerminateExperimentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateExperiment not implemented")
}
func (*UnimplementedLaboratoryServer) QueryExperiment(context.Context, *QueryExperimentRequest) (*QueryExperimentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryExperiment not implemented")
}
func (*UnimplementedLaboratoryServer) DeleteExperiment(context.Context, *DeleteExperimentRequest) (*DeleteExperimentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExperiment not implemented")
}
func (*UnimplementedLaboratoryServer) GetCvmList(context.Context, *GetCvmListRequest) (*GetCvmListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCvmList not implemented")
}
func (*UnimplementedLaboratoryServer) AvailableZoneList(context.Context, *AvailableZoneListRequest) (*AvailableZoneListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AvailableZoneList not implemented")
}
func (*UnimplementedLaboratoryServer) CvmImage(context.Context, *CvmImageRequest) (*CvmImageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CvmImage not implemented")
}
func (*UnimplementedLaboratoryServer) CreateWebConsole(context.Context, *CreateWebConsoleRequest) (*CreateWebConsoleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWebConsole not implemented")
}

func RegisterLaboratoryServer(s *grpc.Server, srv LaboratoryServer) {
	s.RegisterService(&_Laboratory_serviceDesc, srv)
}

func _Laboratory_GetCosTmpSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCosTmpSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaboratoryServer).GetCosTmpSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/laboratory.Laboratory/GetCosTmpSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaboratoryServer).GetCosTmpSecret(ctx, req.(*GetCosTmpSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Laboratory_GetCosUploadTmpSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCosUploadTmpSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaboratoryServer).GetCosUploadTmpSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/laboratory.Laboratory/GetCosUploadTmpSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaboratoryServer).GetCosUploadTmpSecret(ctx, req.(*GetCosUploadTmpSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Laboratory_GetCosDownloadTmpSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCosDownloadTmpSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaboratoryServer).GetCosDownloadTmpSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/laboratory.Laboratory/GetCosDownloadTmpSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaboratoryServer).GetCosDownloadTmpSecret(ctx, req.(*GetCosDownloadTmpSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Laboratory_GetCosDeleteTmpSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCosDeleteTmpSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaboratoryServer).GetCosDeleteTmpSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/laboratory.Laboratory/GetCosDeleteTmpSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaboratoryServer).GetCosDeleteTmpSecret(ctx, req.(*GetCosDeleteTmpSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Laboratory_CreateExperimentEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExperimentEnvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaboratoryServer).CreateExperimentEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/laboratory.Laboratory/CreateExperimentEnv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaboratoryServer).CreateExperimentEnv(ctx, req.(*CreateExperimentEnvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Laboratory_QueryExperimentEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExperimentEnvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaboratoryServer).QueryExperimentEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/laboratory.Laboratory/QueryExperimentEnv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaboratoryServer).QueryExperimentEnv(ctx, req.(*QueryExperimentEnvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Laboratory_QueryExperimentEnvList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExperimentEnvListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaboratoryServer).QueryExperimentEnvList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/laboratory.Laboratory/QueryExperimentEnvList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaboratoryServer).QueryExperimentEnvList(ctx, req.(*QueryExperimentEnvListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Laboratory_DeleteExperimentEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExperimentEnvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaboratoryServer).DeleteExperimentEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/laboratory.Laboratory/DeleteExperimentEnv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaboratoryServer).DeleteExperimentEnv(ctx, req.(*DeleteExperimentEnvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Laboratory_SubmitExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaboratoryServer).SubmitExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/laboratory.Laboratory/SubmitExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaboratoryServer).SubmitExperiment(ctx, req.(*SubmitExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Laboratory_TerminateExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaboratoryServer).TerminateExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/laboratory.Laboratory/TerminateExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaboratoryServer).TerminateExperiment(ctx, req.(*TerminateExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Laboratory_QueryExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaboratoryServer).QueryExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/laboratory.Laboratory/QueryExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaboratoryServer).QueryExperiment(ctx, req.(*QueryExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Laboratory_DeleteExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaboratoryServer).DeleteExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/laboratory.Laboratory/DeleteExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaboratoryServer).DeleteExperiment(ctx, req.(*DeleteExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Laboratory_GetCvmList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCvmListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaboratoryServer).GetCvmList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/laboratory.Laboratory/GetCvmList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaboratoryServer).GetCvmList(ctx, req.(*GetCvmListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Laboratory_AvailableZoneList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvailableZoneListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaboratoryServer).AvailableZoneList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/laboratory.Laboratory/AvailableZoneList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaboratoryServer).AvailableZoneList(ctx, req.(*AvailableZoneListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Laboratory_CvmImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CvmImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaboratoryServer).CvmImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/laboratory.Laboratory/CvmImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaboratoryServer).CvmImage(ctx, req.(*CvmImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Laboratory_CreateWebConsole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWebConsoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaboratoryServer).CreateWebConsole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/laboratory.Laboratory/CreateWebConsole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaboratoryServer).CreateWebConsole(ctx, req.(*CreateWebConsoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Laboratory_serviceDesc = grpc.ServiceDesc{
	ServiceName: "laboratory.Laboratory",
	HandlerType: (*LaboratoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getCosTmpSecret",
			Handler:    _Laboratory_GetCosTmpSecret_Handler,
		},
		{
			MethodName: "getCosUploadTmpSecret",
			Handler:    _Laboratory_GetCosUploadTmpSecret_Handler,
		},
		{
			MethodName: "getCosDownloadTmpSecret",
			Handler:    _Laboratory_GetCosDownloadTmpSecret_Handler,
		},
		{
			MethodName: "getCosDeleteTmpSecret",
			Handler:    _Laboratory_GetCosDeleteTmpSecret_Handler,
		},
		{
			MethodName: "createExperimentEnv",
			Handler:    _Laboratory_CreateExperimentEnv_Handler,
		},
		{
			MethodName: "queryExperimentEnv",
			Handler:    _Laboratory_QueryExperimentEnv_Handler,
		},
		{
			MethodName: "queryExperimentEnvList",
			Handler:    _Laboratory_QueryExperimentEnvList_Handler,
		},
		{
			MethodName: "deleteExperimentEnv",
			Handler:    _Laboratory_DeleteExperimentEnv_Handler,
		},
		{
			MethodName: "submitExperiment",
			Handler:    _Laboratory_SubmitExperiment_Handler,
		},
		{
			MethodName: "terminateExperiment",
			Handler:    _Laboratory_TerminateExperiment_Handler,
		},
		{
			MethodName: "queryExperiment",
			Handler:    _Laboratory_QueryExperiment_Handler,
		},
		{
			MethodName: "deleteExperiment",
			Handler:    _Laboratory_DeleteExperiment_Handler,
		},
		{
			MethodName: "getCvmList",
			Handler:    _Laboratory_GetCvmList_Handler,
		},
		{
			MethodName: "availableZoneList",
			Handler:    _Laboratory_AvailableZoneList_Handler,
		},
		{
			MethodName: "cvmImage",
			Handler:    _Laboratory_CvmImage_Handler,
		},
		{
			MethodName: "createWebConsole",
			Handler:    _Laboratory_CreateWebConsole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "laboratory.proto",
}
