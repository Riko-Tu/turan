// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-devel
// 	protoc        v3.15.8
// source: admin.proto

package admin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetChartDataRequest_ExType int32

const (
	GetChartDataRequest_userEx GetChartDataRequest_ExType = 0 // 用戶项目
	GetChartDataRequest_demoEx GetChartDataRequest_ExType = 1 // 演示项目
)

// Enum value maps for GetChartDataRequest_ExType.
var (
	GetChartDataRequest_ExType_name = map[int32]string{
		0: "userEx",
		1: "demoEx",
	}
	GetChartDataRequest_ExType_value = map[string]int32{
		"userEx": 0,
		"demoEx": 1,
	}
)

func (x GetChartDataRequest_ExType) Enum() *GetChartDataRequest_ExType {
	p := new(GetChartDataRequest_ExType)
	*p = x
	return p
}

func (x GetChartDataRequest_ExType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetChartDataRequest_ExType) Descriptor() protoreflect.EnumDescriptor {
	return file_admin_proto_enumTypes[0].Descriptor()
}

func (GetChartDataRequest_ExType) Type() protoreflect.EnumType {
	return &file_admin_proto_enumTypes[0]
}

func (x GetChartDataRequest_ExType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetChartDataRequest_ExType.Descriptor instead.
func (GetChartDataRequest_ExType) EnumDescriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{16, 0}
}

type GetChartDataRequest_DataType int32

const (
	GetChartDataRequest_poscar GetChartDataRequest_DataType = 0 // 获取poscar数据
	GetChartDataRequest_energy GetChartDataRequest_DataType = 1 // 获取energy数据
	GetChartDataRequest_eigen  GetChartDataRequest_DataType = 2 // 获取eigen数据
	GetChartDataRequest_dos    GetChartDataRequest_DataType = 3 // 获取dos数据
)

// Enum value maps for GetChartDataRequest_DataType.
var (
	GetChartDataRequest_DataType_name = map[int32]string{
		0: "poscar",
		1: "energy",
		2: "eigen",
		3: "dos",
	}
	GetChartDataRequest_DataType_value = map[string]int32{
		"poscar": 0,
		"energy": 1,
		"eigen":  2,
		"dos":    3,
	}
)

func (x GetChartDataRequest_DataType) Enum() *GetChartDataRequest_DataType {
	p := new(GetChartDataRequest_DataType)
	*p = x
	return p
}

func (x GetChartDataRequest_DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetChartDataRequest_DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_admin_proto_enumTypes[1].Descriptor()
}

func (GetChartDataRequest_DataType) Type() protoreflect.EnumType {
	return &file_admin_proto_enumTypes[1]
}

func (x GetChartDataRequest_DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetChartDataRequest_DataType.Descriptor instead.
func (GetChartDataRequest_DataType) EnumDescriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{16, 1}
}

// 只有获取energy数据时需要用到key
type GetChartDataRequest_Key int32

const (
	GetChartDataRequest_e_wo_entrp  GetChartDataRequest_Key = 0
	GetChartDataRequest_e_fr_energy GetChartDataRequest_Key = 1
	GetChartDataRequest_e_0_energy  GetChartDataRequest_Key = 2
)

// Enum value maps for GetChartDataRequest_Key.
var (
	GetChartDataRequest_Key_name = map[int32]string{
		0: "e_wo_entrp",
		1: "e_fr_energy",
		2: "e_0_energy",
	}
	GetChartDataRequest_Key_value = map[string]int32{
		"e_wo_entrp":  0,
		"e_fr_energy": 1,
		"e_0_energy":  2,
	}
)

func (x GetChartDataRequest_Key) Enum() *GetChartDataRequest_Key {
	p := new(GetChartDataRequest_Key)
	*p = x
	return p
}

func (x GetChartDataRequest_Key) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetChartDataRequest_Key) Descriptor() protoreflect.EnumDescriptor {
	return file_admin_proto_enumTypes[2].Descriptor()
}

func (GetChartDataRequest_Key) Type() protoreflect.EnumType {
	return &file_admin_proto_enumTypes[2]
}

func (x GetChartDataRequest_Key) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetChartDataRequest_Key.Descriptor instead.
func (GetChartDataRequest_Key) EnumDescriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{16, 2}
}

type GetSubExperimentListRequest_SearchScope int32

const (
	GetSubExperimentListRequest_all GetSubExperimentListRequest_SearchScope = 0 // 搜索全部实验
	GetSubExperimentListRequest_sub GetSubExperimentListRequest_SearchScope = 1 // 搜索子实验
)

// Enum value maps for GetSubExperimentListRequest_SearchScope.
var (
	GetSubExperimentListRequest_SearchScope_name = map[int32]string{
		0: "all",
		1: "sub",
	}
	GetSubExperimentListRequest_SearchScope_value = map[string]int32{
		"all": 0,
		"sub": 1,
	}
)

func (x GetSubExperimentListRequest_SearchScope) Enum() *GetSubExperimentListRequest_SearchScope {
	p := new(GetSubExperimentListRequest_SearchScope)
	*p = x
	return p
}

func (x GetSubExperimentListRequest_SearchScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetSubExperimentListRequest_SearchScope) Descriptor() protoreflect.EnumDescriptor {
	return file_admin_proto_enumTypes[3].Descriptor()
}

func (GetSubExperimentListRequest_SearchScope) Type() protoreflect.EnumType {
	return &file_admin_proto_enumTypes[3]
}

func (x GetSubExperimentListRequest_SearchScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetSubExperimentListRequest_SearchScope.Descriptor instead.
func (GetSubExperimentListRequest_SearchScope) EnumDescriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{24, 0}
}

type GetSubExperimentListRequest_SortField int32

const (
	GetSubExperimentListRequest_create_at GetSubExperimentListRequest_SortField = 0 // 创建时间排序
	GetSubExperimentListRequest_update_at GetSubExperimentListRequest_SortField = 1 // 更新时间排序
)

// Enum value maps for GetSubExperimentListRequest_SortField.
var (
	GetSubExperimentListRequest_SortField_name = map[int32]string{
		0: "create_at",
		1: "update_at",
	}
	GetSubExperimentListRequest_SortField_value = map[string]int32{
		"create_at": 0,
		"update_at": 1,
	}
)

func (x GetSubExperimentListRequest_SortField) Enum() *GetSubExperimentListRequest_SortField {
	p := new(GetSubExperimentListRequest_SortField)
	*p = x
	return p
}

func (x GetSubExperimentListRequest_SortField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetSubExperimentListRequest_SortField) Descriptor() protoreflect.EnumDescriptor {
	return file_admin_proto_enumTypes[4].Descriptor()
}

func (GetSubExperimentListRequest_SortField) Type() protoreflect.EnumType {
	return &file_admin_proto_enumTypes[4]
}

func (x GetSubExperimentListRequest_SortField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetSubExperimentListRequest_SortField.Descriptor instead.
func (GetSubExperimentListRequest_SortField) EnumDescriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{24, 1}
}

type GetSubExperimentListRequest_Order int32

const (
	GetSubExperimentListRequest_asc  GetSubExperimentListRequest_Order = 0 // 正序
	GetSubExperimentListRequest_desc GetSubExperimentListRequest_Order = 1 // 倒序
)

// Enum value maps for GetSubExperimentListRequest_Order.
var (
	GetSubExperimentListRequest_Order_name = map[int32]string{
		0: "asc",
		1: "desc",
	}
	GetSubExperimentListRequest_Order_value = map[string]int32{
		"asc":  0,
		"desc": 1,
	}
)

func (x GetSubExperimentListRequest_Order) Enum() *GetSubExperimentListRequest_Order {
	p := new(GetSubExperimentListRequest_Order)
	*p = x
	return p
}

func (x GetSubExperimentListRequest_Order) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetSubExperimentListRequest_Order) Descriptor() protoreflect.EnumDescriptor {
	return file_admin_proto_enumTypes[5].Descriptor()
}

func (GetSubExperimentListRequest_Order) Type() protoreflect.EnumType {
	return &file_admin_proto_enumTypes[5]
}

func (x GetSubExperimentListRequest_Order) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetSubExperimentListRequest_Order.Descriptor instead.
func (GetSubExperimentListRequest_Order) EnumDescriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{24, 2}
}

type SubmitExperimentRequest_ExperimentType int32

const (
	SubmitExperimentRequest_vasp_std     SubmitExperimentRequest_ExperimentType = 0
	SubmitExperimentRequest_vasp_gam     SubmitExperimentRequest_ExperimentType = 1
	SubmitExperimentRequest_vasp_ncl     SubmitExperimentRequest_ExperimentType = 2
	SubmitExperimentRequest_vasp_2d_std  SubmitExperimentRequest_ExperimentType = 3
	SubmitExperimentRequest_vasp_2d_gam  SubmitExperimentRequest_ExperimentType = 4
	SubmitExperimentRequest_vasp_2d_ncl  SubmitExperimentRequest_ExperimentType = 5
	SubmitExperimentRequest_gpu_vasp_std SubmitExperimentRequest_ExperimentType = 6
	SubmitExperimentRequest_gpu_vasp_gam SubmitExperimentRequest_ExperimentType = 7
	SubmitExperimentRequest_gpu_vasp_ncl SubmitExperimentRequest_ExperimentType = 8
)

// Enum value maps for SubmitExperimentRequest_ExperimentType.
var (
	SubmitExperimentRequest_ExperimentType_name = map[int32]string{
		0: "vasp_std",
		1: "vasp_gam",
		2: "vasp_ncl",
		3: "vasp_2d_std",
		4: "vasp_2d_gam",
		5: "vasp_2d_ncl",
		6: "gpu_vasp_std",
		7: "gpu_vasp_gam",
		8: "gpu_vasp_ncl",
	}
	SubmitExperimentRequest_ExperimentType_value = map[string]int32{
		"vasp_std":     0,
		"vasp_gam":     1,
		"vasp_ncl":     2,
		"vasp_2d_std":  3,
		"vasp_2d_gam":  4,
		"vasp_2d_ncl":  5,
		"gpu_vasp_std": 6,
		"gpu_vasp_gam": 7,
		"gpu_vasp_ncl": 8,
	}
)

func (x SubmitExperimentRequest_ExperimentType) Enum() *SubmitExperimentRequest_ExperimentType {
	p := new(SubmitExperimentRequest_ExperimentType)
	*p = x
	return p
}

func (x SubmitExperimentRequest_ExperimentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubmitExperimentRequest_ExperimentType) Descriptor() protoreflect.EnumDescriptor {
	return file_admin_proto_enumTypes[6].Descriptor()
}

func (SubmitExperimentRequest_ExperimentType) Type() protoreflect.EnumType {
	return &file_admin_proto_enumTypes[6]
}

func (x SubmitExperimentRequest_ExperimentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubmitExperimentRequest_ExperimentType.Descriptor instead.
func (SubmitExperimentRequest_ExperimentType) EnumDescriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{44, 0}
}

type CreateExperimentRequest_ExperimentType int32

const (
	CreateExperimentRequest_vasp CreateExperimentRequest_ExperimentType = 0 // vasp, 默认值
)

// Enum value maps for CreateExperimentRequest_ExperimentType.
var (
	CreateExperimentRequest_ExperimentType_name = map[int32]string{
		0: "vasp",
	}
	CreateExperimentRequest_ExperimentType_value = map[string]int32{
		"vasp": 0,
	}
)

func (x CreateExperimentRequest_ExperimentType) Enum() *CreateExperimentRequest_ExperimentType {
	p := new(CreateExperimentRequest_ExperimentType)
	*p = x
	return p
}

func (x CreateExperimentRequest_ExperimentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateExperimentRequest_ExperimentType) Descriptor() protoreflect.EnumDescriptor {
	return file_admin_proto_enumTypes[7].Descriptor()
}

func (CreateExperimentRequest_ExperimentType) Type() protoreflect.EnumType {
	return &file_admin_proto_enumTypes[7]
}

func (x CreateExperimentRequest_ExperimentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateExperimentRequest_ExperimentType.Descriptor instead.
func (CreateExperimentRequest_ExperimentType) EnumDescriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{46, 0}
}

type LaboratoryCosCredentialRequest_OpType int32

const (
	LaboratoryCosCredentialRequest_upload   LaboratoryCosCredentialRequest_OpType = 0 // 上传(默认值)
	LaboratoryCosCredentialRequest_download LaboratoryCosCredentialRequest_OpType = 1 // 下载
	LaboratoryCosCredentialRequest_delete   LaboratoryCosCredentialRequest_OpType = 2 //删除
)

// Enum value maps for LaboratoryCosCredentialRequest_OpType.
var (
	LaboratoryCosCredentialRequest_OpType_name = map[int32]string{
		0: "upload",
		1: "download",
		2: "delete",
	}
	LaboratoryCosCredentialRequest_OpType_value = map[string]int32{
		"upload":   0,
		"download": 1,
		"delete":   2,
	}
)

func (x LaboratoryCosCredentialRequest_OpType) Enum() *LaboratoryCosCredentialRequest_OpType {
	p := new(LaboratoryCosCredentialRequest_OpType)
	*p = x
	return p
}

func (x LaboratoryCosCredentialRequest_OpType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LaboratoryCosCredentialRequest_OpType) Descriptor() protoreflect.EnumDescriptor {
	return file_admin_proto_enumTypes[8].Descriptor()
}

func (LaboratoryCosCredentialRequest_OpType) Type() protoreflect.EnumType {
	return &file_admin_proto_enumTypes[8]
}

func (x LaboratoryCosCredentialRequest_OpType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LaboratoryCosCredentialRequest_OpType.Descriptor instead.
func (LaboratoryCosCredentialRequest_OpType) EnumDescriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{48, 0}
}

type ReviewProjectApplyRequest_ReviewRet int32

const (
	ReviewProjectApplyRequest_reject    ReviewProjectApplyRequest_ReviewRet = 0 // 拒绝
	ReviewProjectApplyRequest_accept    ReviewProjectApplyRequest_ReviewRet = 1 // 接受
	ReviewProjectApplyRequest_set_admin ReviewProjectApplyRequest_ReviewRet = 2 // 接受并设置为管理员
)

// Enum value maps for ReviewProjectApplyRequest_ReviewRet.
var (
	ReviewProjectApplyRequest_ReviewRet_name = map[int32]string{
		0: "reject",
		1: "accept",
		2: "set_admin",
	}
	ReviewProjectApplyRequest_ReviewRet_value = map[string]int32{
		"reject":    0,
		"accept":    1,
		"set_admin": 2,
	}
)

func (x ReviewProjectApplyRequest_ReviewRet) Enum() *ReviewProjectApplyRequest_ReviewRet {
	p := new(ReviewProjectApplyRequest_ReviewRet)
	*p = x
	return p
}

func (x ReviewProjectApplyRequest_ReviewRet) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReviewProjectApplyRequest_ReviewRet) Descriptor() protoreflect.EnumDescriptor {
	return file_admin_proto_enumTypes[9].Descriptor()
}

func (ReviewProjectApplyRequest_ReviewRet) Type() protoreflect.EnumType {
	return &file_admin_proto_enumTypes[9]
}

func (x ReviewProjectApplyRequest_ReviewRet) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReviewProjectApplyRequest_ReviewRet.Descriptor instead.
func (ReviewProjectApplyRequest_ReviewRet) EnumDescriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{58, 0}
}

type ChangeUserProjectRequest_Options int32

const (
	ChangeUserProjectRequest_disable            ChangeUserProjectRequest_Options = 0 // 禁用用户
	ChangeUserProjectRequest_role_change_admin  ChangeUserProjectRequest_Options = 1 // 角色变更为管理员
	ChangeUserProjectRequest_role_change_common ChangeUserProjectRequest_Options = 2 // 角色变更为普通用户
)

// Enum value maps for ChangeUserProjectRequest_Options.
var (
	ChangeUserProjectRequest_Options_name = map[int32]string{
		0: "disable",
		1: "role_change_admin",
		2: "role_change_common",
	}
	ChangeUserProjectRequest_Options_value = map[string]int32{
		"disable":            0,
		"role_change_admin":  1,
		"role_change_common": 2,
	}
)

func (x ChangeUserProjectRequest_Options) Enum() *ChangeUserProjectRequest_Options {
	p := new(ChangeUserProjectRequest_Options)
	*p = x
	return p
}

func (x ChangeUserProjectRequest_Options) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChangeUserProjectRequest_Options) Descriptor() protoreflect.EnumDescriptor {
	return file_admin_proto_enumTypes[10].Descriptor()
}

func (ChangeUserProjectRequest_Options) Type() protoreflect.EnumType {
	return &file_admin_proto_enumTypes[10]
}

func (x ChangeUserProjectRequest_Options) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChangeUserProjectRequest_Options.Descriptor instead.
func (ChangeUserProjectRequest_Options) EnumDescriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{62, 0}
}

type GetProjectUserListRequest_SortField int32

const (
	GetProjectUserListRequest_name          GetProjectUserListRequest_SortField = 0 // 账户名称,默认值
	GetProjectUserListRequest_role          GetProjectUserListRequest_SortField = 1 // 项目角色权限
	GetProjectUserListRequest_last_login_at GetProjectUserListRequest_SortField = 2 // 上次登录时间
	GetProjectUserListRequest_create_at     GetProjectUserListRequest_SortField = 3 // 加入项目时间
)

// Enum value maps for GetProjectUserListRequest_SortField.
var (
	GetProjectUserListRequest_SortField_name = map[int32]string{
		0: "name",
		1: "role",
		2: "last_login_at",
		3: "create_at",
	}
	GetProjectUserListRequest_SortField_value = map[string]int32{
		"name":          0,
		"role":          1,
		"last_login_at": 2,
		"create_at":     3,
	}
)

func (x GetProjectUserListRequest_SortField) Enum() *GetProjectUserListRequest_SortField {
	p := new(GetProjectUserListRequest_SortField)
	*p = x
	return p
}

func (x GetProjectUserListRequest_SortField) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetProjectUserListRequest_SortField) Descriptor() protoreflect.EnumDescriptor {
	return file_admin_proto_enumTypes[11].Descriptor()
}

func (GetProjectUserListRequest_SortField) Type() protoreflect.EnumType {
	return &file_admin_proto_enumTypes[11]
}

func (x GetProjectUserListRequest_SortField) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetProjectUserListRequest_SortField.Descriptor instead.
func (GetProjectUserListRequest_SortField) EnumDescriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{64, 0}
}

type GetProjectUserListRequest_Sort int32

const (
	GetProjectUserListRequest_ASC  GetProjectUserListRequest_Sort = 0 // 升序，默认值
	GetProjectUserListRequest_DESC GetProjectUserListRequest_Sort = 1 // 降序
)

// Enum value maps for GetProjectUserListRequest_Sort.
var (
	GetProjectUserListRequest_Sort_name = map[int32]string{
		0: "ASC",
		1: "DESC",
	}
	GetProjectUserListRequest_Sort_value = map[string]int32{
		"ASC":  0,
		"DESC": 1,
	}
)

func (x GetProjectUserListRequest_Sort) Enum() *GetProjectUserListRequest_Sort {
	p := new(GetProjectUserListRequest_Sort)
	*p = x
	return p
}

func (x GetProjectUserListRequest_Sort) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetProjectUserListRequest_Sort) Descriptor() protoreflect.EnumDescriptor {
	return file_admin_proto_enumTypes[12].Descriptor()
}

func (GetProjectUserListRequest_Sort) Type() protoreflect.EnumType {
	return &file_admin_proto_enumTypes[12]
}

func (x GetProjectUserListRequest_Sort) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetProjectUserListRequest_Sort.Descriptor instead.
func (GetProjectUserListRequest_Sort) EnumDescriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{64, 1}
}

// 用户信息
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// QQ/微信服务返回给我们的唯一标识
	Account string `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	// 登录方法：“qq” or "wx"
	Way         string `protobuf:"bytes,3,opt,name=way,proto3" json:"way,omitempty"`
	Name        string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Email       string `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	Phone       string `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`
	IsNotify    int64  `protobuf:"varint,7,opt,name=is_notify,json=isNotify,proto3" json:"is_notify,omitempty"` // 1=通知 2=不通知
	CreateAt    int64  `protobuf:"varint,8,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	UpdateAt    int64  `protobuf:"varint,9,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
	LastLoginAt int64  `protobuf:"varint,10,opt,name=last_login_at,json=lastLoginAt,proto3" json:"last_login_at,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{0}
}

func (x *User) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *User) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *User) GetWay() string {
	if x != nil {
		return x.Way
	}
	return ""
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *User) GetIsNotify() int64 {
	if x != nil {
		return x.IsNotify
	}
	return 0
}

func (x *User) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *User) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

func (x *User) GetLastLoginAt() int64 {
	if x != nil {
		return x.LastLoginAt
	}
	return 0
}

type CosCredential struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// COS服务返回的临时ID
	TmpSecretID string `protobuf:"bytes,1,opt,name=tmpSecretID,proto3" json:"tmpSecretID,omitempty"`
	// COS服务返回的临时Key
	TmpSecretKey string `protobuf:"bytes,2,opt,name=tmpSecretKey,proto3" json:"tmpSecretKey,omitempty"`
	// COS服务返回的Token
	SessionToken string `protobuf:"bytes,3,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	// 存储桶名,不含子目录，不含http：//或者cos：// url
	Bucket string `protobuf:"bytes,4,opt,name=bucket,proto3" json:"bucket,omitempty"`
	Region string `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	// ExpiredTime
	ExpiredTime int64 `protobuf:"varint,6,opt,name=expired_time,json=expiredTime,proto3" json:"expired_time,omitempty"`
	// Expiration
	Expiration string `protobuf:"bytes,7,opt,name=expiration,proto3" json:"expiration,omitempty"`
	// StartTime
	StartTime int64 `protobuf:"varint,8,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
}

func (x *CosCredential) Reset() {
	*x = CosCredential{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CosCredential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CosCredential) ProtoMessage() {}

func (x *CosCredential) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CosCredential.ProtoReflect.Descriptor instead.
func (*CosCredential) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{1}
}

func (x *CosCredential) GetTmpSecretID() string {
	if x != nil {
		return x.TmpSecretID
	}
	return ""
}

func (x *CosCredential) GetTmpSecretKey() string {
	if x != nil {
		return x.TmpSecretKey
	}
	return ""
}

func (x *CosCredential) GetSessionToken() string {
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *CosCredential) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *CosCredential) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CosCredential) GetExpiredTime() int64 {
	if x != nil {
		return x.ExpiredTime
	}
	return 0
}

func (x *CosCredential) GetExpiration() string {
	if x != nil {
		return x.Expiration
	}
	return ""
}

func (x *CosCredential) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

// 后台系统配置。仅管理员查询修改。例如：邮件模板配置，邮件标题配置。管理员账户配置等。。
type Setting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Title    string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`                        // 配置key, 例：email_alias
	Value    string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`                        // 配置value, 例：腾讯量子实验室
	Describe string `protobuf:"bytes,4,opt,name=describe,proto3" json:"describe,omitempty"`                  // 描述说明信息，例：发送邮件时使用别名
	CreateAt int64  `protobuf:"varint,5,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"` // 创建时间
	UpdateAt int64  `protobuf:"varint,6,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"` // 更新时间
}

func (x *Setting) Reset() {
	*x = Setting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Setting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Setting) ProtoMessage() {}

func (x *Setting) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Setting.ProtoReflect.Descriptor instead.
func (*Setting) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{2}
}

func (x *Setting) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Setting) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Setting) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Setting) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *Setting) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *Setting) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

// vasp license
type License struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 对应User表里的ID
	UserId int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 所属机构
	Organization string `protobuf:"bytes,3,opt,name=organization,proto3" json:"organization,omitempty"`
	// 研究领域
	Domain string `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
	// license 绑定邮箱
	BindEmail string `protobuf:"bytes,5,opt,name=bind_email,json=bindEmail,proto3" json:"bind_email,omitempty"`
	// 存储桶名加子目录，不含http:// 或 cos://
	CosPath  string `protobuf:"bytes,6,opt,name=cos_path,json=cosPath,proto3" json:"cos_path,omitempty"`
	Status   int64  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"` // 状态 1=待审核  | 2=失败 | 3=成功
	CreateAt int64  `protobuf:"varint,8,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	UpdateAt int64  `protobuf:"varint,9,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
}

func (x *License) Reset() {
	*x = License{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *License) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*License) ProtoMessage() {}

func (x *License) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use License.ProtoReflect.Descriptor instead.
func (*License) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{3}
}

func (x *License) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *License) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *License) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *License) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *License) GetBindEmail() string {
	if x != nil {
		return x.BindEmail
	}
	return ""
}

func (x *License) GetCosPath() string {
	if x != nil {
		return x.CosPath
	}
	return ""
}

func (x *License) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *License) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *License) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

// 腾讯云环境
type CloudEnv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId        int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	VaspLicenseId int64  `protobuf:"varint,3,opt,name=vasp_license_id,json=vaspLicenseId,proto3" json:"vasp_license_id,omitempty"`
	CloudSecretId string `protobuf:"bytes,4,opt,name=cloud_secret_id,json=cloudSecretId,proto3" json:"cloud_secret_id,omitempty"`
	CloudAppId    string `protobuf:"bytes,5,opt,name=cloud_app_id,json=cloudAppId,proto3" json:"cloud_app_id,omitempty"`
	Region        string `protobuf:"bytes,6,opt,name=region,proto3" json:"region,omitempty"`
	Zone          string `protobuf:"bytes,7,opt,name=zone,proto3" json:"zone,omitempty"`
	// 腾讯云主ID
	CloudAccountId string `protobuf:"bytes,8,opt,name=cloud_account_id,json=cloudAccountId,proto3" json:"cloud_account_id,omitempty"`
	// 腾讯云项目ID（注：通过项目可以请求腾讯云主ID）
	CloudProjectId  string `protobuf:"bytes,9,opt,name=cloud_project_id,json=cloudProjectId,proto3" json:"cloud_project_id,omitempty"`
	VpcId           string `protobuf:"bytes,10,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	SubnetId        string `protobuf:"bytes,11,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	SecurityGroupId string `protobuf:"bytes,12,opt,name=security_group_id,json=securityGroupId,proto3" json:"security_group_id,omitempty"`
	// 存储桶名
	CosBucket  string `protobuf:"bytes,13,opt,name=cos_bucket,json=cosBucket,proto3" json:"cos_bucket,omitempty"`
	ClusterId  string `protobuf:"bytes,14,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	InstanceId string `protobuf:"bytes,15,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	InstanceIp string `protobuf:"bytes,16,opt,name=instance_ip,json=instanceIp,proto3" json:"instance_ip,omitempty"`
	Status     int64  `protobuf:"varint,17,opt,name=status,proto3" json:"status,omitempty"`
	// 创建服务
	ErrMsg   string `protobuf:"bytes,18,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
	CreateAt int64  `protobuf:"varint,19,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	UpdateAt int64  `protobuf:"varint,20,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
}

func (x *CloudEnv) Reset() {
	*x = CloudEnv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloudEnv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloudEnv) ProtoMessage() {}

func (x *CloudEnv) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloudEnv.ProtoReflect.Descriptor instead.
func (*CloudEnv) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{4}
}

func (x *CloudEnv) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CloudEnv) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CloudEnv) GetVaspLicenseId() int64 {
	if x != nil {
		return x.VaspLicenseId
	}
	return 0
}

func (x *CloudEnv) GetCloudSecretId() string {
	if x != nil {
		return x.CloudSecretId
	}
	return ""
}

func (x *CloudEnv) GetCloudAppId() string {
	if x != nil {
		return x.CloudAppId
	}
	return ""
}

func (x *CloudEnv) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *CloudEnv) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *CloudEnv) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *CloudEnv) GetCloudProjectId() string {
	if x != nil {
		return x.CloudProjectId
	}
	return ""
}

func (x *CloudEnv) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *CloudEnv) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *CloudEnv) GetSecurityGroupId() string {
	if x != nil {
		return x.SecurityGroupId
	}
	return ""
}

func (x *CloudEnv) GetCosBucket() string {
	if x != nil {
		return x.CosBucket
	}
	return ""
}

func (x *CloudEnv) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *CloudEnv) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *CloudEnv) GetInstanceIp() string {
	if x != nil {
		return x.InstanceIp
	}
	return ""
}

func (x *CloudEnv) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CloudEnv) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *CloudEnv) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *CloudEnv) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

// 消息通知
type Notify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId     int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	NotifyType int64  `protobuf:"varint,3,opt,name=notify_type,json=notifyType,proto3" json:"notify_type,omitempty"` // 通知类型 1=系统 | 2=请求 | 3=任务
	Status     int64  `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`                           // 状态 1=未读 | 2=已读
	Content    string `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`                          // 通知内容
	CreateAt   int64  `protobuf:"varint,6,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	UpdateAt   int64  `protobuf:"varint,7,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
}

func (x *Notify) Reset() {
	*x = Notify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notify) ProtoMessage() {}

func (x *Notify) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notify.ProtoReflect.Descriptor instead.
func (*Notify) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{5}
}

func (x *Notify) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Notify) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Notify) GetNotifyType() int64 {
	if x != nil {
		return x.NotifyType
	}
	return 0
}

func (x *Notify) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Notify) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Notify) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *Notify) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

// 项目
type Project struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 创建用户id
	UserId int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 腾讯云环境id
	CloudEnvId int64 `protobuf:"varint,3,opt,name=cloud_env_id,json=cloudEnvId,proto3" json:"cloud_env_id,omitempty"`
	// vasp license id
	VaspLicenseId int64 `protobuf:"varint,4,opt,name=vasp_license_id,json=vaspLicenseId,proto3" json:"vasp_license_id,omitempty"`
	// 项目名
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// 项目邀请码
	InvitationCode string `protobuf:"bytes,6,opt,name=invitation_code,json=invitationCode,proto3" json:"invitation_code,omitempty"`
	// 项目状态
	Status int64 `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`
	// 项目描述
	Describe string `protobuf:"bytes,8,opt,name=describe,proto3" json:"describe,omitempty"`
	// 项目url链接
	Link string `protobuf:"bytes,9,opt,name=link,proto3" json:"link,omitempty"`
	// 创建时间戳
	CreateAt int64 `protobuf:"varint,10,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	// 更新时间戳
	UpdateAt int64 `protobuf:"varint,11,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`
}

func (x *Project) Reset() {
	*x = Project{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{6}
}

func (x *Project) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Project) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Project) GetCloudEnvId() int64 {
	if x != nil {
		return x.CloudEnvId
	}
	return 0
}

func (x *Project) GetVaspLicenseId() int64 {
	if x != nil {
		return x.VaspLicenseId
	}
	return 0
}

func (x *Project) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Project) GetInvitationCode() string {
	if x != nil {
		return x.InvitationCode
	}
	return ""
}

func (x *Project) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Project) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *Project) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *Project) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *Project) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

// tefs用户部署程序cos路径
type TefsDeployCosPath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// windows
	Windows string `protobuf:"bytes,1,opt,name=windows,proto3" json:"windows,omitempty"`
	// mac
	Mac string `protobuf:"bytes,2,opt,name=mac,proto3" json:"mac,omitempty"`
}

func (x *TefsDeployCosPath) Reset() {
	*x = TefsDeployCosPath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TefsDeployCosPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TefsDeployCosPath) ProtoMessage() {}

func (x *TefsDeployCosPath) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TefsDeployCosPath.ProtoReflect.Descriptor instead.
func (*TefsDeployCosPath) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{7}
}

func (x *TefsDeployCosPath) GetWindows() string {
	if x != nil {
		return x.Windows
	}
	return ""
}

func (x *TefsDeployCosPath) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

// 用户组织项目
type UserProject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProjectId           int64  `protobuf:"varint,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ProjectName         string `protobuf:"bytes,3,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	Role                int64  `protobuf:"varint,4,opt,name=role,proto3" json:"role,omitempty"`                              // 用户在项目中的角色 1=创建人 2=管理员 3=普通用户
	CreateAt            int64  `protobuf:"varint,5,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`      // 用户加入项目时间
	UpdateAt            int64  `protobuf:"varint,6,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`      // 更新时间
	TencentCloudAccount string `protobuf:"bytes,7,opt,name=tencentCloudAccount,proto3" json:"tencentCloudAccount,omitempty"` // 腾讯云账户
}

func (x *UserProject) Reset() {
	*x = UserProject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserProject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserProject) ProtoMessage() {}

func (x *UserProject) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserProject.ProtoReflect.Descriptor instead.
func (*UserProject) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{8}
}

func (x *UserProject) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserProject) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *UserProject) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *UserProject) GetRole() int64 {
	if x != nil {
		return x.Role
	}
	return 0
}

func (x *UserProject) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *UserProject) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

func (x *UserProject) GetTencentCloudAccount() string {
	if x != nil {
		return x.TencentCloudAccount
	}
	return ""
}

// 用户组织
type UserOrganization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VaspLicenseId       int64          `protobuf:"varint,1,opt,name=vasp_license_id,json=vaspLicenseId,proto3" json:"vasp_license_id,omitempty"`
	Organization        string         `protobuf:"bytes,2,opt,name=organization,proto3" json:"organization,omitempty"`
	Domain              string         `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	OrganizationProject []*UserProject `protobuf:"bytes,4,rep,name=organization_project,json=organizationProject,proto3" json:"organization_project,omitempty"`
}

func (x *UserOrganization) Reset() {
	*x = UserOrganization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserOrganization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserOrganization) ProtoMessage() {}

func (x *UserOrganization) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserOrganization.ProtoReflect.Descriptor instead.
func (*UserOrganization) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{9}
}

func (x *UserOrganization) GetVaspLicenseId() int64 {
	if x != nil {
		return x.VaspLicenseId
	}
	return 0
}

func (x *UserOrganization) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *UserOrganization) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *UserOrganization) GetOrganizationProject() []*UserProject {
	if x != nil {
		return x.OrganizationProject
	}
	return nil
}

// 项目下用户记录
type ProjectUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId         int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName       string `protobuf:"bytes,3,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	ProjectRole    int64  `protobuf:"varint,4,opt,name=project_role,json=projectRole,proto3" json:"project_role,omitempty"`
	LastLoginTime  int64  `protobuf:"varint,5,opt,name=last_login_time,json=lastLoginTime,proto3" json:"last_login_time,omitempty"`
	AddProjectTime int64  `protobuf:"varint,6,opt,name=add_project_time,json=addProjectTime,proto3" json:"add_project_time,omitempty"`
}

func (x *ProjectUser) Reset() {
	*x = ProjectUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectUser) ProtoMessage() {}

func (x *ProjectUser) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectUser.ProtoReflect.Descriptor instead.
func (*ProjectUser) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{10}
}

func (x *ProjectUser) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProjectUser) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ProjectUser) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ProjectUser) GetProjectRole() int64 {
	if x != nil {
		return x.ProjectRole
	}
	return 0
}

func (x *ProjectUser) GetLastLoginTime() int64 {
	if x != nil {
		return x.LastLoginTime
	}
	return 0
}

func (x *ProjectUser) GetAddProjectTime() int64 {
	if x != nil {
		return x.AddProjectTime
	}
	return 0
}

// 项目申请记录
type ProjectApply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserName    string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	UserPhone   string `protobuf:"bytes,3,opt,name=user_phone,json=userPhone,proto3" json:"user_phone,omitempty"`
	ProjectName string `protobuf:"bytes,4,opt,name=project_name,json=projectName,proto3" json:"project_name,omitempty"`
	Details     string `protobuf:"bytes,5,opt,name=details,proto3" json:"details,omitempty"`
	CreateAt    int64  `protobuf:"varint,6,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
}

func (x *ProjectApply) Reset() {
	*x = ProjectApply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectApply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectApply) ProtoMessage() {}

func (x *ProjectApply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectApply.ProtoReflect.Descriptor instead.
func (*ProjectApply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{11}
}

func (x *ProjectApply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProjectApply) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ProjectApply) GetUserPhone() string {
	if x != nil {
		return x.UserPhone
	}
	return ""
}

func (x *ProjectApply) GetProjectName() string {
	if x != nil {
		return x.ProjectName
	}
	return ""
}

func (x *ProjectApply) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *ProjectApply) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

// 实验标签记录
type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Colour string `protobuf:"bytes,3,opt,name=colour,proto3" json:"colour,omitempty"`
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{12}
}

func (x *Tag) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Tag) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tag) GetColour() string {
	if x != nil {
		return x.Colour
	}
	return ""
}

type Experiment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ExperimentType string `protobuf:"bytes,3,opt,name=experiment_type,json=experimentType,proto3" json:"experiment_type,omitempty"` // 实验类型 vasp
	CosBasePath    string `protobuf:"bytes,4,opt,name=cos_base_path,json=cosBasePath,proto3" json:"cos_base_path,omitempty"`        // 实验的cos基本路径
	Memo           string `protobuf:"bytes,5,opt,name=memo,proto3" json:"memo,omitempty"`
	Status         int64  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`                                         // 状态 1=未实验（草稿） | 2=创建环境 | 3=计算中 | 4=被终止 | 5=失败 | 6=成功
	IsTemplate     int64  `protobuf:"varint,7,opt,name=is_template,json=isTemplate,proto3" json:"is_template,omitempty"`               // 1=不是模板 2=模板
	LastEditAt     int64  `protobuf:"varint,8,opt,name=last_edit_at,json=lastEditAt,proto3" json:"last_edit_at,omitempty"`             // 最后编辑时间
	ComputeNodeNum int64  `protobuf:"varint,9,opt,name=compute_node_num,json=computeNodeNum,proto3" json:"compute_node_num,omitempty"` // 计算节点数量
	OszicarJson    string `protobuf:"bytes,10,opt,name=oszicar_json,json=oszicarJson,proto3" json:"oszicar_json,omitempty"`            // oszicarJSON 迭代 能量 算法
	Image          string `protobuf:"bytes,11,opt,name=image,proto3" json:"image,omitempty"`                                           // 图片
	ErrMsg         string `protobuf:"bytes,12,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`                           // 错误信息
	StartAt        int64  `protobuf:"varint,13,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`                       // 计算开始时间
	DoneAt         int64  `protobuf:"varint,14,opt,name=done_at,json=doneAt,proto3" json:"done_at,omitempty"`                          // 计算完成时间
	CreateAt       int64  `protobuf:"varint,15,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`                    // 记录创建时间
	UpdateAt       int64  `protobuf:"varint,16,opt,name=update_at,json=updateAt,proto3" json:"update_at,omitempty"`                    // 记录更新时间
	IonicStep      string `protobuf:"bytes,17,opt,name=ionicStep,proto3" json:"ionicStep,omitempty"`                                   // 离子步
	ElectronStep   string `protobuf:"bytes,18,opt,name=electronStep,proto3" json:"electronStep,omitempty"`                             // 电子步
	Energy         string `protobuf:"bytes,19,opt,name=energy,proto3" json:"energy,omitempty"`                                         // 能量
	Pid            int64  `protobuf:"varint,20,opt,name=pid,proto3" json:"pid,omitempty"`                                              // 实验的父级实验id
}

func (x *Experiment) Reset() {
	*x = Experiment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Experiment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Experiment) ProtoMessage() {}

func (x *Experiment) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Experiment.ProtoReflect.Descriptor instead.
func (*Experiment) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{13}
}

func (x *Experiment) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Experiment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Experiment) GetExperimentType() string {
	if x != nil {
		return x.ExperimentType
	}
	return ""
}

func (x *Experiment) GetCosBasePath() string {
	if x != nil {
		return x.CosBasePath
	}
	return ""
}

func (x *Experiment) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *Experiment) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Experiment) GetIsTemplate() int64 {
	if x != nil {
		return x.IsTemplate
	}
	return 0
}

func (x *Experiment) GetLastEditAt() int64 {
	if x != nil {
		return x.LastEditAt
	}
	return 0
}

func (x *Experiment) GetComputeNodeNum() int64 {
	if x != nil {
		return x.ComputeNodeNum
	}
	return 0
}

func (x *Experiment) GetOszicarJson() string {
	if x != nil {
		return x.OszicarJson
	}
	return ""
}

func (x *Experiment) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Experiment) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *Experiment) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *Experiment) GetDoneAt() int64 {
	if x != nil {
		return x.DoneAt
	}
	return 0
}

func (x *Experiment) GetCreateAt() int64 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *Experiment) GetUpdateAt() int64 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

func (x *Experiment) GetIonicStep() string {
	if x != nil {
		return x.IonicStep
	}
	return ""
}

func (x *Experiment) GetElectronStep() string {
	if x != nil {
		return x.ElectronStep
	}
	return ""
}

func (x *Experiment) GetEnergy() string {
	if x != nil {
		return x.Energy
	}
	return ""
}

func (x *Experiment) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

// echart服务
type GetImportChartDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CosPath string `protobuf:"bytes,1,opt,name=cosPath,proto3" json:"cosPath,omitempty"` // 数据所在cos桶地址
}

func (x *GetImportChartDataRequest) Reset() {
	*x = GetImportChartDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetImportChartDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetImportChartDataRequest) ProtoMessage() {}

func (x *GetImportChartDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetImportChartDataRequest.ProtoReflect.Descriptor instead.
func (*GetImportChartDataRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{14}
}

func (x *GetImportChartDataRequest) GetCosPath() string {
	if x != nil {
		return x.CosPath
	}
	return ""
}

type GetImportChartDataReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoscarData string `protobuf:"bytes,1,opt,name=poscarData,proto3" json:"poscarData,omitempty"` // poscar数据
	EnergyData string `protobuf:"bytes,2,opt,name=energyData,proto3" json:"energyData,omitempty"` // energy数据
	EigenData  string `protobuf:"bytes,3,opt,name=eigenData,proto3" json:"eigenData,omitempty"`   // eigen数据
	DosData    string `protobuf:"bytes,4,opt,name=dosData,proto3" json:"dosData,omitempty"`       // dos数据
}

func (x *GetImportChartDataReply) Reset() {
	*x = GetImportChartDataReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetImportChartDataReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetImportChartDataReply) ProtoMessage() {}

func (x *GetImportChartDataReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetImportChartDataReply.ProtoReflect.Descriptor instead.
func (*GetImportChartDataReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{15}
}

func (x *GetImportChartDataReply) GetPoscarData() string {
	if x != nil {
		return x.PoscarData
	}
	return ""
}

func (x *GetImportChartDataReply) GetEnergyData() string {
	if x != nil {
		return x.EnergyData
	}
	return ""
}

func (x *GetImportChartDataReply) GetEigenData() string {
	if x != nil {
		return x.EigenData
	}
	return ""
}

func (x *GetImportChartDataReply) GetDosData() string {
	if x != nil {
		return x.DosData
	}
	return ""
}

type GetChartDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExperimentId int64                        `protobuf:"varint,1,opt,name=experimentId,proto3" json:"experimentId,omitempty"`
	ExType       GetChartDataRequest_ExType   `protobuf:"varint,2,opt,name=exType,proto3,enum=admin.GetChartDataRequest_ExType" json:"exType,omitempty"`
	DataType     GetChartDataRequest_DataType `protobuf:"varint,3,opt,name=dataType,proto3,enum=admin.GetChartDataRequest_DataType" json:"dataType,omitempty"`
	Key          GetChartDataRequest_Key      `protobuf:"varint,4,opt,name=key,proto3,enum=admin.GetChartDataRequest_Key" json:"key,omitempty"`
}

func (x *GetChartDataRequest) Reset() {
	*x = GetChartDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChartDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChartDataRequest) ProtoMessage() {}

func (x *GetChartDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChartDataRequest.ProtoReflect.Descriptor instead.
func (*GetChartDataRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{16}
}

func (x *GetChartDataRequest) GetExperimentId() int64 {
	if x != nil {
		return x.ExperimentId
	}
	return 0
}

func (x *GetChartDataRequest) GetExType() GetChartDataRequest_ExType {
	if x != nil {
		return x.ExType
	}
	return GetChartDataRequest_userEx
}

func (x *GetChartDataRequest) GetDataType() GetChartDataRequest_DataType {
	if x != nil {
		return x.DataType
	}
	return GetChartDataRequest_poscar
}

func (x *GetChartDataRequest) GetKey() GetChartDataRequest_Key {
	if x != nil {
		return x.Key
	}
	return GetChartDataRequest_e_wo_entrp
}

type GetChartDataReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetChartDataReply) Reset() {
	*x = GetChartDataReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChartDataReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChartDataReply) ProtoMessage() {}

func (x *GetChartDataReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChartDataReply.ProtoReflect.Descriptor instead.
func (*GetChartDataReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{17}
}

func (x *GetChartDataReply) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// 创建console shell服务请求和回应
type CreateShellServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *CreateShellServerRequest) Reset() {
	*x = CreateShellServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateShellServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShellServerRequest) ProtoMessage() {}

func (x *CreateShellServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShellServerRequest.ProtoReflect.Descriptor instead.
func (*CreateShellServerRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{18}
}

func (x *CreateShellServerRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

type CreateShellServerReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateShellServerReply) Reset() {
	*x = CreateShellServerReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateShellServerReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateShellServerReply) ProtoMessage() {}

func (x *CreateShellServerReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateShellServerReply.ProtoReflect.Descriptor instead.
func (*CreateShellServerReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{19}
}

func (x *CreateShellServerReply) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// 获取实验面包线请求和回应
type GetExperimentBreadLineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExperimentId int64 `protobuf:"varint,1,opt,name=experimentId,proto3" json:"experimentId,omitempty"`
}

func (x *GetExperimentBreadLineRequest) Reset() {
	*x = GetExperimentBreadLineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentBreadLineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentBreadLineRequest) ProtoMessage() {}

func (x *GetExperimentBreadLineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentBreadLineRequest.ProtoReflect.Descriptor instead.
func (*GetExperimentBreadLineRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{20}
}

func (x *GetExperimentBreadLineRequest) GetExperimentId() int64 {
	if x != nil {
		return x.ExperimentId
	}
	return 0
}

type GetExperimentBreadLineReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetExperimentBreadLineReply) Reset() {
	*x = GetExperimentBreadLineReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentBreadLineReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentBreadLineReply) ProtoMessage() {}

func (x *GetExperimentBreadLineReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentBreadLineReply.ProtoReflect.Descriptor instead.
func (*GetExperimentBreadLineReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{21}
}

func (x *GetExperimentBreadLineReply) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

// 获取实验级别关系请求和回应
type GetExperimentLevelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *GetExperimentLevelRequest) Reset() {
	*x = GetExperimentLevelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentLevelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentLevelRequest) ProtoMessage() {}

func (x *GetExperimentLevelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentLevelRequest.ProtoReflect.Descriptor instead.
func (*GetExperimentLevelRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{22}
}

func (x *GetExperimentLevelRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

type GetExperimentLevelReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExperimentLevelJson string `protobuf:"bytes,1,opt,name=experimentLevelJson,proto3" json:"experimentLevelJson,omitempty"`
}

func (x *GetExperimentLevelReply) Reset() {
	*x = GetExperimentLevelReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentLevelReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentLevelReply) ProtoMessage() {}

func (x *GetExperimentLevelReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentLevelReply.ProtoReflect.Descriptor instead.
func (*GetExperimentLevelReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{23}
}

func (x *GetExperimentLevelReply) GetExperimentLevelJson() string {
	if x != nil {
		return x.ExperimentLevelJson
	}
	return ""
}

// 获取子实验列表请求
type GetSubExperimentListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExperimentPid int64                                   `protobuf:"varint,1,opt,name=experiment_pid,json=experimentPid,proto3" json:"experiment_pid,omitempty"`
	ProjectId     int64                                   `protobuf:"varint,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Offset        int64                                   `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit         int64                                   `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	Likes         []string                                `protobuf:"bytes,5,rep,name=likes,proto3" json:"likes,omitempty"` // 关键字
	SearchScope   GetSubExperimentListRequest_SearchScope `protobuf:"varint,6,opt,name=search_scope,json=searchScope,proto3,enum=admin.GetSubExperimentListRequest_SearchScope" json:"search_scope,omitempty"`
	SortField     GetSubExperimentListRequest_SortField   `protobuf:"varint,7,opt,name=sort_field,json=sortField,proto3,enum=admin.GetSubExperimentListRequest_SortField" json:"sort_field,omitempty"`
	Order         GetSubExperimentListRequest_Order       `protobuf:"varint,8,opt,name=order,proto3,enum=admin.GetSubExperimentListRequest_Order" json:"order,omitempty"`
}

func (x *GetSubExperimentListRequest) Reset() {
	*x = GetSubExperimentListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubExperimentListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubExperimentListRequest) ProtoMessage() {}

func (x *GetSubExperimentListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubExperimentListRequest.ProtoReflect.Descriptor instead.
func (*GetSubExperimentListRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{24}
}

func (x *GetSubExperimentListRequest) GetExperimentPid() int64 {
	if x != nil {
		return x.ExperimentPid
	}
	return 0
}

func (x *GetSubExperimentListRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetSubExperimentListRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetSubExperimentListRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetSubExperimentListRequest) GetLikes() []string {
	if x != nil {
		return x.Likes
	}
	return nil
}

func (x *GetSubExperimentListRequest) GetSearchScope() GetSubExperimentListRequest_SearchScope {
	if x != nil {
		return x.SearchScope
	}
	return GetSubExperimentListRequest_all
}

func (x *GetSubExperimentListRequest) GetSortField() GetSubExperimentListRequest_SortField {
	if x != nil {
		return x.SortField
	}
	return GetSubExperimentListRequest_create_at
}

func (x *GetSubExperimentListRequest) GetOrder() GetSubExperimentListRequest_Order {
	if x != nil {
		return x.Order
	}
	return GetSubExperimentListRequest_asc
}

type GetSubExperimentListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubExperimentsJson string `protobuf:"bytes,1,opt,name=subExperimentsJson,proto3" json:"subExperimentsJson,omitempty"`
}

func (x *GetSubExperimentListReply) Reset() {
	*x = GetSubExperimentListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubExperimentListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubExperimentListReply) ProtoMessage() {}

func (x *GetSubExperimentListReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubExperimentListReply.ProtoReflect.Descriptor instead.
func (*GetSubExperimentListReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{25}
}

func (x *GetSubExperimentListReply) GetSubExperimentsJson() string {
	if x != nil {
		return x.SubExperimentsJson
	}
	return ""
}

// 获取用户最后操作的项目请求和回应
type GetLastProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLastProjectRequest) Reset() {
	*x = GetLastProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLastProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLastProjectRequest) ProtoMessage() {}

func (x *GetLastProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLastProjectRequest.ProtoReflect.Descriptor instead.
func (*GetLastProjectRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{26}
}

type GetLastProjectReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectJson string `protobuf:"bytes,1,opt,name=project_json,json=projectJson,proto3" json:"project_json,omitempty"` // 项目信息json
}

func (x *GetLastProjectReply) Reset() {
	*x = GetLastProjectReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLastProjectReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLastProjectReply) ProtoMessage() {}

func (x *GetLastProjectReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLastProjectReply.ProtoReflect.Descriptor instead.
func (*GetLastProjectReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{27}
}

func (x *GetLastProjectReply) GetProjectJson() string {
	if x != nil {
		return x.ProjectJson
	}
	return ""
}

// 创建系统通知消息记录
type CreateSystemNotifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title   string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`     // 通知标题
	Content string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"` // 通知内容
}

func (x *CreateSystemNotifyRequest) Reset() {
	*x = CreateSystemNotifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSystemNotifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSystemNotifyRequest) ProtoMessage() {}

func (x *CreateSystemNotifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSystemNotifyRequest.ProtoReflect.Descriptor instead.
func (*CreateSystemNotifyRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{28}
}

func (x *CreateSystemNotifyRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateSystemNotifyRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type CreateSystemNotifyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateSystemNotifyReply) Reset() {
	*x = CreateSystemNotifyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSystemNotifyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSystemNotifyReply) ProtoMessage() {}

func (x *CreateSystemNotifyReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSystemNotifyReply.ProtoReflect.Descriptor instead.
func (*CreateSystemNotifyReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{29}
}

func (x *CreateSystemNotifyReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 删除系统通知记录
type DeleteSystemNotifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotifyId int64 `protobuf:"varint,1,opt,name=notify_id,json=notifyId,proto3" json:"notify_id,omitempty"`
}

func (x *DeleteSystemNotifyRequest) Reset() {
	*x = DeleteSystemNotifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSystemNotifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSystemNotifyRequest) ProtoMessage() {}

func (x *DeleteSystemNotifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSystemNotifyRequest.ProtoReflect.Descriptor instead.
func (*DeleteSystemNotifyRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{30}
}

func (x *DeleteSystemNotifyRequest) GetNotifyId() int64 {
	if x != nil {
		return x.NotifyId
	}
	return 0
}

type DeleteSystemNotifyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteSystemNotifyReply) Reset() {
	*x = DeleteSystemNotifyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSystemNotifyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSystemNotifyReply) ProtoMessage() {}

func (x *DeleteSystemNotifyReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSystemNotifyReply.ProtoReflect.Descriptor instead.
func (*DeleteSystemNotifyReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{31}
}

func (x *DeleteSystemNotifyReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 改变通知状态
type ChangeNotifyStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotifyId  int64 `protobuf:"varint,1,opt,name=notify_id,json=notifyId,proto3" json:"notify_id,omitempty"`
	ProjectId int64 `protobuf:"varint,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *ChangeNotifyStatusRequest) Reset() {
	*x = ChangeNotifyStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeNotifyStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeNotifyStatusRequest) ProtoMessage() {}

func (x *ChangeNotifyStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeNotifyStatusRequest.ProtoReflect.Descriptor instead.
func (*ChangeNotifyStatusRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{32}
}

func (x *ChangeNotifyStatusRequest) GetNotifyId() int64 {
	if x != nil {
		return x.NotifyId
	}
	return 0
}

func (x *ChangeNotifyStatusRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

type ChangeNotifyStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ChangeNotifyStatusReply) Reset() {
	*x = ChangeNotifyStatusReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeNotifyStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeNotifyStatusReply) ProtoMessage() {}

func (x *ChangeNotifyStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeNotifyStatusReply.ProtoReflect.Descriptor instead.
func (*ChangeNotifyStatusReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{33}
}

func (x *ChangeNotifyStatusReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 删除实验
type DeleteExperimentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExperimentId int64 `protobuf:"varint,1,opt,name=experimentId,proto3" json:"experimentId,omitempty"`
}

func (x *DeleteExperimentRequest) Reset() {
	*x = DeleteExperimentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExperimentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExperimentRequest) ProtoMessage() {}

func (x *DeleteExperimentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExperimentRequest.ProtoReflect.Descriptor instead.
func (*DeleteExperimentRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{34}
}

func (x *DeleteExperimentRequest) GetExperimentId() int64 {
	if x != nil {
		return x.ExperimentId
	}
	return 0
}

type DeleteExperimentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeleteExperimentReply) Reset() {
	*x = DeleteExperimentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteExperimentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteExperimentReply) ProtoMessage() {}

func (x *DeleteExperimentReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteExperimentReply.ProtoReflect.Descriptor instead.
func (*DeleteExperimentReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{35}
}

func (x *DeleteExperimentReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 更新实验
type UpdateExperimentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExperimentId       int64  `protobuf:"varint,1,opt,name=experimentId,proto3" json:"experimentId,omitempty"`
	Name               string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Memo               string `protobuf:"bytes,3,opt,name=memo,proto3" json:"memo,omitempty"`
	UpdateLastEditTime bool   `protobuf:"varint,4,opt,name=update_last_edit_time,json=updateLastEditTime,proto3" json:"update_last_edit_time,omitempty"`
	ClearMemo          bool   `protobuf:"varint,5,opt,name=clearMemo,proto3" json:"clearMemo,omitempty"`
}

func (x *UpdateExperimentRequest) Reset() {
	*x = UpdateExperimentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateExperimentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExperimentRequest) ProtoMessage() {}

func (x *UpdateExperimentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExperimentRequest.ProtoReflect.Descriptor instead.
func (*UpdateExperimentRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{36}
}

func (x *UpdateExperimentRequest) GetExperimentId() int64 {
	if x != nil {
		return x.ExperimentId
	}
	return 0
}

func (x *UpdateExperimentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateExperimentRequest) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *UpdateExperimentRequest) GetUpdateLastEditTime() bool {
	if x != nil {
		return x.UpdateLastEditTime
	}
	return false
}

func (x *UpdateExperimentRequest) GetClearMemo() bool {
	if x != nil {
		return x.ClearMemo
	}
	return false
}

type UpdateExperimentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateExperimentReply) Reset() {
	*x = UpdateExperimentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateExperimentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExperimentReply) ProtoMessage() {}

func (x *UpdateExperimentReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExperimentReply.ProtoReflect.Descriptor instead.
func (*UpdateExperimentReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{37}
}

func (x *UpdateExperimentReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 获取实验
type GetExperimentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExperimentId int64 `protobuf:"varint,1,opt,name=experimentId,proto3" json:"experimentId,omitempty"` // 实验id
}

func (x *GetExperimentRequest) Reset() {
	*x = GetExperimentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentRequest) ProtoMessage() {}

func (x *GetExperimentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentRequest.ProtoReflect.Descriptor instead.
func (*GetExperimentRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{38}
}

func (x *GetExperimentRequest) GetExperimentId() int64 {
	if x != nil {
		return x.ExperimentId
	}
	return 0
}

type GetExperimentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Experiment *Experiment `protobuf:"bytes,1,opt,name=experiment,proto3" json:"experiment,omitempty"`
}

func (x *GetExperimentReply) Reset() {
	*x = GetExperimentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentReply) ProtoMessage() {}

func (x *GetExperimentReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentReply.ProtoReflect.Descriptor instead.
func (*GetExperimentReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{39}
}

func (x *GetExperimentReply) GetExperiment() *Experiment {
	if x != nil {
		return x.Experiment
	}
	return nil
}

// 获取实验列表
type GetExperimentListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64    `protobuf:"varint,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	Offset    int64    `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit     int64    `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Status    int64    `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"` // 0=所有 1=实验中(创建中，计算中) 2=已完成(失败，完成，被终止) 3=草稿 4=模板
	Likes     []string `protobuf:"bytes,5,rep,name=likes,proto3" json:"likes,omitempty"`    // 关键字
}

func (x *GetExperimentListRequest) Reset() {
	*x = GetExperimentListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentListRequest) ProtoMessage() {}

func (x *GetExperimentListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentListRequest.ProtoReflect.Descriptor instead.
func (*GetExperimentListRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{40}
}

func (x *GetExperimentListRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetExperimentListRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetExperimentListRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetExperimentListRequest) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *GetExperimentListRequest) GetLikes() []string {
	if x != nil {
		return x.Likes
	}
	return nil
}

type GetExperimentListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count              int64         `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`                           // 所有
	ExperimentingCount int64         `protobuf:"varint,2,opt,name=experimentingCount,proto3" json:"experimentingCount,omitempty"` // 实验中
	DoneCount          int64         `protobuf:"varint,3,opt,name=doneCount,proto3" json:"doneCount,omitempty"`                   // 完成
	DraftCount         int64         `protobuf:"varint,4,opt,name=draftCount,proto3" json:"draftCount,omitempty"`                 // 草稿
	TemplateCount      int64         `protobuf:"varint,5,opt,name=templateCount,proto3" json:"templateCount,omitempty"`           // 模板
	ExperimentList     []*Experiment `protobuf:"bytes,6,rep,name=experimentList,proto3" json:"experimentList,omitempty"`          // 数据列表
}

func (x *GetExperimentListReply) Reset() {
	*x = GetExperimentListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetExperimentListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExperimentListReply) ProtoMessage() {}

func (x *GetExperimentListReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExperimentListReply.ProtoReflect.Descriptor instead.
func (*GetExperimentListReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{41}
}

func (x *GetExperimentListReply) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *GetExperimentListReply) GetExperimentingCount() int64 {
	if x != nil {
		return x.ExperimentingCount
	}
	return 0
}

func (x *GetExperimentListReply) GetDoneCount() int64 {
	if x != nil {
		return x.DoneCount
	}
	return 0
}

func (x *GetExperimentListReply) GetDraftCount() int64 {
	if x != nil {
		return x.DraftCount
	}
	return 0
}

func (x *GetExperimentListReply) GetTemplateCount() int64 {
	if x != nil {
		return x.TemplateCount
	}
	return 0
}

func (x *GetExperimentListReply) GetExperimentList() []*Experiment {
	if x != nil {
		return x.ExperimentList
	}
	return nil
}

// 终止实验
type TerminateExperimentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExperimentId int64 `protobuf:"varint,1,opt,name=experimentId,proto3" json:"experimentId,omitempty"`
}

func (x *TerminateExperimentRequest) Reset() {
	*x = TerminateExperimentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminateExperimentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateExperimentRequest) ProtoMessage() {}

func (x *TerminateExperimentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateExperimentRequest.ProtoReflect.Descriptor instead.
func (*TerminateExperimentRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{42}
}

func (x *TerminateExperimentRequest) GetExperimentId() int64 {
	if x != nil {
		return x.ExperimentId
	}
	return 0
}

type TerminateExperimentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TerminateExperimentReply) Reset() {
	*x = TerminateExperimentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminateExperimentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateExperimentReply) ProtoMessage() {}

func (x *TerminateExperimentReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateExperimentReply.ProtoReflect.Descriptor instead.
func (*TerminateExperimentReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{43}
}

func (x *TerminateExperimentReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 提交实验
type SubmitExperimentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExperimentId int64 `protobuf:"varint,1,opt,name=experimentId,proto3" json:"experimentId,omitempty"`
	// 计算节点数量
	ComputeNodeNum int64                                  `protobuf:"varint,2,opt,name=computeNodeNum,proto3" json:"computeNodeNum,omitempty"`
	ExperimentType SubmitExperimentRequest_ExperimentType `protobuf:"varint,3,opt,name=experimentType,proto3,enum=admin.SubmitExperimentRequest_ExperimentType" json:"experimentType,omitempty"`
}

func (x *SubmitExperimentRequest) Reset() {
	*x = SubmitExperimentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitExperimentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitExperimentRequest) ProtoMessage() {}

func (x *SubmitExperimentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitExperimentRequest.ProtoReflect.Descriptor instead.
func (*SubmitExperimentRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{44}
}

func (x *SubmitExperimentRequest) GetExperimentId() int64 {
	if x != nil {
		return x.ExperimentId
	}
	return 0
}

func (x *SubmitExperimentRequest) GetComputeNodeNum() int64 {
	if x != nil {
		return x.ComputeNodeNum
	}
	return 0
}

func (x *SubmitExperimentRequest) GetExperimentType() SubmitExperimentRequest_ExperimentType {
	if x != nil {
		return x.ExperimentType
	}
	return SubmitExperimentRequest_vasp_std
}

type SubmitExperimentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SubmitExperimentReply) Reset() {
	*x = SubmitExperimentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitExperimentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitExperimentReply) ProtoMessage() {}

func (x *SubmitExperimentReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitExperimentReply.ProtoReflect.Descriptor instead.
func (*SubmitExperimentReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{45}
}

func (x *SubmitExperimentReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 创建实验
type CreateExperimentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId      int64                                  `protobuf:"varint,1,opt,name=projectId,proto3" json:"projectId,omitempty"`
	Name           string                                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Memo           string                                 `protobuf:"bytes,3,opt,name=memo,proto3" json:"memo,omitempty"`
	ExperimentType CreateExperimentRequest_ExperimentType `protobuf:"varint,4,opt,name=experimentType,proto3,enum=admin.CreateExperimentRequest_ExperimentType" json:"experimentType,omitempty"`
	Pid            int64                                  `protobuf:"varint,5,opt,name=pid,proto3" json:"pid,omitempty"`
}

func (x *CreateExperimentRequest) Reset() {
	*x = CreateExperimentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateExperimentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExperimentRequest) ProtoMessage() {}

func (x *CreateExperimentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExperimentRequest.ProtoReflect.Descriptor instead.
func (*CreateExperimentRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{46}
}

func (x *CreateExperimentRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *CreateExperimentRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateExperimentRequest) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *CreateExperimentRequest) GetExperimentType() CreateExperimentRequest_ExperimentType {
	if x != nil {
		return x.ExperimentType
	}
	return CreateExperimentRequest_vasp
}

func (x *CreateExperimentRequest) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

type CreateExperimentReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExperimentId  int64          `protobuf:"varint,1,opt,name=experimentId,proto3" json:"experimentId,omitempty"`
	CosBaseUrl    string         `protobuf:"bytes,2,opt,name=cosBaseUrl,proto3" json:"cosBaseUrl,omitempty"`
	CosCredential *CosCredential `protobuf:"bytes,3,opt,name=cosCredential,proto3" json:"cosCredential,omitempty"`
}

func (x *CreateExperimentReply) Reset() {
	*x = CreateExperimentReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateExperimentReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateExperimentReply) ProtoMessage() {}

func (x *CreateExperimentReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateExperimentReply.ProtoReflect.Descriptor instead.
func (*CreateExperimentReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{47}
}

func (x *CreateExperimentReply) GetExperimentId() int64 {
	if x != nil {
		return x.ExperimentId
	}
	return 0
}

func (x *CreateExperimentReply) GetCosBaseUrl() string {
	if x != nil {
		return x.CosBaseUrl
	}
	return ""
}

func (x *CreateExperimentReply) GetCosCredential() *CosCredential {
	if x != nil {
		return x.CosCredential
	}
	return nil
}

// 实验室的cos临时凭证
type LaboratoryCosCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpType           LaboratoryCosCredentialRequest_OpType `protobuf:"varint,1,opt,name=opType,proto3,enum=admin.LaboratoryCosCredentialRequest_OpType" json:"opType,omitempty"`
	ExperimentId     int64                                 `protobuf:"varint,2,opt,name=experimentId,proto3" json:"experimentId,omitempty"`         // 上传，删除必须
	CopyExperimentId int64                                 `protobuf:"varint,3,opt,name=copyExperimentId,proto3" json:"copyExperimentId,omitempty"` // copy实验id
}

func (x *LaboratoryCosCredentialRequest) Reset() {
	*x = LaboratoryCosCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaboratoryCosCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaboratoryCosCredentialRequest) ProtoMessage() {}

func (x *LaboratoryCosCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaboratoryCosCredentialRequest.ProtoReflect.Descriptor instead.
func (*LaboratoryCosCredentialRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{48}
}

func (x *LaboratoryCosCredentialRequest) GetOpType() LaboratoryCosCredentialRequest_OpType {
	if x != nil {
		return x.OpType
	}
	return LaboratoryCosCredentialRequest_upload
}

func (x *LaboratoryCosCredentialRequest) GetExperimentId() int64 {
	if x != nil {
		return x.ExperimentId
	}
	return 0
}

func (x *LaboratoryCosCredentialRequest) GetCopyExperimentId() int64 {
	if x != nil {
		return x.CopyExperimentId
	}
	return 0
}

type LaboratoryCosCredentialReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CosCredential *CosCredential `protobuf:"bytes,1,opt,name=cosCredential,proto3" json:"cosCredential,omitempty"`
	CosBaseUrl    string         `protobuf:"bytes,2,opt,name=cos_base_url,json=cosBaseUrl,proto3" json:"cos_base_url,omitempty"`
}

func (x *LaboratoryCosCredentialReply) Reset() {
	*x = LaboratoryCosCredentialReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaboratoryCosCredentialReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaboratoryCosCredentialReply) ProtoMessage() {}

func (x *LaboratoryCosCredentialReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaboratoryCosCredentialReply.ProtoReflect.Descriptor instead.
func (*LaboratoryCosCredentialReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{49}
}

func (x *LaboratoryCosCredentialReply) GetCosCredential() *CosCredential {
	if x != nil {
		return x.CosCredential
	}
	return nil
}

func (x *LaboratoryCosCredentialReply) GetCosBaseUrl() string {
	if x != nil {
		return x.CosBaseUrl
	}
	return ""
}

// 获取实验标签
type GetTagListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetTagListRequest) Reset() {
	*x = GetTagListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTagListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTagListRequest) ProtoMessage() {}

func (x *GetTagListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTagListRequest.ProtoReflect.Descriptor instead.
func (*GetTagListRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{50}
}

func (x *GetTagListRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetTagListRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetTagListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags  []*Tag `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
	Total int64  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GetTagListReply) Reset() {
	*x = GetTagListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTagListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTagListReply) ProtoMessage() {}

func (x *GetTagListReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTagListReply.ProtoReflect.Descriptor instead.
func (*GetTagListReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{51}
}

func (x *GetTagListReply) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *GetTagListReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 创建实验标签
type CreateTagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Colour string `protobuf:"bytes,2,opt,name=colour,proto3" json:"colour,omitempty"`
}

func (x *CreateTagRequest) Reset() {
	*x = CreateTagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTagRequest) ProtoMessage() {}

func (x *CreateTagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTagRequest.ProtoReflect.Descriptor instead.
func (*CreateTagRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{52}
}

func (x *CreateTagRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTagRequest) GetColour() string {
	if x != nil {
		return x.Colour
	}
	return ""
}

type CreateTagReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateTagReply) Reset() {
	*x = CreateTagReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTagReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTagReply) ProtoMessage() {}

func (x *CreateTagReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTagReply.ProtoReflect.Descriptor instead.
func (*CreateTagReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{53}
}

func (x *CreateTagReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 项目申请列表
type GetProjectApplyListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetProjectApplyListRequest) Reset() {
	*x = GetProjectApplyListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectApplyListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectApplyListRequest) ProtoMessage() {}

func (x *GetProjectApplyListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectApplyListRequest.ProtoReflect.Descriptor instead.
func (*GetProjectApplyListRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{54}
}

func (x *GetProjectApplyListRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetProjectApplyListRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetProjectApplyListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectApplyList []*ProjectApply `protobuf:"bytes,1,rep,name=projectApplyList,proto3" json:"projectApplyList,omitempty"`
	Total            int64           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GetProjectApplyListReply) Reset() {
	*x = GetProjectApplyListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectApplyListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectApplyListReply) ProtoMessage() {}

func (x *GetProjectApplyListReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectApplyListReply.ProtoReflect.Descriptor instead.
func (*GetProjectApplyListReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{55}
}

func (x *GetProjectApplyListReply) GetProjectApplyList() []*ProjectApply {
	if x != nil {
		return x.ProjectApplyList
	}
	return nil
}

func (x *GetProjectApplyListReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 创建项目申请
type CreateProjectApplyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectInvitationCode string `protobuf:"bytes,1,opt,name=project_invitation_code,json=projectInvitationCode,proto3" json:"project_invitation_code,omitempty"` // 项目邀请码
	Details               string `protobuf:"bytes,2,opt,name=details,proto3" json:"details,omitempty"`                                                            // 申请详情信息
}

func (x *CreateProjectApplyRequest) Reset() {
	*x = CreateProjectApplyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProjectApplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProjectApplyRequest) ProtoMessage() {}

func (x *CreateProjectApplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProjectApplyRequest.ProtoReflect.Descriptor instead.
func (*CreateProjectApplyRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{56}
}

func (x *CreateProjectApplyRequest) GetProjectInvitationCode() string {
	if x != nil {
		return x.ProjectInvitationCode
	}
	return ""
}

func (x *CreateProjectApplyRequest) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

type CreateProjectApplyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateProjectApplyReply) Reset() {
	*x = CreateProjectApplyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProjectApplyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProjectApplyReply) ProtoMessage() {}

func (x *CreateProjectApplyReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProjectApplyReply.ProtoReflect.Descriptor instead.
func (*CreateProjectApplyReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{57}
}

func (x *CreateProjectApplyReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 审核项目申请
type ReviewProjectApplyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectApplyId int64                               `protobuf:"varint,1,opt,name=project_apply_id,json=projectApplyId,proto3" json:"project_apply_id,omitempty"`                               // 项目申请记录id
	ReviewRet      ReviewProjectApplyRequest_ReviewRet `protobuf:"varint,2,opt,name=review_ret,json=reviewRet,proto3,enum=admin.ReviewProjectApplyRequest_ReviewRet" json:"review_ret,omitempty"` // 审核结果
}

func (x *ReviewProjectApplyRequest) Reset() {
	*x = ReviewProjectApplyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReviewProjectApplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewProjectApplyRequest) ProtoMessage() {}

func (x *ReviewProjectApplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewProjectApplyRequest.ProtoReflect.Descriptor instead.
func (*ReviewProjectApplyRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{58}
}

func (x *ReviewProjectApplyRequest) GetProjectApplyId() int64 {
	if x != nil {
		return x.ProjectApplyId
	}
	return 0
}

func (x *ReviewProjectApplyRequest) GetReviewRet() ReviewProjectApplyRequest_ReviewRet {
	if x != nil {
		return x.ReviewRet
	}
	return ReviewProjectApplyRequest_reject
}

type ReviewProjectApplyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ReviewProjectApplyReply) Reset() {
	*x = ReviewProjectApplyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReviewProjectApplyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewProjectApplyReply) ProtoMessage() {}

func (x *ReviewProjectApplyReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewProjectApplyReply.ProtoReflect.Descriptor instead.
func (*ReviewProjectApplyReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{59}
}

func (x *ReviewProjectApplyReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 按用户获取用户项目
type GetUserProjectListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetUserProjectListRequest) Reset() {
	*x = GetUserProjectListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserProjectListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserProjectListRequest) ProtoMessage() {}

func (x *GetUserProjectListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserProjectListRequest.ProtoReflect.Descriptor instead.
func (*GetUserProjectListRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{60}
}

func (x *GetUserProjectListRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetUserProjectListRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetUserProjectListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *GetUserProjectListReply) Reset() {
	*x = GetUserProjectListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserProjectListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserProjectListReply) ProtoMessage() {}

func (x *GetUserProjectListReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserProjectListReply.ProtoReflect.Descriptor instead.
func (*GetUserProjectListReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{61}
}

func (x *GetUserProjectListReply) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

// 变更用户项目记录。
type ChangeUserProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserProjectId int64                            `protobuf:"varint,1,opt,name=user_project_id,json=userProjectId,proto3" json:"user_project_id,omitempty"`
	Options       ChangeUserProjectRequest_Options `protobuf:"varint,2,opt,name=options,proto3,enum=admin.ChangeUserProjectRequest_Options" json:"options,omitempty"` // 变更选项
}

func (x *ChangeUserProjectRequest) Reset() {
	*x = ChangeUserProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeUserProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeUserProjectRequest) ProtoMessage() {}

func (x *ChangeUserProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeUserProjectRequest.ProtoReflect.Descriptor instead.
func (*ChangeUserProjectRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{62}
}

func (x *ChangeUserProjectRequest) GetUserProjectId() int64 {
	if x != nil {
		return x.UserProjectId
	}
	return 0
}

func (x *ChangeUserProjectRequest) GetOptions() ChangeUserProjectRequest_Options {
	if x != nil {
		return x.Options
	}
	return ChangeUserProjectRequest_disable
}

type ChangeUserProjectReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ChangeUserProjectReply) Reset() {
	*x = ChangeUserProjectReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeUserProjectReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeUserProjectReply) ProtoMessage() {}

func (x *ChangeUserProjectReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeUserProjectReply.ProtoReflect.Descriptor instead.
func (*ChangeUserProjectReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{63}
}

func (x *ChangeUserProjectReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 获取项目下用户成员
type GetProjectUserListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId int64                               `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Offset    int64                               `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit     int64                               `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	SortField GetProjectUserListRequest_SortField `protobuf:"varint,4,opt,name=sortField,proto3,enum=admin.GetProjectUserListRequest_SortField" json:"sortField,omitempty"` // 排序规则
	Sort      GetProjectUserListRequest_Sort      `protobuf:"varint,5,opt,name=sort,proto3,enum=admin.GetProjectUserListRequest_Sort" json:"sort,omitempty"`                // 升序或者降序
}

func (x *GetProjectUserListRequest) Reset() {
	*x = GetProjectUserListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectUserListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectUserListRequest) ProtoMessage() {}

func (x *GetProjectUserListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectUserListRequest.ProtoReflect.Descriptor instead.
func (*GetProjectUserListRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{64}
}

func (x *GetProjectUserListRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *GetProjectUserListRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetProjectUserListRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetProjectUserListRequest) GetSortField() GetProjectUserListRequest_SortField {
	if x != nil {
		return x.SortField
	}
	return GetProjectUserListRequest_name
}

func (x *GetProjectUserListRequest) GetSort() GetProjectUserListRequest_Sort {
	if x != nil {
		return x.Sort
	}
	return GetProjectUserListRequest_ASC
}

type GetProjectUserListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectUser []*ProjectUser `protobuf:"bytes,1,rep,name=projectUser,proto3" json:"projectUser,omitempty"`
	Total       int64          `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GetProjectUserListReply) Reset() {
	*x = GetProjectUserListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectUserListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectUserListReply) ProtoMessage() {}

func (x *GetProjectUserListReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectUserListReply.ProtoReflect.Descriptor instead.
func (*GetProjectUserListReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{65}
}

func (x *GetProjectUserListReply) GetProjectUser() []*ProjectUser {
	if x != nil {
		return x.ProjectUser
	}
	return nil
}

func (x *GetProjectUserListReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 根据用户所在项目，反推获取用户组织
type GetOrganizationListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetOrganizationListRequest) Reset() {
	*x = GetOrganizationListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationListRequest) ProtoMessage() {}

func (x *GetOrganizationListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationListRequest.ProtoReflect.Descriptor instead.
func (*GetOrganizationListRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{66}
}

type GetOrganizationListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserOrganization []*UserOrganization `protobuf:"bytes,1,rep,name=userOrganization,proto3" json:"userOrganization,omitempty"`
	User             *User               `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *GetOrganizationListReply) Reset() {
	*x = GetOrganizationListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrganizationListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrganizationListReply) ProtoMessage() {}

func (x *GetOrganizationListReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrganizationListReply.ProtoReflect.Descriptor instead.
func (*GetOrganizationListReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{67}
}

func (x *GetOrganizationListReply) GetUserOrganization() []*UserOrganization {
	if x != nil {
		return x.UserOrganization
	}
	return nil
}

func (x *GetOrganizationListReply) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

// 部署用户计算任务的web服务
type DeployUserWebRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudEnvId int64 `protobuf:"varint,1,opt,name=cloud_env_id,json=cloudEnvId,proto3" json:"cloud_env_id,omitempty"`
	ProjectId  int64 `protobuf:"varint,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *DeployUserWebRequest) Reset() {
	*x = DeployUserWebRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployUserWebRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployUserWebRequest) ProtoMessage() {}

func (x *DeployUserWebRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployUserWebRequest.ProtoReflect.Descriptor instead.
func (*DeployUserWebRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{68}
}

func (x *DeployUserWebRequest) GetCloudEnvId() int64 {
	if x != nil {
		return x.CloudEnvId
	}
	return 0
}

func (x *DeployUserWebRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

type DeployUserWebReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DeployUserWebReply) Reset() {
	*x = DeployUserWebReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployUserWebReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployUserWebReply) ProtoMessage() {}

func (x *DeployUserWebReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployUserWebReply.ProtoReflect.Descriptor instead.
func (*DeployUserWebReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{69}
}

func (x *DeployUserWebReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 获取项目
type GetProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetProjectRequest) Reset() {
	*x = GetProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectRequest) ProtoMessage() {}

func (x *GetProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectRequest.ProtoReflect.Descriptor instead.
func (*GetProjectRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{70}
}

func (x *GetProjectRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetProjectReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project *Project `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
}

func (x *GetProjectReply) Reset() {
	*x = GetProjectReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectReply) ProtoMessage() {}

func (x *GetProjectReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectReply.ProtoReflect.Descriptor instead.
func (*GetProjectReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{71}
}

func (x *GetProjectReply) GetProject() *Project {
	if x != nil {
		return x.Project
	}
	return nil
}

// 获取项目列表
type GetProjectListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// 项目状态 1=创建中 | 2=创建失败  | 3=创建完成 | 不传查询所有
	Status int64 `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *GetProjectListRequest) Reset() {
	*x = GetProjectListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectListRequest) ProtoMessage() {}

func (x *GetProjectListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectListRequest.ProtoReflect.Descriptor instead.
func (*GetProjectListRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{72}
}

func (x *GetProjectListRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetProjectListRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetProjectListRequest) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

type GetProjectListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectList []*Project `protobuf:"bytes,1,rep,name=projectList,proto3" json:"projectList,omitempty"`
	Total       int64      `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GetProjectListReply) Reset() {
	*x = GetProjectListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProjectListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectListReply) ProtoMessage() {}

func (x *GetProjectListReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectListReply.ProtoReflect.Descriptor instead.
func (*GetProjectListReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{73}
}

func (x *GetProjectListReply) GetProjectList() []*Project {
	if x != nil {
		return x.ProjectList
	}
	return nil
}

func (x *GetProjectListReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 添加项目
type CreateProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VaspLicenseId int64  `protobuf:"varint,1,opt,name=vasp_license_id,json=vaspLicenseId,proto3" json:"vasp_license_id,omitempty"`
	CloudSecretId string `protobuf:"bytes,2,opt,name=cloud_secret_id,json=cloudSecretId,proto3" json:"cloud_secret_id,omitempty"`
	CloudAppId    string `protobuf:"bytes,3,opt,name=cloud_app_id,json=cloudAppId,proto3" json:"cloud_app_id,omitempty"`
	Name          string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Describe      string `protobuf:"bytes,5,opt,name=describe,proto3" json:"describe,omitempty"`
}

func (x *CreateProjectRequest) Reset() {
	*x = CreateProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProjectRequest) ProtoMessage() {}

func (x *CreateProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProjectRequest.ProtoReflect.Descriptor instead.
func (*CreateProjectRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{74}
}

func (x *CreateProjectRequest) GetVaspLicenseId() int64 {
	if x != nil {
		return x.VaspLicenseId
	}
	return 0
}

func (x *CreateProjectRequest) GetCloudSecretId() string {
	if x != nil {
		return x.CloudSecretId
	}
	return ""
}

func (x *CreateProjectRequest) GetCloudAppId() string {
	if x != nil {
		return x.CloudAppId
	}
	return ""
}

func (x *CreateProjectRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateProjectRequest) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

type CreateProjectReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Project *Project `protobuf:"bytes,2,opt,name=project,proto3" json:"project,omitempty"`
	// 根据返回腾讯云环境状态(cloudEnv.status < 3)判断是否请求本地创建腾讯云环境的应用程序
	CloudEnv *CloudEnv `protobuf:"bytes,3,opt,name=cloudEnv,proto3" json:"cloudEnv,omitempty"`
}

func (x *CreateProjectReply) Reset() {
	*x = CreateProjectReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProjectReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProjectReply) ProtoMessage() {}

func (x *CreateProjectReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProjectReply.ProtoReflect.Descriptor instead.
func (*CreateProjectReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{75}
}

func (x *CreateProjectReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateProjectReply) GetProject() *Project {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *CreateProjectReply) GetCloudEnv() *CloudEnv {
	if x != nil {
		return x.CloudEnv
	}
	return nil
}

// 更新项目
type UpdateProjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NewName     string `protobuf:"bytes,2,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
	NewDescribe string `protobuf:"bytes,3,opt,name=new_describe,json=newDescribe,proto3" json:"new_describe,omitempty"`
}

func (x *UpdateProjectRequest) Reset() {
	*x = UpdateProjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProjectRequest) ProtoMessage() {}

func (x *UpdateProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProjectRequest.ProtoReflect.Descriptor instead.
func (*UpdateProjectRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{76}
}

func (x *UpdateProjectRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateProjectRequest) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

func (x *UpdateProjectRequest) GetNewDescribe() string {
	if x != nil {
		return x.NewDescribe
	}
	return ""
}

type UpdateProjectReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateProjectReply) Reset() {
	*x = UpdateProjectReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProjectReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProjectReply) ProtoMessage() {}

func (x *UpdateProjectReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProjectReply.ProtoReflect.Descriptor instead.
func (*UpdateProjectReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{77}
}

func (x *UpdateProjectReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 获取消息列表
type GetNotifyListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetNotifyListRequest) Reset() {
	*x = GetNotifyListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNotifyListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotifyListRequest) ProtoMessage() {}

func (x *GetNotifyListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotifyListRequest.ProtoReflect.Descriptor instead.
func (*GetNotifyListRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{78}
}

func (x *GetNotifyListRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetNotifyListRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetNotifyListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *GetNotifyListReply) Reset() {
	*x = GetNotifyListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNotifyListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotifyListReply) ProtoMessage() {}

func (x *GetNotifyListReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotifyListReply.ProtoReflect.Descriptor instead.
func (*GetNotifyListReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{79}
}

func (x *GetNotifyListReply) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

// 登出
type LoginOutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LoginOutRequest) Reset() {
	*x = LoginOutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginOutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginOutRequest) ProtoMessage() {}

func (x *LoginOutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginOutRequest.ProtoReflect.Descriptor instead.
func (*LoginOutRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{80}
}

type LoginOutReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *LoginOutReply) Reset() {
	*x = LoginOutReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginOutReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginOutReply) ProtoMessage() {}

func (x *LoginOutReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginOutReply.ProtoReflect.Descriptor instead.
func (*LoginOutReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{81}
}

func (x *LoginOutReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 发送邮件验证码
type SendEmailCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *SendEmailCodeRequest) Reset() {
	*x = SendEmailCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendEmailCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEmailCodeRequest) ProtoMessage() {}

func (x *SendEmailCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEmailCodeRequest.ProtoReflect.Descriptor instead.
func (*SendEmailCodeRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{82}
}

func (x *SendEmailCodeRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type SendEmailCodeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SendEmailCodeReply) Reset() {
	*x = SendEmailCodeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendEmailCodeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEmailCodeReply) ProtoMessage() {}

func (x *SendEmailCodeReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEmailCodeReply.ProtoReflect.Descriptor instead.
func (*SendEmailCodeReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{83}
}

func (x *SendEmailCodeReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 更新数据库的腾讯云环境信息
type UpdateCloudEnvRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Region          string `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	Zone            string `protobuf:"bytes,3,opt,name=zone,proto3" json:"zone,omitempty"`
	CloudAccountId  string `protobuf:"bytes,4,opt,name=cloud_account_id,json=cloudAccountId,proto3" json:"cloud_account_id,omitempty"`
	CloudProjectId  string `protobuf:"bytes,5,opt,name=cloud_project_id,json=cloudProjectId,proto3" json:"cloud_project_id,omitempty"`
	VpcId           string `protobuf:"bytes,6,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	SubnetId        string `protobuf:"bytes,7,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	SecurityGroupId string `protobuf:"bytes,8,opt,name=security_group_id,json=securityGroupId,proto3" json:"security_group_id,omitempty"`
	CosBucket       string `protobuf:"bytes,9,opt,name=cos_bucket,json=cosBucket,proto3" json:"cos_bucket,omitempty"`
	ClusterId       string `protobuf:"bytes,10,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	InstanceId      string `protobuf:"bytes,11,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	InstanceIp      string `protobuf:"bytes,12,opt,name=instance_ip,json=instanceIp,proto3" json:"instance_ip,omitempty"`
	ErrMsg          string `protobuf:"bytes,13,opt,name=err_msg,json=errMsg,proto3" json:"err_msg,omitempty"`
}

func (x *UpdateCloudEnvRequest) Reset() {
	*x = UpdateCloudEnvRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCloudEnvRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCloudEnvRequest) ProtoMessage() {}

func (x *UpdateCloudEnvRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCloudEnvRequest.ProtoReflect.Descriptor instead.
func (*UpdateCloudEnvRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{84}
}

func (x *UpdateCloudEnvRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateCloudEnvRequest) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *UpdateCloudEnvRequest) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *UpdateCloudEnvRequest) GetCloudAccountId() string {
	if x != nil {
		return x.CloudAccountId
	}
	return ""
}

func (x *UpdateCloudEnvRequest) GetCloudProjectId() string {
	if x != nil {
		return x.CloudProjectId
	}
	return ""
}

func (x *UpdateCloudEnvRequest) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *UpdateCloudEnvRequest) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *UpdateCloudEnvRequest) GetSecurityGroupId() string {
	if x != nil {
		return x.SecurityGroupId
	}
	return ""
}

func (x *UpdateCloudEnvRequest) GetCosBucket() string {
	if x != nil {
		return x.CosBucket
	}
	return ""
}

func (x *UpdateCloudEnvRequest) GetClusterId() string {
	if x != nil {
		return x.ClusterId
	}
	return ""
}

func (x *UpdateCloudEnvRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *UpdateCloudEnvRequest) GetInstanceIp() string {
	if x != nil {
		return x.InstanceIp
	}
	return ""
}

func (x *UpdateCloudEnvRequest) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

type UpdateCloudEnvReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateCloudEnvReply) Reset() {
	*x = UpdateCloudEnvReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCloudEnvReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCloudEnvReply) ProtoMessage() {}

func (x *UpdateCloudEnvReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCloudEnvReply.ProtoReflect.Descriptor instead.
func (*UpdateCloudEnvReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{85}
}

func (x *UpdateCloudEnvReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 获取cloudEnv
type GetCloudEnvRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetCloudEnvRequest) Reset() {
	*x = GetCloudEnvRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCloudEnvRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloudEnvRequest) ProtoMessage() {}

func (x *GetCloudEnvRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCloudEnvRequest.ProtoReflect.Descriptor instead.
func (*GetCloudEnvRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{86}
}

func (x *GetCloudEnvRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetCloudEnvEnvReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudEnv *CloudEnv `protobuf:"bytes,1,opt,name=cloudEnv,proto3" json:"cloudEnv,omitempty"`
}

func (x *GetCloudEnvEnvReply) Reset() {
	*x = GetCloudEnvEnvReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCloudEnvEnvReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloudEnvEnvReply) ProtoMessage() {}

func (x *GetCloudEnvEnvReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCloudEnvEnvReply.ProtoReflect.Descriptor instead.
func (*GetCloudEnvEnvReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{87}
}

func (x *GetCloudEnvEnvReply) GetCloudEnv() *CloudEnv {
	if x != nil {
		return x.CloudEnv
	}
	return nil
}

// 获取cloudEnvList
type GetCloudEnvListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Status int64 `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"` // cloudEnv 状态 0=所有 | 1=创建中 | 2=创建失败 | 3=创建成功
}

func (x *GetCloudEnvListRequest) Reset() {
	*x = GetCloudEnvListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCloudEnvListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloudEnvListRequest) ProtoMessage() {}

func (x *GetCloudEnvListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCloudEnvListRequest.ProtoReflect.Descriptor instead.
func (*GetCloudEnvListRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{88}
}

func (x *GetCloudEnvListRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetCloudEnvListRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetCloudEnvListRequest) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

type GetCloudEnvListEnvReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CloudEnv []*CloudEnv `protobuf:"bytes,1,rep,name=cloudEnv,proto3" json:"cloudEnv,omitempty"`
	Total    int64       `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GetCloudEnvListEnvReply) Reset() {
	*x = GetCloudEnvListEnvReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCloudEnvListEnvReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCloudEnvListEnvReply) ProtoMessage() {}

func (x *GetCloudEnvListEnvReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCloudEnvListEnvReply.ProtoReflect.Descriptor instead.
func (*GetCloudEnvListEnvReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{89}
}

func (x *GetCloudEnvListEnvReply) GetCloudEnv() []*CloudEnv {
	if x != nil {
		return x.CloudEnv
	}
	return nil
}

func (x *GetCloudEnvListEnvReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 审核vaspLicense
type ReviewVaspLicenseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ReviewRet int64 `protobuf:"varint,2,opt,name=review_ret,json=reviewRet,proto3" json:"review_ret,omitempty"` // 审核结果  2=失败 | 3=成功
}

func (x *ReviewVaspLicenseRequest) Reset() {
	*x = ReviewVaspLicenseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReviewVaspLicenseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewVaspLicenseRequest) ProtoMessage() {}

func (x *ReviewVaspLicenseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewVaspLicenseRequest.ProtoReflect.Descriptor instead.
func (*ReviewVaspLicenseRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{90}
}

func (x *ReviewVaspLicenseRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReviewVaspLicenseRequest) GetReviewRet() int64 {
	if x != nil {
		return x.ReviewRet
	}
	return 0
}

type ReviewVaspLicenseReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ReviewVaspLicenseReply) Reset() {
	*x = ReviewVaspLicenseReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReviewVaspLicenseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReviewVaspLicenseReply) ProtoMessage() {}

func (x *ReviewVaspLicenseReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReviewVaspLicenseReply.ProtoReflect.Descriptor instead.
func (*ReviewVaspLicenseReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{91}
}

func (x *ReviewVaspLicenseReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 查询vaspLicense列表
type GetVaspLicenseListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Status int64 `protobuf:"varint,3,opt,name=status,proto3" json:"status,omitempty"` // license状态 0=所有 | 1=待审核 | 2=失败 | 3=成功
}

func (x *GetVaspLicenseListRequest) Reset() {
	*x = GetVaspLicenseListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVaspLicenseListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVaspLicenseListRequest) ProtoMessage() {}

func (x *GetVaspLicenseListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVaspLicenseListRequest.ProtoReflect.Descriptor instead.
func (*GetVaspLicenseListRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{92}
}

func (x *GetVaspLicenseListRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetVaspLicenseListRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetVaspLicenseListRequest) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

type GetVaspLicenseListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	License []*License `protobuf:"bytes,1,rep,name=license,proto3" json:"license,omitempty"`
	Total   int64      `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GetVaspLicenseListReply) Reset() {
	*x = GetVaspLicenseListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVaspLicenseListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVaspLicenseListReply) ProtoMessage() {}

func (x *GetVaspLicenseListReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVaspLicenseListReply.ProtoReflect.Descriptor instead.
func (*GetVaspLicenseListReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{93}
}

func (x *GetVaspLicenseListReply) GetLicense() []*License {
	if x != nil {
		return x.License
	}
	return nil
}

func (x *GetVaspLicenseListReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 查询vaspLicense
type GetVaspLicenseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetVaspLicenseRequest) Reset() {
	*x = GetVaspLicenseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVaspLicenseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVaspLicenseRequest) ProtoMessage() {}

func (x *GetVaspLicenseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVaspLicenseRequest.ProtoReflect.Descriptor instead.
func (*GetVaspLicenseRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{94}
}

func (x *GetVaspLicenseRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetVaspLicenseReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	License *License `protobuf:"bytes,1,opt,name=license,proto3" json:"license,omitempty"`
	Images  []string `protobuf:"bytes,2,rep,name=images,proto3" json:"images,omitempty"`
}

func (x *GetVaspLicenseReply) Reset() {
	*x = GetVaspLicenseReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVaspLicenseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVaspLicenseReply) ProtoMessage() {}

func (x *GetVaspLicenseReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVaspLicenseReply.ProtoReflect.Descriptor instead.
func (*GetVaspLicenseReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{95}
}

func (x *GetVaspLicenseReply) GetLicense() *License {
	if x != nil {
		return x.License
	}
	return nil
}

func (x *GetVaspLicenseReply) GetImages() []string {
	if x != nil {
		return x.Images
	}
	return nil
}

// 删除vaspLicense,只有审核未通过license才可删除。
type DelVaspLicenseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DelVaspLicenseRequest) Reset() {
	*x = DelVaspLicenseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelVaspLicenseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelVaspLicenseRequest) ProtoMessage() {}

func (x *DelVaspLicenseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelVaspLicenseRequest.ProtoReflect.Descriptor instead.
func (*DelVaspLicenseRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{96}
}

func (x *DelVaspLicenseRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DelVaspLicenseReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DelVaspLicenseReply) Reset() {
	*x = DelVaspLicenseReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelVaspLicenseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelVaspLicenseReply) ProtoMessage() {}

func (x *DelVaspLicenseReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelVaspLicenseReply.ProtoReflect.Descriptor instead.
func (*DelVaspLicenseReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{97}
}

func (x *DelVaspLicenseReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 更新vaspLicense
type UpdateVaspLicenseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Domain  string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	Details string `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *UpdateVaspLicenseRequest) Reset() {
	*x = UpdateVaspLicenseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVaspLicenseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVaspLicenseRequest) ProtoMessage() {}

func (x *UpdateVaspLicenseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVaspLicenseRequest.ProtoReflect.Descriptor instead.
func (*UpdateVaspLicenseRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{98}
}

func (x *UpdateVaspLicenseRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateVaspLicenseRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *UpdateVaspLicenseRequest) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

type UpdateVaspLicenseReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateVaspLicenseReply) Reset() {
	*x = UpdateVaspLicenseReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVaspLicenseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVaspLicenseReply) ProtoMessage() {}

func (x *UpdateVaspLicenseReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVaspLicenseReply.ProtoReflect.Descriptor instead.
func (*UpdateVaspLicenseReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{99}
}

func (x *UpdateVaspLicenseReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 创建vaspLicense, op_type=1,获取上传cos权限。op_type=2,创建记录
type CreateVaspLicenseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Organization  string `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization,omitempty"`
	Domain        string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	BindEmail     string `protobuf:"bytes,3,opt,name=bind_email,json=bindEmail,proto3" json:"bind_email,omitempty"`
	OpType        int64  `protobuf:"varint,4,opt,name=op_type,json=opType,proto3" json:"op_type,omitempty"`                        // 操作类型, 1=获取cos上传临时密钥和路径 | 2=记录生成
	LicenseDirNum int64  `protobuf:"varint,5,opt,name=license_dir_num,json=licenseDirNum,proto3" json:"license_dir_num,omitempty"` // vaspLicense在cos的文件夹子目录
	EmailCode     int64  `protobuf:"varint,6,opt,name=email_code,json=emailCode,proto3" json:"email_code,omitempty"`               // 邮箱验证码
}

func (x *CreateVaspLicenseRequest) Reset() {
	*x = CreateVaspLicenseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVaspLicenseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVaspLicenseRequest) ProtoMessage() {}

func (x *CreateVaspLicenseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVaspLicenseRequest.ProtoReflect.Descriptor instead.
func (*CreateVaspLicenseRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{100}
}

func (x *CreateVaspLicenseRequest) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

func (x *CreateVaspLicenseRequest) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *CreateVaspLicenseRequest) GetBindEmail() string {
	if x != nil {
		return x.BindEmail
	}
	return ""
}

func (x *CreateVaspLicenseRequest) GetOpType() int64 {
	if x != nil {
		return x.OpType
	}
	return 0
}

func (x *CreateVaspLicenseRequest) GetLicenseDirNum() int64 {
	if x != nil {
		return x.LicenseDirNum
	}
	return 0
}

func (x *CreateVaspLicenseRequest) GetEmailCode() int64 {
	if x != nil {
		return x.EmailCode
	}
	return 0
}

type CreateVaspLicenseReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message    string         `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	UploadPath []string       `protobuf:"bytes,2,rep,name=uploadPath,proto3" json:"uploadPath,omitempty"`
	Credential *CosCredential `protobuf:"bytes,3,opt,name=credential,proto3" json:"credential,omitempty"`
}

func (x *CreateVaspLicenseReply) Reset() {
	*x = CreateVaspLicenseReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVaspLicenseReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVaspLicenseReply) ProtoMessage() {}

func (x *CreateVaspLicenseReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVaspLicenseReply.ProtoReflect.Descriptor instead.
func (*CreateVaspLicenseReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{101}
}

func (x *CreateVaspLicenseReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreateVaspLicenseReply) GetUploadPath() []string {
	if x != nil {
		return x.UploadPath
	}
	return nil
}

func (x *CreateVaspLicenseReply) GetCredential() *CosCredential {
	if x != nil {
		return x.Credential
	}
	return nil
}

// 添加系统配置
type CreateSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value    string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Describe string `protobuf:"bytes,3,opt,name=describe,proto3" json:"describe,omitempty"`
}

func (x *CreateSettingRequest) Reset() {
	*x = CreateSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSettingRequest) ProtoMessage() {}

func (x *CreateSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSettingRequest.ProtoReflect.Descriptor instead.
func (*CreateSettingRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{102}
}

func (x *CreateSettingRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CreateSettingRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CreateSettingRequest) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

type CreateSettingReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CreateSettingReply) Reset() {
	*x = CreateSettingReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSettingReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSettingReply) ProtoMessage() {}

func (x *CreateSettingReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSettingReply.ProtoReflect.Descriptor instead.
func (*CreateSettingReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{103}
}

func (x *CreateSettingReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 更新系统配置
type UpdateSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Value    string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Describe string `protobuf:"bytes,3,opt,name=describe,proto3" json:"describe,omitempty"`
}

func (x *UpdateSettingRequest) Reset() {
	*x = UpdateSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSettingRequest) ProtoMessage() {}

func (x *UpdateSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSettingRequest.ProtoReflect.Descriptor instead.
func (*UpdateSettingRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{104}
}

func (x *UpdateSettingRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateSettingRequest) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *UpdateSettingRequest) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

type UpdateSettingReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UpdateSettingReply) Reset() {
	*x = UpdateSettingReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSettingReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSettingReply) ProtoMessage() {}

func (x *UpdateSettingReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSettingReply.ProtoReflect.Descriptor instead.
func (*UpdateSettingReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{105}
}

func (x *UpdateSettingReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 删除系统配置
type DelSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DelSettingRequest) Reset() {
	*x = DelSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelSettingRequest) ProtoMessage() {}

func (x *DelSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelSettingRequest.ProtoReflect.Descriptor instead.
func (*DelSettingRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{106}
}

func (x *DelSettingRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DelSettingReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *DelSettingReply) Reset() {
	*x = DelSettingReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelSettingReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelSettingReply) ProtoMessage() {}

func (x *DelSettingReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelSettingReply.ProtoReflect.Descriptor instead.
func (*DelSettingReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{107}
}

func (x *DelSettingReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// 获取系统配置
type GetSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetSettingRequest) Reset() {
	*x = GetSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSettingRequest) ProtoMessage() {}

func (x *GetSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSettingRequest.ProtoReflect.Descriptor instead.
func (*GetSettingRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{108}
}

func (x *GetSettingRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetSettingReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Setting *Setting `protobuf:"bytes,2,opt,name=setting,proto3" json:"setting,omitempty"`
}

func (x *GetSettingReply) Reset() {
	*x = GetSettingReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSettingReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSettingReply) ProtoMessage() {}

func (x *GetSettingReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSettingReply.ProtoReflect.Descriptor instead.
func (*GetSettingReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{109}
}

func (x *GetSettingReply) GetSetting() *Setting {
	if x != nil {
		return x.Setting
	}
	return nil
}

// 获取系统配置列表
type GetSettingListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetSettingListRequest) Reset() {
	*x = GetSettingListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSettingListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSettingListRequest) ProtoMessage() {}

func (x *GetSettingListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSettingListRequest.ProtoReflect.Descriptor instead.
func (*GetSettingListRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{110}
}

func (x *GetSettingListRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetSettingListRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetSettingListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Setting []*Setting `protobuf:"bytes,2,rep,name=setting,proto3" json:"setting,omitempty"`
	Total   int64      `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GetSettingListReply) Reset() {
	*x = GetSettingListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSettingListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSettingListReply) ProtoMessage() {}

func (x *GetSettingListReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSettingListReply.ProtoReflect.Descriptor instead.
func (*GetSettingListReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{111}
}

func (x *GetSettingListReply) GetSetting() []*Setting {
	if x != nil {
		return x.Setting
	}
	return nil
}

func (x *GetSettingListReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 获取cos文件下载权限
type GetDownloadTmpCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpType int64 `protobuf:"varint,1,opt,name=op_type,json=opType,proto3" json:"op_type,omitempty"` // 操作类型 1=获取cos用户文件下载权限 | 2=获取tefs部署应用程序下载权限
}

func (x *GetDownloadTmpCredentialRequest) Reset() {
	*x = GetDownloadTmpCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDownloadTmpCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDownloadTmpCredentialRequest) ProtoMessage() {}

func (x *GetDownloadTmpCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDownloadTmpCredentialRequest.ProtoReflect.Descriptor instead.
func (*GetDownloadTmpCredentialRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{112}
}

func (x *GetDownloadTmpCredentialRequest) GetOpType() int64 {
	if x != nil {
		return x.OpType
	}
	return 0
}

type GetDownloadTmpCredentialReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Credential        *CosCredential     `protobuf:"bytes,1,opt,name=credential,proto3" json:"credential,omitempty"`
	TefsDeployCosPath *TefsDeployCosPath `protobuf:"bytes,2,opt,name=tefsDeployCosPath,proto3" json:"tefsDeployCosPath,omitempty"`
}

func (x *GetDownloadTmpCredentialReply) Reset() {
	*x = GetDownloadTmpCredentialReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDownloadTmpCredentialReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDownloadTmpCredentialReply) ProtoMessage() {}

func (x *GetDownloadTmpCredentialReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDownloadTmpCredentialReply.ProtoReflect.Descriptor instead.
func (*GetDownloadTmpCredentialReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{113}
}

func (x *GetDownloadTmpCredentialReply) GetCredential() *CosCredential {
	if x != nil {
		return x.Credential
	}
	return nil
}

func (x *GetDownloadTmpCredentialReply) GetTefsDeployCosPath() *TefsDeployCosPath {
	if x != nil {
		return x.TefsDeployCosPath
	}
	return nil
}

type SendSmsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	Type  int64  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"` // 发送短信类型 1=注册 | 2=用户修改资料手机号
}

func (x *SendSmsRequest) Reset() {
	*x = SendSmsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendSmsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendSmsRequest) ProtoMessage() {}

func (x *SendSmsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendSmsRequest.ProtoReflect.Descriptor instead.
func (*SendSmsRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{114}
}

func (x *SendSmsRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *SendSmsRequest) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

type SendSmsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SendSmsReply) Reset() {
	*x = SendSmsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendSmsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendSmsReply) ProtoMessage() {}

func (x *SendSmsReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendSmsReply.ProtoReflect.Descriptor instead.
func (*SendSmsReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{115}
}

func (x *SendSmsReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type RegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone   string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	Email   string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	SmsCode string `protobuf:"bytes,3,opt,name=sms_code,json=smsCode,proto3" json:"sms_code,omitempty"`
	Name    string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{116}
}

func (x *RegisterRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *RegisterRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *RegisterRequest) GetSmsCode() string {
	if x != nil {
		return x.SmsCode
	}
	return ""
}

func (x *RegisterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RegisterReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RegisterReply) Reset() {
	*x = RegisterReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterReply) ProtoMessage() {}

func (x *RegisterReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterReply.ProtoReflect.Descriptor instead.
func (*RegisterReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{117}
}

func (x *RegisterReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetUserRequest) Reset() {
	*x = GetUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserRequest) ProtoMessage() {}

func (x *GetUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserRequest.ProtoReflect.Descriptor instead.
func (*GetUserRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{118}
}

type GetUserReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *GetUserReply) Reset() {
	*x = GetUserReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserReply) ProtoMessage() {}

func (x *GetUserReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserReply.ProtoReflect.Descriptor instead.
func (*GetUserReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{119}
}

func (x *GetUserReply) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type UserEditRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email            string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Name             string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IsNotify         int64  `protobuf:"varint,3,opt,name=is_notify,json=isNotify,proto3" json:"is_notify,omitempty"`                        // 1=通知 2=不通知
	AgreementVersion string `protobuf:"bytes,4,opt,name=agreement_version,json=agreementVersion,proto3" json:"agreement_version,omitempty"` // 同意的用户协议版本
}

func (x *UserEditRequest) Reset() {
	*x = UserEditRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEditRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEditRequest) ProtoMessage() {}

func (x *UserEditRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEditRequest.ProtoReflect.Descriptor instead.
func (*UserEditRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{120}
}

func (x *UserEditRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserEditRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserEditRequest) GetIsNotify() int64 {
	if x != nil {
		return x.IsNotify
	}
	return 0
}

func (x *UserEditRequest) GetAgreementVersion() string {
	if x != nil {
		return x.AgreementVersion
	}
	return ""
}

type UserEditReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *UserEditReply) Reset() {
	*x = UserEditReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserEditReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserEditReply) ProtoMessage() {}

func (x *UserEditReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserEditReply.ProtoReflect.Descriptor instead.
func (*UserEditReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{121}
}

func (x *UserEditReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ResetPhoneRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Phone      string `protobuf:"bytes,1,opt,name=phone,proto3" json:"phone,omitempty"`
	SmsCode    string `protobuf:"bytes,2,opt,name=sms_code,json=smsCode,proto3" json:"sms_code,omitempty"`
	NewPhone   string `protobuf:"bytes,3,opt,name=new_phone,json=newPhone,proto3" json:"new_phone,omitempty"`
	NewSmsCode string `protobuf:"bytes,4,opt,name=new_sms_code,json=newSmsCode,proto3" json:"new_sms_code,omitempty"`
	Type       int64  `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"` // 1=验证旧手机验证码(参数phone,sms_code) | 2=设置新手机号(所以参数)
}

func (x *ResetPhoneRequest) Reset() {
	*x = ResetPhoneRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetPhoneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPhoneRequest) ProtoMessage() {}

func (x *ResetPhoneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPhoneRequest.ProtoReflect.Descriptor instead.
func (*ResetPhoneRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{122}
}

func (x *ResetPhoneRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *ResetPhoneRequest) GetSmsCode() string {
	if x != nil {
		return x.SmsCode
	}
	return ""
}

func (x *ResetPhoneRequest) GetNewPhone() string {
	if x != nil {
		return x.NewPhone
	}
	return ""
}

func (x *ResetPhoneRequest) GetNewSmsCode() string {
	if x != nil {
		return x.NewSmsCode
	}
	return ""
}

func (x *ResetPhoneRequest) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

type ResetPhoneReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ResetPhoneReply) Reset() {
	*x = ResetPhoneReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetPhoneReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPhoneReply) ProtoMessage() {}

func (x *ResetPhoneReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPhoneReply.ProtoReflect.Descriptor instead.
func (*ResetPhoneReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{123}
}

func (x *ResetPhoneReply) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetUserListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetUserListRequest) Reset() {
	*x = GetUserListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserListRequest) ProtoMessage() {}

func (x *GetUserListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserListRequest.ProtoReflect.Descriptor instead.
func (*GetUserListRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{124}
}

func (x *GetUserListRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetUserListRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetUserListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*User `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	Total int64   `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GetUserListReply) Reset() {
	*x = GetUserListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserListReply) ProtoMessage() {}

func (x *GetUserListReply) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserListReply.ProtoReflect.Descriptor instead.
func (*GetUserListReply) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{125}
}

func (x *GetUserListReply) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *GetUserListReply) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_admin_proto protoreflect.FileDescriptor

var file_admin_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x22, 0xfd, 0x01, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x77, 0x61, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x77, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x73,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x61,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x41, 0x74, 0x22, 0x8b, 0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x73, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6d, 0x70, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6d, 0x70,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6d, 0x70, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x74, 0x6d, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x22, 0xfa, 0x01, 0x0a, 0x07, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x19, 0x0a, 0x08, 0x63, 0x6f, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x22, 0xf0, 0x04,
	0x0a, 0x08, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x61, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x76, 0x61,
	0x73, 0x70, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x5f, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x69, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a,
	0x07, 0x65, 0x72, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x61, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x22, 0xbe, 0x01, 0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x74, 0x22, 0xbb, 0x02, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x65, 0x6e, 0x76, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x61, 0x73, 0x70,
	0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x76, 0x61, 0x73, 0x70, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x22,
	0x3f, 0x0a, 0x11, 0x54, 0x65, 0x66, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x43, 0x6f, 0x73,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63,
	0x22, 0xdf, 0x01, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x12, 0x30, 0x0a, 0x13, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xbd, 0x01, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x61, 0x73, 0x70, 0x5f,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x76, 0x61, 0x73, 0x70, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x45, 0x0a, 0x14, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x13, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x22, 0xc8, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x61,
	0x64, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb4, 0x01,
	0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x74, 0x22, 0x41, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x22, 0xc2, 0x04, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x6f, 0x73, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x42,
	0x61, 0x73, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x73, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x64, 0x69,
	0x74, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74,
	0x45, 0x64, 0x69, 0x74, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x75, 0x6d,
	0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x73, 0x7a, 0x69, 0x63, 0x61, 0x72, 0x5f, 0x6a, 0x73, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x73, 0x7a, 0x69, 0x63, 0x61, 0x72, 0x4a,
	0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x72, 0x72,
	0x5f, 0x6d, 0x73, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d,
	0x73, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x64, 0x6f, 0x6e, 0x65, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6f, 0x6e, 0x69, 0x63, 0x53, 0x74, 0x65, 0x70, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6f, 0x6e, 0x69, 0x63, 0x53, 0x74, 0x65, 0x70, 0x12, 0x22,
	0x0a, 0x0c, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x53, 0x74, 0x65, 0x70, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x53, 0x74,
	0x65, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x69, 0x64, 0x22, 0x35, 0x0a, 0x19,
	0x67, 0x65, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x73,
	0x50, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x73, 0x50,
	0x61, 0x74, 0x68, 0x22, 0x91, 0x01, 0x0a, 0x17, 0x67, 0x65, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x6f, 0x73, 0x63, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x63, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1c, 0x0a, 0x09, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x65, 0x69, 0x67, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x6f, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x6f, 0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0xf9, 0x02, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x06, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x45, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f,
	0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x30, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x22, 0x20, 0x0a, 0x06, 0x45, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x45, 0x78, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x64, 0x65, 0x6d, 0x6f, 0x45,
	0x78, 0x10, 0x01, 0x22, 0x36, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0a, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x63, 0x61, 0x72, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x65,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x65, 0x69, 0x67, 0x65, 0x6e,
	0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x64, 0x6f, 0x73, 0x10, 0x03, 0x22, 0x36, 0x0a, 0x03, 0x4b,
	0x65, 0x79, 0x12, 0x0e, 0x0a, 0x0a, 0x65, 0x5f, 0x77, 0x6f, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x70,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x65, 0x5f, 0x66, 0x72, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x65, 0x5f, 0x30, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x10, 0x02, 0x22, 0x27, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x39, 0x0a, 0x18,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x2c, 0x0a, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x43, 0x0a, 0x1d, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x1b, 0x67, 0x65,
	0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x65, 0x61, 0x64,
	0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x0a,
	0x19, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x17, 0x67, 0x65, 0x74,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0xef, 0x03, 0x0a, 0x1b, 0x67, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6b, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6b, 0x65, 0x73,
	0x12, 0x51, 0x0a, 0x0c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x67, 0x65, 0x74, 0x53, 0x75, 0x62, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x3e, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x28, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x53, 0x75, 0x62, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x22, 0x1f, 0x0a, 0x0b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12,
	0x07, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x73, 0x75, 0x62, 0x10,
	0x01, 0x22, 0x29, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x0d,
	0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x10, 0x01, 0x22, 0x1a, 0x0a, 0x05,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x07, 0x0a, 0x03, 0x61, 0x73, 0x63, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x10, 0x01, 0x22, 0x4b, 0x0a, 0x19, 0x67, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x73, 0x75, 0x62, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x17, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x38,
	0x0a, 0x13, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4a, 0x73, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x19, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x33, 0x0a, 0x17, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x38, 0x0a, 0x19, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x17, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x57, 0x0a, 0x19, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x22, 0x33, 0x0a, 0x17, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3d, 0x0a, 0x17, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x31, 0x0a, 0x15, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x17, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d,
	0x6f, 0x12, 0x31, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x45, 0x64, 0x69, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x4d, 0x65, 0x6d,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x4d, 0x65,
	0x6d, 0x6f, 0x22, 0x31, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3a, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x47, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x31, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x94, 0x01, 0x0a, 0x18, 0x67,
	0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6b, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6b, 0x65,
	0x73, 0x22, 0xfd, 0x01, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12,
	0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x6f, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x72, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x72, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x40, 0x0a, 0x1a, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x18, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xe2, 0x02, 0x0a, 0x17, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x75,
	0x6d, 0x12, 0x55, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa3, 0x01, 0x0a, 0x0e, 0x45, 0x78, 0x70,
	0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x76,
	0x61, 0x73, 0x70, 0x5f, 0x73, 0x74, 0x64, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x76, 0x61, 0x73,
	0x70, 0x5f, 0x67, 0x61, 0x6d, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x76, 0x61, 0x73, 0x70, 0x5f,
	0x6e, 0x63, 0x6c, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x76, 0x61, 0x73, 0x70, 0x5f, 0x32, 0x64,
	0x5f, 0x73, 0x74, 0x64, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x76, 0x61, 0x73, 0x70, 0x5f, 0x32,
	0x64, 0x5f, 0x67, 0x61, 0x6d, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x76, 0x61, 0x73, 0x70, 0x5f,
	0x32, 0x64, 0x5f, 0x6e, 0x63, 0x6c, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x67, 0x70, 0x75, 0x5f,
	0x76, 0x61, 0x73, 0x70, 0x5f, 0x73, 0x74, 0x64, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x67, 0x70,
	0x75, 0x5f, 0x76, 0x61, 0x73, 0x70, 0x5f, 0x67, 0x61, 0x6d, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c,
	0x67, 0x70, 0x75, 0x5f, 0x76, 0x61, 0x73, 0x70, 0x5f, 0x6e, 0x63, 0x6c, 0x10, 0x08, 0x22, 0x31,
	0x0a, 0x15, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xe4, 0x01, 0x0a, 0x17, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d,
	0x65, 0x6d, 0x6f, 0x12, 0x55, 0x0a, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x69, 0x64, 0x22, 0x1a, 0x0a, 0x0e,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08,
	0x0a, 0x04, 0x76, 0x61, 0x73, 0x70, 0x10, 0x00, 0x22, 0x97, 0x01, 0x0a, 0x15, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x42, 0x61, 0x73,
	0x65, 0x55, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x73, 0x42,
	0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x3a, 0x0a, 0x0d, 0x63, 0x6f, 0x73, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x73, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x52, 0x0d, 0x63, 0x6f, 0x73, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x22, 0xe6, 0x01, 0x0a, 0x1e, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x79, 0x43, 0x6f, 0x73, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x6c, 0x61,
	0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x73, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x70, 0x79, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x6f, 0x70, 0x79, 0x45,
	0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x06, 0x4f,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x02, 0x22, 0x7c, 0x0a, 0x1c, 0x6c,
	0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x73, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3a, 0x0a, 0x0d, 0x63,
	0x6f, 0x73, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x73, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0d, 0x63, 0x6f, 0x73, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x6f, 0x73, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x73, 0x42, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x22, 0x41, 0x0a, 0x11, 0x67, 0x65, 0x74,
	0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x47, 0x0a, 0x0f,
	0x67, 0x65, 0x74, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x1e, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x3e, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x63, 0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x6f, 0x6c, 0x6f, 0x75, 0x72, 0x22, 0x2a, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x4a, 0x0a, 0x1a, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x71, 0x0a,
	0x18, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3f, 0x0a, 0x10, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0x6d, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a,
	0x17, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22,
	0x33, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x19, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x64, 0x12, 0x49, 0x0a, 0x0a,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x74, 0x52, 0x09, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x74, 0x22, 0x32, 0x0a, 0x09, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x52, 0x65, 0x74, 0x12, 0x0a, 0x0a, 0x06, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x73, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x10, 0x02, 0x22, 0x33, 0x0a, 0x17, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x6c,
	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x49, 0x0a, 0x19, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x35, 0x0a, 0x17, 0x67,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xcc, 0x01, 0x0a, 0x18, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x45, 0x0a, 0x07, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x72, 0x6f, 0x6c,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x10,
	0x02, 0x22, 0x32, 0x0a, 0x16, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xcb, 0x02, 0x0a, 0x19, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x48, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x09, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x39, 0x0a, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x52,
	0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0x41, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x08, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x74, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x10, 0x03, 0x22, 0x19, 0x0a, 0x04, 0x53, 0x6f, 0x72, 0x74,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x43, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x53,
	0x43, 0x10, 0x01, 0x22, 0x65, 0x0a, 0x17, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x34,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x1c, 0x0a, 0x1a, 0x67, 0x65,
	0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x18, 0x67, 0x65, 0x74,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x43, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x4f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x57, 0x0a, 0x14, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x55, 0x73, 0x65, 0x72, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x65, 0x6e, 0x76,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x45, 0x6e, 0x76, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x57, 0x65, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x23, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3b, 0x0a, 0x0f, 0x67, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x5d, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5d, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x30, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x22, 0xb8, 0x01, 0x0a, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a,
	0x0f, 0x76, 0x61, 0x73, 0x70, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x76, 0x61, 0x73, 0x70, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0c, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x22,
	0x85, 0x01, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x28, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x52, 0x08, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x22, 0x64, 0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65,
	0x77, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6e, 0x65, 0x77, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x22, 0x2e, 0x0a,
	0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x44, 0x0a,
	0x14, 0x67, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0x30, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x4f, 0x75,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x29, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x2c, 0x0a, 0x14, 0x73, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x22, 0x2e, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xa0, 0x03, 0x0a, 0x15, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x76,
	0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70, 0x63,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x73, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x73, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x65,
	0x72, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72,
	0x72, 0x4d, 0x73, 0x67, 0x22, 0x2f, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x24, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x42, 0x0a, 0x13, 0x67,
	0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x45, 0x6e, 0x76, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x22,
	0x5e, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x5c, 0x0a, 0x17, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x52, 0x08, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x49, 0x0a,
	0x18, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x56, 0x61, 0x73, 0x70, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x5f, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x74, 0x22, 0x32, 0x0a, 0x16, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x56, 0x61, 0x73, 0x70, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x61, 0x0a, 0x19,
	0x67, 0x65, 0x74, 0x56, 0x61, 0x73, 0x70, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x59, 0x0a, 0x17, 0x67, 0x65, 0x74, 0x56, 0x61, 0x73, 0x70, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x07, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x27, 0x0a, 0x15, 0x67, 0x65,
	0x74, 0x56, 0x61, 0x73, 0x70, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x57, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x56, 0x61, 0x73, 0x70, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x07, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x22, 0x27, 0x0a, 0x15,
	0x64, 0x65, 0x6c, 0x56, 0x61, 0x73, 0x70, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x56, 0x61, 0x73, 0x70,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5c, 0x0a, 0x18, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x56, 0x61, 0x73, 0x70, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x22, 0x32, 0x0a, 0x16, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61,
	0x73, 0x70, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xd5, 0x01, 0x0a, 0x18, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x56, 0x61, 0x73, 0x70, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x44, 0x69, 0x72, 0x4e, 0x75,
	0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x64, 0x65,
	0x22, 0x88, 0x01, 0x0a, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x61, 0x73, 0x70, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x43, 0x6f, 0x73, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x5a, 0x0a, 0x14, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x22, 0x2e, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x58, 0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x22, 0x2e, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x23, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2b, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x23, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3b, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x07, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x45, 0x0a, 0x15, 0x67, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x55, 0x0a, 0x13,
	0x67, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0x3a, 0x0a, 0x1f, 0x67, 0x65, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x6d, 0x70, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x9d, 0x01, 0x0a, 0x1d, 0x67, 0x65, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x6d, 0x70, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x34, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f,
	0x73, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x46, 0x0a, 0x11, 0x74, 0x65, 0x66, 0x73, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x43, 0x6f, 0x73, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x54, 0x65, 0x66, 0x73, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x43, 0x6f, 0x73, 0x50, 0x61, 0x74, 0x68, 0x52, 0x11, 0x74, 0x65,
	0x66, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x43, 0x6f, 0x73, 0x50, 0x61, 0x74, 0x68, 0x22,
	0x3a, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x28, 0x0a, 0x0c, 0x73,
	0x65, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x6c, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6d, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x29, 0x0a, 0x0d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x10,
	0x0a, 0x0e, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x2f, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x1f, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x22, 0x85, 0x01, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x69, 0x73, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x2b, 0x0a, 0x11,
	0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x29, 0x0a, 0x0d, 0x75, 0x73, 0x65,
	0x72, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x65, 0x74, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x6d, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e,
	0x65, 0x77, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6e, 0x65, 0x77, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f,
	0x73, 0x6d, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6e, 0x65, 0x77, 0x53, 0x6d, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x2b,
	0x0a, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x42, 0x0a, 0x12, 0x67,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22,
	0x4b, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x21, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x32, 0x9b, 0x23, 0x0a,
	0x05, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x37, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x6d,
	0x73, 0x12, 0x15, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x6d,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x73, 0x65, 0x6e, 0x64, 0x53, 0x6d, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x49, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1b, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x18, 0x67, 0x65,
	0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6d, 0x70, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x26, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67,
	0x65, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x6d, 0x70, 0x43, 0x72, 0x65,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x54, 0x6d, 0x70, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x4f,
	0x75, 0x74, 0x12, 0x16, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x4f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x3a, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x16,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x37,
	0x0a, 0x07, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x15, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x13, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0b, 0x67, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x45, 0x64, 0x69, 0x74, 0x12, 0x16, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x45, 0x64, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x45, 0x64, 0x69,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x73, 0x65, 0x74, 0x50, 0x68,
	0x6f, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0d, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x40, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x18,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x64, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x40, 0x0a, 0x0a, 0x67, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x18, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67,
	0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x65, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x55, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x61, 0x73, 0x70,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x61, 0x73, 0x70, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x61, 0x73, 0x70, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x11, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x56, 0x61, 0x73, 0x70, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x1f,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61, 0x73,
	0x70, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x61,
	0x73, 0x70, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x4c, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x56, 0x61, 0x73, 0x70, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x12, 0x1c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x6c, 0x56, 0x61,
	0x73, 0x70, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x6c, 0x56, 0x61, 0x73, 0x70,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4c,
	0x0a, 0x0e, 0x67, 0x65, 0x74, 0x56, 0x61, 0x73, 0x70, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x12, 0x1c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x56, 0x61, 0x73, 0x70,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x56, 0x61, 0x73, 0x70, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x12,
	0x67, 0x65, 0x74, 0x56, 0x61, 0x73, 0x70, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x20, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x56, 0x61,
	0x73, 0x70, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x65, 0x74,
	0x56, 0x61, 0x73, 0x70, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x11, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x56, 0x61, 0x73, 0x70, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x56, 0x61, 0x73, 0x70, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x56, 0x61, 0x73, 0x70, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a,
	0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x12,
	0x1c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0b, 0x67,
	0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x12, 0x19, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x65,
	0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45,
	0x6e, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67,
	0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x65,
	0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x45, 0x6e, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x76,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x67, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x65,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x58, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x12,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x12, 0x20, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x12, 0x20, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x40, 0x0a, 0x0a, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x18,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x49, 0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x1b, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0d, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1b, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67,
	0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0d, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x57, 0x65, 0x62, 0x12, 0x1b, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x55, 0x73, 0x65, 0x72, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x57, 0x65, 0x62, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x5b, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67,
	0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x67, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x12,
	0x67, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x20, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x65, 0x74,
	0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1f, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x58, 0x0a,
	0x12, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x12, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x20, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x58, 0x0a, 0x12, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x20, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41,
	0x70, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x13, 0x67,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x21, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x67, 0x12, 0x17, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x67,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0a, 0x67, 0x65, 0x74, 0x54, 0x61,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x65,
	0x74, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x54, 0x61, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x10, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x67, 0x0a,
	0x17, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x73, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x25, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x73, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x6c, 0x61, 0x62, 0x6f, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x79, 0x43, 0x6f, 0x73, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x13, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x21, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x45, 0x78,
	0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x49,
	0x0a, 0x0d, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1b, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x10, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x52, 0x0a,
	0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x1e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x5e, 0x0a, 0x14, 0x67, 0x65, 0x74, 0x53, 0x75, 0x62, 0x45, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x67, 0x65, 0x74, 0x53, 0x75, 0x62, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x53, 0x75, 0x62, 0x45, 0x78, 0x70, 0x65,
	0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x58, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x20, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x16, 0x67,
	0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x65, 0x61,
	0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x24, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x65,
	0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x72, 0x65, 0x61, 0x64,
	0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65, 0x6e,
	0x74, 0x42, 0x72, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x55, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x65, 0x6c, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x58, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x20, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x67,
	0x65, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x67, 0x65, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f,
	0x3b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_admin_proto_rawDescOnce sync.Once
	file_admin_proto_rawDescData = file_admin_proto_rawDesc
)

func file_admin_proto_rawDescGZIP() []byte {
	file_admin_proto_rawDescOnce.Do(func() {
		file_admin_proto_rawDescData = protoimpl.X.CompressGZIP(file_admin_proto_rawDescData)
	})
	return file_admin_proto_rawDescData
}

var file_admin_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_admin_proto_msgTypes = make([]protoimpl.MessageInfo, 126)
var file_admin_proto_goTypes = []interface{}{
	(GetChartDataRequest_ExType)(0),              // 0: admin.getChartDataRequest.ExType
	(GetChartDataRequest_DataType)(0),            // 1: admin.getChartDataRequest.DataType
	(GetChartDataRequest_Key)(0),                 // 2: admin.getChartDataRequest.Key
	(GetSubExperimentListRequest_SearchScope)(0), // 3: admin.getSubExperimentListRequest.SearchScope
	(GetSubExperimentListRequest_SortField)(0),   // 4: admin.getSubExperimentListRequest.SortField
	(GetSubExperimentListRequest_Order)(0),       // 5: admin.getSubExperimentListRequest.Order
	(SubmitExperimentRequest_ExperimentType)(0),  // 6: admin.submitExperimentRequest.ExperimentType
	(CreateExperimentRequest_ExperimentType)(0),  // 7: admin.createExperimentRequest.ExperimentType
	(LaboratoryCosCredentialRequest_OpType)(0),   // 8: admin.laboratoryCosCredentialRequest.OpType
	(ReviewProjectApplyRequest_ReviewRet)(0),     // 9: admin.reviewProjectApplyRequest.ReviewRet
	(ChangeUserProjectRequest_Options)(0),        // 10: admin.changeUserProjectRequest.Options
	(GetProjectUserListRequest_SortField)(0),     // 11: admin.getProjectUserListRequest.SortField
	(GetProjectUserListRequest_Sort)(0),          // 12: admin.getProjectUserListRequest.Sort
	(*User)(nil),                                 // 13: admin.User
	(*CosCredential)(nil),                        // 14: admin.CosCredential
	(*Setting)(nil),                              // 15: admin.Setting
	(*License)(nil),                              // 16: admin.License
	(*CloudEnv)(nil),                             // 17: admin.CloudEnv
	(*Notify)(nil),                               // 18: admin.Notify
	(*Project)(nil),                              // 19: admin.Project
	(*TefsDeployCosPath)(nil),                    // 20: admin.TefsDeployCosPath
	(*UserProject)(nil),                          // 21: admin.UserProject
	(*UserOrganization)(nil),                     // 22: admin.UserOrganization
	(*ProjectUser)(nil),                          // 23: admin.ProjectUser
	(*ProjectApply)(nil),                         // 24: admin.ProjectApply
	(*Tag)(nil),                                  // 25: admin.Tag
	(*Experiment)(nil),                           // 26: admin.Experiment
	(*GetImportChartDataRequest)(nil),            // 27: admin.getImportChartDataRequest
	(*GetImportChartDataReply)(nil),              // 28: admin.getImportChartDataReply
	(*GetChartDataRequest)(nil),                  // 29: admin.getChartDataRequest
	(*GetChartDataReply)(nil),                    // 30: admin.getChartDataReply
	(*CreateShellServerRequest)(nil),             // 31: admin.createShellServerRequest
	(*CreateShellServerReply)(nil),               // 32: admin.createShellServerReply
	(*GetExperimentBreadLineRequest)(nil),        // 33: admin.getExperimentBreadLineRequest
	(*GetExperimentBreadLineReply)(nil),          // 34: admin.getExperimentBreadLineReply
	(*GetExperimentLevelRequest)(nil),            // 35: admin.getExperimentLevelRequest
	(*GetExperimentLevelReply)(nil),              // 36: admin.getExperimentLevelReply
	(*GetSubExperimentListRequest)(nil),          // 37: admin.getSubExperimentListRequest
	(*GetSubExperimentListReply)(nil),            // 38: admin.getSubExperimentListReply
	(*GetLastProjectRequest)(nil),                // 39: admin.getLastProjectRequest
	(*GetLastProjectReply)(nil),                  // 40: admin.getLastProjectReply
	(*CreateSystemNotifyRequest)(nil),            // 41: admin.createSystemNotifyRequest
	(*CreateSystemNotifyReply)(nil),              // 42: admin.createSystemNotifyReply
	(*DeleteSystemNotifyRequest)(nil),            // 43: admin.deleteSystemNotifyRequest
	(*DeleteSystemNotifyReply)(nil),              // 44: admin.deleteSystemNotifyReply
	(*ChangeNotifyStatusRequest)(nil),            // 45: admin.changeNotifyStatusRequest
	(*ChangeNotifyStatusReply)(nil),              // 46: admin.changeNotifyStatusReply
	(*DeleteExperimentRequest)(nil),              // 47: admin.deleteExperimentRequest
	(*DeleteExperimentReply)(nil),                // 48: admin.deleteExperimentReply
	(*UpdateExperimentRequest)(nil),              // 49: admin.updateExperimentRequest
	(*UpdateExperimentReply)(nil),                // 50: admin.updateExperimentReply
	(*GetExperimentRequest)(nil),                 // 51: admin.getExperimentRequest
	(*GetExperimentReply)(nil),                   // 52: admin.getExperimentReply
	(*GetExperimentListRequest)(nil),             // 53: admin.getExperimentListRequest
	(*GetExperimentListReply)(nil),               // 54: admin.getExperimentListReply
	(*TerminateExperimentRequest)(nil),           // 55: admin.terminateExperimentRequest
	(*TerminateExperimentReply)(nil),             // 56: admin.terminateExperimentReply
	(*SubmitExperimentRequest)(nil),              // 57: admin.submitExperimentRequest
	(*SubmitExperimentReply)(nil),                // 58: admin.submitExperimentReply
	(*CreateExperimentRequest)(nil),              // 59: admin.createExperimentRequest
	(*CreateExperimentReply)(nil),                // 60: admin.createExperimentReply
	(*LaboratoryCosCredentialRequest)(nil),       // 61: admin.laboratoryCosCredentialRequest
	(*LaboratoryCosCredentialReply)(nil),         // 62: admin.laboratoryCosCredentialReply
	(*GetTagListRequest)(nil),                    // 63: admin.getTagListRequest
	(*GetTagListReply)(nil),                      // 64: admin.getTagListReply
	(*CreateTagRequest)(nil),                     // 65: admin.createTagRequest
	(*CreateTagReply)(nil),                       // 66: admin.createTagReply
	(*GetProjectApplyListRequest)(nil),           // 67: admin.getProjectApplyListRequest
	(*GetProjectApplyListReply)(nil),             // 68: admin.getProjectApplyListReply
	(*CreateProjectApplyRequest)(nil),            // 69: admin.CreateProjectApplyRequest
	(*CreateProjectApplyReply)(nil),              // 70: admin.CreateProjectApplyReply
	(*ReviewProjectApplyRequest)(nil),            // 71: admin.reviewProjectApplyRequest
	(*ReviewProjectApplyReply)(nil),              // 72: admin.reviewProjectApplyReply
	(*GetUserProjectListRequest)(nil),            // 73: admin.getUserProjectListRequest
	(*GetUserProjectListReply)(nil),              // 74: admin.getUserProjectListReply
	(*ChangeUserProjectRequest)(nil),             // 75: admin.changeUserProjectRequest
	(*ChangeUserProjectReply)(nil),               // 76: admin.changeUserProjectReply
	(*GetProjectUserListRequest)(nil),            // 77: admin.getProjectUserListRequest
	(*GetProjectUserListReply)(nil),              // 78: admin.getProjectUserListReply
	(*GetOrganizationListRequest)(nil),           // 79: admin.getOrganizationListRequest
	(*GetOrganizationListReply)(nil),             // 80: admin.getOrganizationListReply
	(*DeployUserWebRequest)(nil),                 // 81: admin.deployUserWebRequest
	(*DeployUserWebReply)(nil),                   // 82: admin.deployUserWebReply
	(*GetProjectRequest)(nil),                    // 83: admin.getProjectRequest
	(*GetProjectReply)(nil),                      // 84: admin.getProjectReply
	(*GetProjectListRequest)(nil),                // 85: admin.getProjectListRequest
	(*GetProjectListReply)(nil),                  // 86: admin.getProjectListReply
	(*CreateProjectRequest)(nil),                 // 87: admin.createProjectRequest
	(*CreateProjectReply)(nil),                   // 88: admin.createProjectReply
	(*UpdateProjectRequest)(nil),                 // 89: admin.updateProjectRequest
	(*UpdateProjectReply)(nil),                   // 90: admin.updateProjectReply
	(*GetNotifyListRequest)(nil),                 // 91: admin.getNotifyListRequest
	(*GetNotifyListReply)(nil),                   // 92: admin.getNotifyListReply
	(*LoginOutRequest)(nil),                      // 93: admin.loginOutRequest
	(*LoginOutReply)(nil),                        // 94: admin.loginOutReply
	(*SendEmailCodeRequest)(nil),                 // 95: admin.sendEmailCodeRequest
	(*SendEmailCodeReply)(nil),                   // 96: admin.sendEmailCodeReply
	(*UpdateCloudEnvRequest)(nil),                // 97: admin.updateCloudEnvRequest
	(*UpdateCloudEnvReply)(nil),                  // 98: admin.updateCloudEnvReply
	(*GetCloudEnvRequest)(nil),                   // 99: admin.getCloudEnvRequest
	(*GetCloudEnvEnvReply)(nil),                  // 100: admin.getCloudEnvEnvReply
	(*GetCloudEnvListRequest)(nil),               // 101: admin.getCloudEnvListRequest
	(*GetCloudEnvListEnvReply)(nil),              // 102: admin.getCloudEnvListEnvReply
	(*ReviewVaspLicenseRequest)(nil),             // 103: admin.reviewVaspLicenseRequest
	(*ReviewVaspLicenseReply)(nil),               // 104: admin.reviewVaspLicenseReply
	(*GetVaspLicenseListRequest)(nil),            // 105: admin.getVaspLicenseListRequest
	(*GetVaspLicenseListReply)(nil),              // 106: admin.getVaspLicenseListReply
	(*GetVaspLicenseRequest)(nil),                // 107: admin.getVaspLicenseRequest
	(*GetVaspLicenseReply)(nil),                  // 108: admin.getVaspLicenseReply
	(*DelVaspLicenseRequest)(nil),                // 109: admin.delVaspLicenseRequest
	(*DelVaspLicenseReply)(nil),                  // 110: admin.delVaspLicenseReply
	(*UpdateVaspLicenseRequest)(nil),             // 111: admin.updateVaspLicenseRequest
	(*UpdateVaspLicenseReply)(nil),               // 112: admin.updateVaspLicenseReply
	(*CreateVaspLicenseRequest)(nil),             // 113: admin.createVaspLicenseRequest
	(*CreateVaspLicenseReply)(nil),               // 114: admin.createVaspLicenseReply
	(*CreateSettingRequest)(nil),                 // 115: admin.createSettingRequest
	(*CreateSettingReply)(nil),                   // 116: admin.createSettingReply
	(*UpdateSettingRequest)(nil),                 // 117: admin.updateSettingRequest
	(*UpdateSettingReply)(nil),                   // 118: admin.updateSettingReply
	(*DelSettingRequest)(nil),                    // 119: admin.delSettingRequest
	(*DelSettingReply)(nil),                      // 120: admin.delSettingReply
	(*GetSettingRequest)(nil),                    // 121: admin.getSettingRequest
	(*GetSettingReply)(nil),                      // 122: admin.getSettingReply
	(*GetSettingListRequest)(nil),                // 123: admin.getSettingListRequest
	(*GetSettingListReply)(nil),                  // 124: admin.getSettingListReply
	(*GetDownloadTmpCredentialRequest)(nil),      // 125: admin.getDownloadTmpCredentialRequest
	(*GetDownloadTmpCredentialReply)(nil),        // 126: admin.getDownloadTmpCredentialReply
	(*SendSmsRequest)(nil),                       // 127: admin.sendSmsRequest
	(*SendSmsReply)(nil),                         // 128: admin.sendSmsReply
	(*RegisterRequest)(nil),                      // 129: admin.registerRequest
	(*RegisterReply)(nil),                        // 130: admin.registerReply
	(*GetUserRequest)(nil),                       // 131: admin.getUserRequest
	(*GetUserReply)(nil),                         // 132: admin.getUserReply
	(*UserEditRequest)(nil),                      // 133: admin.userEditRequest
	(*UserEditReply)(nil),                        // 134: admin.userEditReply
	(*ResetPhoneRequest)(nil),                    // 135: admin.resetPhoneRequest
	(*ResetPhoneReply)(nil),                      // 136: admin.resetPhoneReply
	(*GetUserListRequest)(nil),                   // 137: admin.getUserListRequest
	(*GetUserListReply)(nil),                     // 138: admin.getUserListReply
}
var file_admin_proto_depIdxs = []int32{
	21,  // 0: admin.UserOrganization.organization_project:type_name -> admin.UserProject
	0,   // 1: admin.getChartDataRequest.exType:type_name -> admin.getChartDataRequest.ExType
	1,   // 2: admin.getChartDataRequest.dataType:type_name -> admin.getChartDataRequest.DataType
	2,   // 3: admin.getChartDataRequest.key:type_name -> admin.getChartDataRequest.Key
	3,   // 4: admin.getSubExperimentListRequest.search_scope:type_name -> admin.getSubExperimentListRequest.SearchScope
	4,   // 5: admin.getSubExperimentListRequest.sort_field:type_name -> admin.getSubExperimentListRequest.SortField
	5,   // 6: admin.getSubExperimentListRequest.order:type_name -> admin.getSubExperimentListRequest.Order
	26,  // 7: admin.getExperimentReply.experiment:type_name -> admin.Experiment
	26,  // 8: admin.getExperimentListReply.experimentList:type_name -> admin.Experiment
	6,   // 9: admin.submitExperimentRequest.experimentType:type_name -> admin.submitExperimentRequest.ExperimentType
	7,   // 10: admin.createExperimentRequest.experimentType:type_name -> admin.createExperimentRequest.ExperimentType
	14,  // 11: admin.createExperimentReply.cosCredential:type_name -> admin.CosCredential
	8,   // 12: admin.laboratoryCosCredentialRequest.opType:type_name -> admin.laboratoryCosCredentialRequest.OpType
	14,  // 13: admin.laboratoryCosCredentialReply.cosCredential:type_name -> admin.CosCredential
	25,  // 14: admin.getTagListReply.tags:type_name -> admin.Tag
	24,  // 15: admin.getProjectApplyListReply.projectApplyList:type_name -> admin.ProjectApply
	9,   // 16: admin.reviewProjectApplyRequest.review_ret:type_name -> admin.reviewProjectApplyRequest.ReviewRet
	10,  // 17: admin.changeUserProjectRequest.options:type_name -> admin.changeUserProjectRequest.Options
	11,  // 18: admin.getProjectUserListRequest.sortField:type_name -> admin.getProjectUserListRequest.SortField
	12,  // 19: admin.getProjectUserListRequest.sort:type_name -> admin.getProjectUserListRequest.Sort
	23,  // 20: admin.getProjectUserListReply.projectUser:type_name -> admin.ProjectUser
	22,  // 21: admin.getOrganizationListReply.userOrganization:type_name -> admin.UserOrganization
	13,  // 22: admin.getOrganizationListReply.user:type_name -> admin.User
	19,  // 23: admin.getProjectReply.project:type_name -> admin.Project
	19,  // 24: admin.getProjectListReply.projectList:type_name -> admin.Project
	19,  // 25: admin.createProjectReply.project:type_name -> admin.Project
	17,  // 26: admin.createProjectReply.cloudEnv:type_name -> admin.CloudEnv
	17,  // 27: admin.getCloudEnvEnvReply.cloudEnv:type_name -> admin.CloudEnv
	17,  // 28: admin.getCloudEnvListEnvReply.cloudEnv:type_name -> admin.CloudEnv
	16,  // 29: admin.getVaspLicenseListReply.license:type_name -> admin.License
	16,  // 30: admin.getVaspLicenseReply.license:type_name -> admin.License
	14,  // 31: admin.createVaspLicenseReply.credential:type_name -> admin.CosCredential
	15,  // 32: admin.getSettingReply.setting:type_name -> admin.Setting
	15,  // 33: admin.getSettingListReply.setting:type_name -> admin.Setting
	14,  // 34: admin.getDownloadTmpCredentialReply.credential:type_name -> admin.CosCredential
	20,  // 35: admin.getDownloadTmpCredentialReply.tefsDeployCosPath:type_name -> admin.TefsDeployCosPath
	13,  // 36: admin.getUserReply.user:type_name -> admin.User
	13,  // 37: admin.getUserListReply.users:type_name -> admin.User
	127, // 38: admin.Admin.sendSms:input_type -> admin.sendSmsRequest
	95,  // 39: admin.Admin.sendEmailCode:input_type -> admin.sendEmailCodeRequest
	125, // 40: admin.Admin.getDownloadTmpCredential:input_type -> admin.getDownloadTmpCredentialRequest
	93,  // 41: admin.Admin.loginOut:input_type -> admin.loginOutRequest
	129, // 42: admin.Admin.register:input_type -> admin.registerRequest
	131, // 43: admin.Admin.getUser:input_type -> admin.getUserRequest
	137, // 44: admin.Admin.getUserList:input_type -> admin.getUserListRequest
	133, // 45: admin.Admin.userEdit:input_type -> admin.userEditRequest
	135, // 46: admin.Admin.resetPhone:input_type -> admin.resetPhoneRequest
	115, // 47: admin.Admin.createSetting:input_type -> admin.createSettingRequest
	117, // 48: admin.Admin.updateSetting:input_type -> admin.updateSettingRequest
	119, // 49: admin.Admin.delSetting:input_type -> admin.delSettingRequest
	121, // 50: admin.Admin.getSetting:input_type -> admin.getSettingRequest
	123, // 51: admin.Admin.getSettingList:input_type -> admin.getSettingListRequest
	113, // 52: admin.Admin.createVaspLicense:input_type -> admin.createVaspLicenseRequest
	111, // 53: admin.Admin.updateVaspLicense:input_type -> admin.updateVaspLicenseRequest
	109, // 54: admin.Admin.delVaspLicense:input_type -> admin.delVaspLicenseRequest
	107, // 55: admin.Admin.getVaspLicense:input_type -> admin.getVaspLicenseRequest
	105, // 56: admin.Admin.getVaspLicenseList:input_type -> admin.getVaspLicenseListRequest
	103, // 57: admin.Admin.reviewVaspLicense:input_type -> admin.reviewVaspLicenseRequest
	97,  // 58: admin.Admin.updateCloudEnv:input_type -> admin.updateCloudEnvRequest
	99,  // 59: admin.Admin.getCloudEnv:input_type -> admin.getCloudEnvRequest
	101, // 60: admin.Admin.getCloudEnvList:input_type -> admin.getCloudEnvListRequest
	91,  // 61: admin.Admin.getNotifyList:input_type -> admin.getNotifyListRequest
	45,  // 62: admin.Admin.changeNotifyStatus:input_type -> admin.changeNotifyStatusRequest
	41,  // 63: admin.Admin.createSystemNotify:input_type -> admin.createSystemNotifyRequest
	43,  // 64: admin.Admin.deleteSystemNotify:input_type -> admin.deleteSystemNotifyRequest
	83,  // 65: admin.Admin.getProject:input_type -> admin.getProjectRequest
	85,  // 66: admin.Admin.getProjectList:input_type -> admin.getProjectListRequest
	87,  // 67: admin.Admin.createProject:input_type -> admin.createProjectRequest
	89,  // 68: admin.Admin.updateProject:input_type -> admin.updateProjectRequest
	39,  // 69: admin.Admin.getLastProject:input_type -> admin.getLastProjectRequest
	81,  // 70: admin.Admin.deployUserWeb:input_type -> admin.deployUserWebRequest
	79,  // 71: admin.Admin.getOrganizationList:input_type -> admin.getOrganizationListRequest
	77,  // 72: admin.Admin.getProjectUserList:input_type -> admin.getProjectUserListRequest
	75,  // 73: admin.Admin.changeUserProject:input_type -> admin.changeUserProjectRequest
	73,  // 74: admin.Admin.getUserProjectList:input_type -> admin.getUserProjectListRequest
	69,  // 75: admin.Admin.createProjectApply:input_type -> admin.CreateProjectApplyRequest
	71,  // 76: admin.Admin.reviewProjectApply:input_type -> admin.reviewProjectApplyRequest
	67,  // 77: admin.Admin.getProjectApplyList:input_type -> admin.getProjectApplyListRequest
	65,  // 78: admin.Admin.createTag:input_type -> admin.createTagRequest
	63,  // 79: admin.Admin.getTagList:input_type -> admin.getTagListRequest
	59,  // 80: admin.Admin.createExperiment:input_type -> admin.createExperimentRequest
	61,  // 81: admin.Admin.laboratoryCosCredential:input_type -> admin.laboratoryCosCredentialRequest
	57,  // 82: admin.Admin.submitExperiment:input_type -> admin.submitExperimentRequest
	55,  // 83: admin.Admin.terminateExperiment:input_type -> admin.terminateExperimentRequest
	53,  // 84: admin.Admin.getExperimentList:input_type -> admin.getExperimentListRequest
	51,  // 85: admin.Admin.getExperiment:input_type -> admin.getExperimentRequest
	49,  // 86: admin.Admin.updateExperiment:input_type -> admin.updateExperimentRequest
	47,  // 87: admin.Admin.deleteExperiment:input_type -> admin.deleteExperimentRequest
	37,  // 88: admin.Admin.getSubExperimentList:input_type -> admin.getSubExperimentListRequest
	35,  // 89: admin.Admin.getExperimentLevel:input_type -> admin.getExperimentLevelRequest
	33,  // 90: admin.Admin.getExperimentBreadLine:input_type -> admin.getExperimentBreadLineRequest
	31,  // 91: admin.Admin.createShellServer:input_type -> admin.createShellServerRequest
	29,  // 92: admin.Admin.getChartData:input_type -> admin.getChartDataRequest
	27,  // 93: admin.Admin.getImportChartData:input_type -> admin.getImportChartDataRequest
	128, // 94: admin.Admin.sendSms:output_type -> admin.sendSmsReply
	96,  // 95: admin.Admin.sendEmailCode:output_type -> admin.sendEmailCodeReply
	126, // 96: admin.Admin.getDownloadTmpCredential:output_type -> admin.getDownloadTmpCredentialReply
	94,  // 97: admin.Admin.loginOut:output_type -> admin.loginOutReply
	130, // 98: admin.Admin.register:output_type -> admin.registerReply
	132, // 99: admin.Admin.getUser:output_type -> admin.getUserReply
	138, // 100: admin.Admin.getUserList:output_type -> admin.getUserListReply
	134, // 101: admin.Admin.userEdit:output_type -> admin.userEditReply
	136, // 102: admin.Admin.resetPhone:output_type -> admin.resetPhoneReply
	116, // 103: admin.Admin.createSetting:output_type -> admin.createSettingReply
	118, // 104: admin.Admin.updateSetting:output_type -> admin.updateSettingReply
	120, // 105: admin.Admin.delSetting:output_type -> admin.delSettingReply
	122, // 106: admin.Admin.getSetting:output_type -> admin.getSettingReply
	124, // 107: admin.Admin.getSettingList:output_type -> admin.getSettingListReply
	114, // 108: admin.Admin.createVaspLicense:output_type -> admin.createVaspLicenseReply
	112, // 109: admin.Admin.updateVaspLicense:output_type -> admin.updateVaspLicenseReply
	110, // 110: admin.Admin.delVaspLicense:output_type -> admin.delVaspLicenseReply
	108, // 111: admin.Admin.getVaspLicense:output_type -> admin.getVaspLicenseReply
	106, // 112: admin.Admin.getVaspLicenseList:output_type -> admin.getVaspLicenseListReply
	104, // 113: admin.Admin.reviewVaspLicense:output_type -> admin.reviewVaspLicenseReply
	98,  // 114: admin.Admin.updateCloudEnv:output_type -> admin.updateCloudEnvReply
	100, // 115: admin.Admin.getCloudEnv:output_type -> admin.getCloudEnvEnvReply
	102, // 116: admin.Admin.getCloudEnvList:output_type -> admin.getCloudEnvListEnvReply
	92,  // 117: admin.Admin.getNotifyList:output_type -> admin.getNotifyListReply
	46,  // 118: admin.Admin.changeNotifyStatus:output_type -> admin.changeNotifyStatusReply
	42,  // 119: admin.Admin.createSystemNotify:output_type -> admin.createSystemNotifyReply
	44,  // 120: admin.Admin.deleteSystemNotify:output_type -> admin.deleteSystemNotifyReply
	84,  // 121: admin.Admin.getProject:output_type -> admin.getProjectReply
	86,  // 122: admin.Admin.getProjectList:output_type -> admin.getProjectListReply
	88,  // 123: admin.Admin.createProject:output_type -> admin.createProjectReply
	90,  // 124: admin.Admin.updateProject:output_type -> admin.updateProjectReply
	40,  // 125: admin.Admin.getLastProject:output_type -> admin.getLastProjectReply
	82,  // 126: admin.Admin.deployUserWeb:output_type -> admin.deployUserWebReply
	80,  // 127: admin.Admin.getOrganizationList:output_type -> admin.getOrganizationListReply
	78,  // 128: admin.Admin.getProjectUserList:output_type -> admin.getProjectUserListReply
	76,  // 129: admin.Admin.changeUserProject:output_type -> admin.changeUserProjectReply
	74,  // 130: admin.Admin.getUserProjectList:output_type -> admin.getUserProjectListReply
	70,  // 131: admin.Admin.createProjectApply:output_type -> admin.CreateProjectApplyReply
	72,  // 132: admin.Admin.reviewProjectApply:output_type -> admin.reviewProjectApplyReply
	68,  // 133: admin.Admin.getProjectApplyList:output_type -> admin.getProjectApplyListReply
	66,  // 134: admin.Admin.createTag:output_type -> admin.createTagReply
	64,  // 135: admin.Admin.getTagList:output_type -> admin.getTagListReply
	60,  // 136: admin.Admin.createExperiment:output_type -> admin.createExperimentReply
	62,  // 137: admin.Admin.laboratoryCosCredential:output_type -> admin.laboratoryCosCredentialReply
	58,  // 138: admin.Admin.submitExperiment:output_type -> admin.submitExperimentReply
	56,  // 139: admin.Admin.terminateExperiment:output_type -> admin.terminateExperimentReply
	54,  // 140: admin.Admin.getExperimentList:output_type -> admin.getExperimentListReply
	52,  // 141: admin.Admin.getExperiment:output_type -> admin.getExperimentReply
	50,  // 142: admin.Admin.updateExperiment:output_type -> admin.updateExperimentReply
	48,  // 143: admin.Admin.deleteExperiment:output_type -> admin.deleteExperimentReply
	38,  // 144: admin.Admin.getSubExperimentList:output_type -> admin.getSubExperimentListReply
	36,  // 145: admin.Admin.getExperimentLevel:output_type -> admin.getExperimentLevelReply
	34,  // 146: admin.Admin.getExperimentBreadLine:output_type -> admin.getExperimentBreadLineReply
	32,  // 147: admin.Admin.createShellServer:output_type -> admin.createShellServerReply
	30,  // 148: admin.Admin.getChartData:output_type -> admin.getChartDataReply
	28,  // 149: admin.Admin.getImportChartData:output_type -> admin.getImportChartDataReply
	94,  // [94:150] is the sub-list for method output_type
	38,  // [38:94] is the sub-list for method input_type
	38,  // [38:38] is the sub-list for extension type_name
	38,  // [38:38] is the sub-list for extension extendee
	0,   // [0:38] is the sub-list for field type_name
}

func init() { file_admin_proto_init() }
func file_admin_proto_init() {
	if File_admin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_admin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CosCredential); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Setting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*License); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloudEnv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Project); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TefsDeployCosPath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserProject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserOrganization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectApply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Experiment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetImportChartDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetImportChartDataReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChartDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChartDataReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateShellServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateShellServerReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentBreadLineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentBreadLineReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentLevelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentLevelReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubExperimentListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubExperimentListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLastProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLastProjectReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSystemNotifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSystemNotifyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSystemNotifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSystemNotifyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeNotifyStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeNotifyStatusReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExperimentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteExperimentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateExperimentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateExperimentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetExperimentListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminateExperimentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerminateExperimentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitExperimentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitExperimentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateExperimentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateExperimentReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaboratoryCosCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaboratoryCosCredentialReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTagListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTagListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTagReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectApplyListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectApplyListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProjectApplyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProjectApplyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReviewProjectApplyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReviewProjectApplyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserProjectListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserProjectListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeUserProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeUserProjectReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectUserListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectUserListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrganizationListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployUserWebRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployUserWebReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProjectListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateProjectReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateProjectReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNotifyListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNotifyListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginOutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginOutReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendEmailCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendEmailCodeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCloudEnvRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCloudEnvReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCloudEnvRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCloudEnvEnvReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCloudEnvListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCloudEnvListEnvReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReviewVaspLicenseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReviewVaspLicenseReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVaspLicenseListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVaspLicenseListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVaspLicenseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVaspLicenseReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelVaspLicenseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelVaspLicenseReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVaspLicenseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVaspLicenseReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVaspLicenseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateVaspLicenseReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSettingReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSettingReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelSettingReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSettingReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSettingListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSettingListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDownloadTmpCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDownloadTmpCredentialReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendSmsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendSmsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEditRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserEditReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetPhoneRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetPhoneReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_admin_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   126,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_admin_proto_goTypes,
		DependencyIndexes: file_admin_proto_depIdxs,
		EnumInfos:         file_admin_proto_enumTypes,
		MessageInfos:      file_admin_proto_msgTypes,
	}.Build()
	File_admin_proto = out.File
	file_admin_proto_rawDesc = nil
	file_admin_proto_goTypes = nil
	file_admin_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AdminClient is the client API for Admin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AdminClient interface {
	// sms
	SendSms(ctx context.Context, in *SendSmsRequest, opts ...grpc.CallOption) (*SendSmsReply, error)
	// ses 发送邮件验证码
	SendEmailCode(ctx context.Context, in *SendEmailCodeRequest, opts ...grpc.CallOption) (*SendEmailCodeReply, error)
	// cos 下载权限临时密钥
	GetDownloadTmpCredential(ctx context.Context, in *GetDownloadTmpCredentialRequest, opts ...grpc.CallOption) (*GetDownloadTmpCredentialReply, error)
	// 登出
	LoginOut(ctx context.Context, in *LoginOutRequest, opts ...grpc.CallOption) (*LoginOutReply, error)
	// user
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserReply, error)
	GetUserList(ctx context.Context, in *GetUserListRequest, opts ...grpc.CallOption) (*GetUserListReply, error)
	UserEdit(ctx context.Context, in *UserEditRequest, opts ...grpc.CallOption) (*UserEditReply, error)
	ResetPhone(ctx context.Context, in *ResetPhoneRequest, opts ...grpc.CallOption) (*ResetPhoneReply, error)
	// 系统配置
	CreateSetting(ctx context.Context, in *CreateSettingRequest, opts ...grpc.CallOption) (*CreateSettingReply, error)
	UpdateSetting(ctx context.Context, in *UpdateSettingRequest, opts ...grpc.CallOption) (*UpdateSettingReply, error)
	DelSetting(ctx context.Context, in *DelSettingRequest, opts ...grpc.CallOption) (*DelSettingReply, error)
	GetSetting(ctx context.Context, in *GetSettingRequest, opts ...grpc.CallOption) (*GetSettingReply, error)
	GetSettingList(ctx context.Context, in *GetSettingListRequest, opts ...grpc.CallOption) (*GetSettingListReply, error)
	// vaspLicense
	CreateVaspLicense(ctx context.Context, in *CreateVaspLicenseRequest, opts ...grpc.CallOption) (*CreateVaspLicenseReply, error)
	UpdateVaspLicense(ctx context.Context, in *UpdateVaspLicenseRequest, opts ...grpc.CallOption) (*UpdateVaspLicenseReply, error)
	DelVaspLicense(ctx context.Context, in *DelVaspLicenseRequest, opts ...grpc.CallOption) (*DelVaspLicenseReply, error)
	GetVaspLicense(ctx context.Context, in *GetVaspLicenseRequest, opts ...grpc.CallOption) (*GetVaspLicenseReply, error)
	GetVaspLicenseList(ctx context.Context, in *GetVaspLicenseListRequest, opts ...grpc.CallOption) (*GetVaspLicenseListReply, error)
	ReviewVaspLicense(ctx context.Context, in *ReviewVaspLicenseRequest, opts ...grpc.CallOption) (*ReviewVaspLicenseReply, error)
	// 用户起服务前创建腾讯云环境相关API，后端服务器只进行数据库操作，真实TKE后端由用户端自动完成。
	UpdateCloudEnv(ctx context.Context, in *UpdateCloudEnvRequest, opts ...grpc.CallOption) (*UpdateCloudEnvReply, error)
	GetCloudEnv(ctx context.Context, in *GetCloudEnvRequest, opts ...grpc.CallOption) (*GetCloudEnvEnvReply, error)
	GetCloudEnvList(ctx context.Context, in *GetCloudEnvListRequest, opts ...grpc.CallOption) (*GetCloudEnvListEnvReply, error)
	// 消息通知
	// 获取消息列表
	GetNotifyList(ctx context.Context, in *GetNotifyListRequest, opts ...grpc.CallOption) (*GetNotifyListReply, error)
	// 变更消息状态，未读到已读
	ChangeNotifyStatus(ctx context.Context, in *ChangeNotifyStatusRequest, opts ...grpc.CallOption) (*ChangeNotifyStatusReply, error)
	// 创建系统通知记录
	CreateSystemNotify(ctx context.Context, in *CreateSystemNotifyRequest, opts ...grpc.CallOption) (*CreateSystemNotifyReply, error)
	// 删除系统通知记录
	DeleteSystemNotify(ctx context.Context, in *DeleteSystemNotifyRequest, opts ...grpc.CallOption) (*DeleteSystemNotifyReply, error)
	// 项目相关接口
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectReply, error)
	GetProjectList(ctx context.Context, in *GetProjectListRequest, opts ...grpc.CallOption) (*GetProjectListReply, error)
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectReply, error)
	UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectReply, error)
	// 获取用户最后操作的项目
	GetLastProject(ctx context.Context, in *GetLastProjectRequest, opts ...grpc.CallOption) (*GetLastProjectReply, error)
	// 部署用户计算任务的web服务
	DeployUserWeb(ctx context.Context, in *DeployUserWebRequest, opts ...grpc.CallOption) (*DeployUserWebReply, error)
	// 用户项目接口
	GetOrganizationList(ctx context.Context, in *GetOrganizationListRequest, opts ...grpc.CallOption) (*GetOrganizationListReply, error)
	GetProjectUserList(ctx context.Context, in *GetProjectUserListRequest, opts ...grpc.CallOption) (*GetProjectUserListReply, error)
	ChangeUserProject(ctx context.Context, in *ChangeUserProjectRequest, opts ...grpc.CallOption) (*ChangeUserProjectReply, error)
	GetUserProjectList(ctx context.Context, in *GetUserProjectListRequest, opts ...grpc.CallOption) (*GetUserProjectListReply, error)
	// 项目申请
	CreateProjectApply(ctx context.Context, in *CreateProjectApplyRequest, opts ...grpc.CallOption) (*CreateProjectApplyReply, error)
	ReviewProjectApply(ctx context.Context, in *ReviewProjectApplyRequest, opts ...grpc.CallOption) (*ReviewProjectApplyReply, error)
	GetProjectApplyList(ctx context.Context, in *GetProjectApplyListRequest, opts ...grpc.CallOption) (*GetProjectApplyListReply, error)
	// 用户实验标签
	// 创建标签，限额50，标签名不可重复
	CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*CreateTagReply, error)
	GetTagList(ctx context.Context, in *GetTagListRequest, opts ...grpc.CallOption) (*GetTagListReply, error)
	// 实验室(项目)
	// 创建实验
	CreateExperiment(ctx context.Context, in *CreateExperimentRequest, opts ...grpc.CallOption) (*CreateExperimentReply, error)
	// 实验室的cos临时凭证
	LaboratoryCosCredential(ctx context.Context, in *LaboratoryCosCredentialRequest, opts ...grpc.CallOption) (*LaboratoryCosCredentialReply, error)
	// 提交实验
	SubmitExperiment(ctx context.Context, in *SubmitExperimentRequest, opts ...grpc.CallOption) (*SubmitExperimentReply, error)
	// 终止实验
	TerminateExperiment(ctx context.Context, in *TerminateExperimentRequest, opts ...grpc.CallOption) (*TerminateExperimentReply, error)
	// 获取实验列表
	GetExperimentList(ctx context.Context, in *GetExperimentListRequest, opts ...grpc.CallOption) (*GetExperimentListReply, error)
	// 获取实验
	GetExperiment(ctx context.Context, in *GetExperimentRequest, opts ...grpc.CallOption) (*GetExperimentReply, error)
	// 更新实验
	UpdateExperiment(ctx context.Context, in *UpdateExperimentRequest, opts ...grpc.CallOption) (*UpdateExperimentReply, error)
	// 删除实验
	DeleteExperiment(ctx context.Context, in *DeleteExperimentRequest, opts ...grpc.CallOption) (*DeleteExperimentReply, error)
	// 获取子实验列表
	GetSubExperimentList(ctx context.Context, in *GetSubExperimentListRequest, opts ...grpc.CallOption) (*GetSubExperimentListReply, error)
	// 获取实验级别关系
	GetExperimentLevel(ctx context.Context, in *GetExperimentLevelRequest, opts ...grpc.CallOption) (*GetExperimentLevelReply, error)
	// 获取实验面包线
	GetExperimentBreadLine(ctx context.Context, in *GetExperimentBreadLineRequest, opts ...grpc.CallOption) (*GetExperimentBreadLineReply, error)
	// console shell
	// 创建console shell服务
	CreateShellServer(ctx context.Context, in *CreateShellServerRequest, opts ...grpc.CallOption) (*CreateShellServerReply, error)
	// chart
	// 获取用户实验vasprun.xml中数据
	GetChartData(ctx context.Context, in *GetChartDataRequest, opts ...grpc.CallOption) (*GetChartDataReply, error)
	GetImportChartData(ctx context.Context, in *GetImportChartDataRequest, opts ...grpc.CallOption) (*GetImportChartDataReply, error)
}

type adminClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminClient(cc grpc.ClientConnInterface) AdminClient {
	return &adminClient{cc}
}

func (c *adminClient) SendSms(ctx context.Context, in *SendSmsRequest, opts ...grpc.CallOption) (*SendSmsReply, error) {
	out := new(SendSmsReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/sendSms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SendEmailCode(ctx context.Context, in *SendEmailCodeRequest, opts ...grpc.CallOption) (*SendEmailCodeReply, error) {
	out := new(SendEmailCodeReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/sendEmailCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetDownloadTmpCredential(ctx context.Context, in *GetDownloadTmpCredentialRequest, opts ...grpc.CallOption) (*GetDownloadTmpCredentialReply, error) {
	out := new(GetDownloadTmpCredentialReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/getDownloadTmpCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) LoginOut(ctx context.Context, in *LoginOutRequest, opts ...grpc.CallOption) (*LoginOutReply, error) {
	out := new(LoginOutReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/loginOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserReply, error) {
	out := new(GetUserReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/getUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetUserList(ctx context.Context, in *GetUserListRequest, opts ...grpc.CallOption) (*GetUserListReply, error) {
	out := new(GetUserListReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/getUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UserEdit(ctx context.Context, in *UserEditRequest, opts ...grpc.CallOption) (*UserEditReply, error) {
	out := new(UserEditReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/userEdit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ResetPhone(ctx context.Context, in *ResetPhoneRequest, opts ...grpc.CallOption) (*ResetPhoneReply, error) {
	out := new(ResetPhoneReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/resetPhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateSetting(ctx context.Context, in *CreateSettingRequest, opts ...grpc.CallOption) (*CreateSettingReply, error) {
	out := new(CreateSettingReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/createSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateSetting(ctx context.Context, in *UpdateSettingRequest, opts ...grpc.CallOption) (*UpdateSettingReply, error) {
	out := new(UpdateSettingReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/updateSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DelSetting(ctx context.Context, in *DelSettingRequest, opts ...grpc.CallOption) (*DelSettingReply, error) {
	out := new(DelSettingReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/delSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetSetting(ctx context.Context, in *GetSettingRequest, opts ...grpc.CallOption) (*GetSettingReply, error) {
	out := new(GetSettingReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/getSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetSettingList(ctx context.Context, in *GetSettingListRequest, opts ...grpc.CallOption) (*GetSettingListReply, error) {
	out := new(GetSettingListReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/getSettingList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateVaspLicense(ctx context.Context, in *CreateVaspLicenseRequest, opts ...grpc.CallOption) (*CreateVaspLicenseReply, error) {
	out := new(CreateVaspLicenseReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/createVaspLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateVaspLicense(ctx context.Context, in *UpdateVaspLicenseRequest, opts ...grpc.CallOption) (*UpdateVaspLicenseReply, error) {
	out := new(UpdateVaspLicenseReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/updateVaspLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DelVaspLicense(ctx context.Context, in *DelVaspLicenseRequest, opts ...grpc.CallOption) (*DelVaspLicenseReply, error) {
	out := new(DelVaspLicenseReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/delVaspLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetVaspLicense(ctx context.Context, in *GetVaspLicenseRequest, opts ...grpc.CallOption) (*GetVaspLicenseReply, error) {
	out := new(GetVaspLicenseReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/getVaspLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetVaspLicenseList(ctx context.Context, in *GetVaspLicenseListRequest, opts ...grpc.CallOption) (*GetVaspLicenseListReply, error) {
	out := new(GetVaspLicenseListReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/getVaspLicenseList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ReviewVaspLicense(ctx context.Context, in *ReviewVaspLicenseRequest, opts ...grpc.CallOption) (*ReviewVaspLicenseReply, error) {
	out := new(ReviewVaspLicenseReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/reviewVaspLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateCloudEnv(ctx context.Context, in *UpdateCloudEnvRequest, opts ...grpc.CallOption) (*UpdateCloudEnvReply, error) {
	out := new(UpdateCloudEnvReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/updateCloudEnv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetCloudEnv(ctx context.Context, in *GetCloudEnvRequest, opts ...grpc.CallOption) (*GetCloudEnvEnvReply, error) {
	out := new(GetCloudEnvEnvReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/getCloudEnv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetCloudEnvList(ctx context.Context, in *GetCloudEnvListRequest, opts ...grpc.CallOption) (*GetCloudEnvListEnvReply, error) {
	out := new(GetCloudEnvListEnvReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/getCloudEnvList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetNotifyList(ctx context.Context, in *GetNotifyListRequest, opts ...grpc.CallOption) (*GetNotifyListReply, error) {
	out := new(GetNotifyListReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/getNotifyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ChangeNotifyStatus(ctx context.Context, in *ChangeNotifyStatusRequest, opts ...grpc.CallOption) (*ChangeNotifyStatusReply, error) {
	out := new(ChangeNotifyStatusReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/changeNotifyStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateSystemNotify(ctx context.Context, in *CreateSystemNotifyRequest, opts ...grpc.CallOption) (*CreateSystemNotifyReply, error) {
	out := new(CreateSystemNotifyReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/createSystemNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteSystemNotify(ctx context.Context, in *DeleteSystemNotifyRequest, opts ...grpc.CallOption) (*DeleteSystemNotifyReply, error) {
	out := new(DeleteSystemNotifyReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/deleteSystemNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*GetProjectReply, error) {
	out := new(GetProjectReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/getProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetProjectList(ctx context.Context, in *GetProjectListRequest, opts ...grpc.CallOption) (*GetProjectListReply, error) {
	out := new(GetProjectListReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/getProjectList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectReply, error) {
	out := new(CreateProjectReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/createProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectReply, error) {
	out := new(UpdateProjectReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/updateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetLastProject(ctx context.Context, in *GetLastProjectRequest, opts ...grpc.CallOption) (*GetLastProjectReply, error) {
	out := new(GetLastProjectReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/getLastProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeployUserWeb(ctx context.Context, in *DeployUserWebRequest, opts ...grpc.CallOption) (*DeployUserWebReply, error) {
	out := new(DeployUserWebReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/deployUserWeb", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetOrganizationList(ctx context.Context, in *GetOrganizationListRequest, opts ...grpc.CallOption) (*GetOrganizationListReply, error) {
	out := new(GetOrganizationListReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/getOrganizationList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetProjectUserList(ctx context.Context, in *GetProjectUserListRequest, opts ...grpc.CallOption) (*GetProjectUserListReply, error) {
	out := new(GetProjectUserListReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/getProjectUserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ChangeUserProject(ctx context.Context, in *ChangeUserProjectRequest, opts ...grpc.CallOption) (*ChangeUserProjectReply, error) {
	out := new(ChangeUserProjectReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/changeUserProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetUserProjectList(ctx context.Context, in *GetUserProjectListRequest, opts ...grpc.CallOption) (*GetUserProjectListReply, error) {
	out := new(GetUserProjectListReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/getUserProjectList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateProjectApply(ctx context.Context, in *CreateProjectApplyRequest, opts ...grpc.CallOption) (*CreateProjectApplyReply, error) {
	out := new(CreateProjectApplyReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/createProjectApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) ReviewProjectApply(ctx context.Context, in *ReviewProjectApplyRequest, opts ...grpc.CallOption) (*ReviewProjectApplyReply, error) {
	out := new(ReviewProjectApplyReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/reviewProjectApply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetProjectApplyList(ctx context.Context, in *GetProjectApplyListRequest, opts ...grpc.CallOption) (*GetProjectApplyListReply, error) {
	out := new(GetProjectApplyListReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/getProjectApplyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateTag(ctx context.Context, in *CreateTagRequest, opts ...grpc.CallOption) (*CreateTagReply, error) {
	out := new(CreateTagReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/createTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetTagList(ctx context.Context, in *GetTagListRequest, opts ...grpc.CallOption) (*GetTagListReply, error) {
	out := new(GetTagListReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/getTagList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateExperiment(ctx context.Context, in *CreateExperimentRequest, opts ...grpc.CallOption) (*CreateExperimentReply, error) {
	out := new(CreateExperimentReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/createExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) LaboratoryCosCredential(ctx context.Context, in *LaboratoryCosCredentialRequest, opts ...grpc.CallOption) (*LaboratoryCosCredentialReply, error) {
	out := new(LaboratoryCosCredentialReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/laboratoryCosCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) SubmitExperiment(ctx context.Context, in *SubmitExperimentRequest, opts ...grpc.CallOption) (*SubmitExperimentReply, error) {
	out := new(SubmitExperimentReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/submitExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) TerminateExperiment(ctx context.Context, in *TerminateExperimentRequest, opts ...grpc.CallOption) (*TerminateExperimentReply, error) {
	out := new(TerminateExperimentReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/terminateExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetExperimentList(ctx context.Context, in *GetExperimentListRequest, opts ...grpc.CallOption) (*GetExperimentListReply, error) {
	out := new(GetExperimentListReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/getExperimentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetExperiment(ctx context.Context, in *GetExperimentRequest, opts ...grpc.CallOption) (*GetExperimentReply, error) {
	out := new(GetExperimentReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/getExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) UpdateExperiment(ctx context.Context, in *UpdateExperimentRequest, opts ...grpc.CallOption) (*UpdateExperimentReply, error) {
	out := new(UpdateExperimentReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/updateExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) DeleteExperiment(ctx context.Context, in *DeleteExperimentRequest, opts ...grpc.CallOption) (*DeleteExperimentReply, error) {
	out := new(DeleteExperimentReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/deleteExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetSubExperimentList(ctx context.Context, in *GetSubExperimentListRequest, opts ...grpc.CallOption) (*GetSubExperimentListReply, error) {
	out := new(GetSubExperimentListReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/getSubExperimentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetExperimentLevel(ctx context.Context, in *GetExperimentLevelRequest, opts ...grpc.CallOption) (*GetExperimentLevelReply, error) {
	out := new(GetExperimentLevelReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/getExperimentLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetExperimentBreadLine(ctx context.Context, in *GetExperimentBreadLineRequest, opts ...grpc.CallOption) (*GetExperimentBreadLineReply, error) {
	out := new(GetExperimentBreadLineReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/getExperimentBreadLine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) CreateShellServer(ctx context.Context, in *CreateShellServerRequest, opts ...grpc.CallOption) (*CreateShellServerReply, error) {
	out := new(CreateShellServerReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/createShellServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetChartData(ctx context.Context, in *GetChartDataRequest, opts ...grpc.CallOption) (*GetChartDataReply, error) {
	out := new(GetChartDataReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/getChartData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminClient) GetImportChartData(ctx context.Context, in *GetImportChartDataRequest, opts ...grpc.CallOption) (*GetImportChartDataReply, error) {
	out := new(GetImportChartDataReply)
	err := c.cc.Invoke(ctx, "/admin.Admin/getImportChartData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServer is the server API for Admin service.
type AdminServer interface {
	// sms
	SendSms(context.Context, *SendSmsRequest) (*SendSmsReply, error)
	// ses 发送邮件验证码
	SendEmailCode(context.Context, *SendEmailCodeRequest) (*SendEmailCodeReply, error)
	// cos 下载权限临时密钥
	GetDownloadTmpCredential(context.Context, *GetDownloadTmpCredentialRequest) (*GetDownloadTmpCredentialReply, error)
	// 登出
	LoginOut(context.Context, *LoginOutRequest) (*LoginOutReply, error)
	// user
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
	GetUser(context.Context, *GetUserRequest) (*GetUserReply, error)
	GetUserList(context.Context, *GetUserListRequest) (*GetUserListReply, error)
	UserEdit(context.Context, *UserEditRequest) (*UserEditReply, error)
	ResetPhone(context.Context, *ResetPhoneRequest) (*ResetPhoneReply, error)
	// 系统配置
	CreateSetting(context.Context, *CreateSettingRequest) (*CreateSettingReply, error)
	UpdateSetting(context.Context, *UpdateSettingRequest) (*UpdateSettingReply, error)
	DelSetting(context.Context, *DelSettingRequest) (*DelSettingReply, error)
	GetSetting(context.Context, *GetSettingRequest) (*GetSettingReply, error)
	GetSettingList(context.Context, *GetSettingListRequest) (*GetSettingListReply, error)
	// vaspLicense
	CreateVaspLicense(context.Context, *CreateVaspLicenseRequest) (*CreateVaspLicenseReply, error)
	UpdateVaspLicense(context.Context, *UpdateVaspLicenseRequest) (*UpdateVaspLicenseReply, error)
	DelVaspLicense(context.Context, *DelVaspLicenseRequest) (*DelVaspLicenseReply, error)
	GetVaspLicense(context.Context, *GetVaspLicenseRequest) (*GetVaspLicenseReply, error)
	GetVaspLicenseList(context.Context, *GetVaspLicenseListRequest) (*GetVaspLicenseListReply, error)
	ReviewVaspLicense(context.Context, *ReviewVaspLicenseRequest) (*ReviewVaspLicenseReply, error)
	// 用户起服务前创建腾讯云环境相关API，后端服务器只进行数据库操作，真实TKE后端由用户端自动完成。
	UpdateCloudEnv(context.Context, *UpdateCloudEnvRequest) (*UpdateCloudEnvReply, error)
	GetCloudEnv(context.Context, *GetCloudEnvRequest) (*GetCloudEnvEnvReply, error)
	GetCloudEnvList(context.Context, *GetCloudEnvListRequest) (*GetCloudEnvListEnvReply, error)
	// 消息通知
	// 获取消息列表
	GetNotifyList(context.Context, *GetNotifyListRequest) (*GetNotifyListReply, error)
	// 变更消息状态，未读到已读
	ChangeNotifyStatus(context.Context, *ChangeNotifyStatusRequest) (*ChangeNotifyStatusReply, error)
	// 创建系统通知记录
	CreateSystemNotify(context.Context, *CreateSystemNotifyRequest) (*CreateSystemNotifyReply, error)
	// 删除系统通知记录
	DeleteSystemNotify(context.Context, *DeleteSystemNotifyRequest) (*DeleteSystemNotifyReply, error)
	// 项目相关接口
	GetProject(context.Context, *GetProjectRequest) (*GetProjectReply, error)
	GetProjectList(context.Context, *GetProjectListRequest) (*GetProjectListReply, error)
	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectReply, error)
	UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectReply, error)
	// 获取用户最后操作的项目
	GetLastProject(context.Context, *GetLastProjectRequest) (*GetLastProjectReply, error)
	// 部署用户计算任务的web服务
	DeployUserWeb(context.Context, *DeployUserWebRequest) (*DeployUserWebReply, error)
	// 用户项目接口
	GetOrganizationList(context.Context, *GetOrganizationListRequest) (*GetOrganizationListReply, error)
	GetProjectUserList(context.Context, *GetProjectUserListRequest) (*GetProjectUserListReply, error)
	ChangeUserProject(context.Context, *ChangeUserProjectRequest) (*ChangeUserProjectReply, error)
	GetUserProjectList(context.Context, *GetUserProjectListRequest) (*GetUserProjectListReply, error)
	// 项目申请
	CreateProjectApply(context.Context, *CreateProjectApplyRequest) (*CreateProjectApplyReply, error)
	ReviewProjectApply(context.Context, *ReviewProjectApplyRequest) (*ReviewProjectApplyReply, error)
	GetProjectApplyList(context.Context, *GetProjectApplyListRequest) (*GetProjectApplyListReply, error)
	// 用户实验标签
	// 创建标签，限额50，标签名不可重复
	CreateTag(context.Context, *CreateTagRequest) (*CreateTagReply, error)
	GetTagList(context.Context, *GetTagListRequest) (*GetTagListReply, error)
	// 实验室(项目)
	// 创建实验
	CreateExperiment(context.Context, *CreateExperimentRequest) (*CreateExperimentReply, error)
	// 实验室的cos临时凭证
	LaboratoryCosCredential(context.Context, *LaboratoryCosCredentialRequest) (*LaboratoryCosCredentialReply, error)
	// 提交实验
	SubmitExperiment(context.Context, *SubmitExperimentRequest) (*SubmitExperimentReply, error)
	// 终止实验
	TerminateExperiment(context.Context, *TerminateExperimentRequest) (*TerminateExperimentReply, error)
	// 获取实验列表
	GetExperimentList(context.Context, *GetExperimentListRequest) (*GetExperimentListReply, error)
	// 获取实验
	GetExperiment(context.Context, *GetExperimentRequest) (*GetExperimentReply, error)
	// 更新实验
	UpdateExperiment(context.Context, *UpdateExperimentRequest) (*UpdateExperimentReply, error)
	// 删除实验
	DeleteExperiment(context.Context, *DeleteExperimentRequest) (*DeleteExperimentReply, error)
	// 获取子实验列表
	GetSubExperimentList(context.Context, *GetSubExperimentListRequest) (*GetSubExperimentListReply, error)
	// 获取实验级别关系
	GetExperimentLevel(context.Context, *GetExperimentLevelRequest) (*GetExperimentLevelReply, error)
	// 获取实验面包线
	GetExperimentBreadLine(context.Context, *GetExperimentBreadLineRequest) (*GetExperimentBreadLineReply, error)
	// console shell
	// 创建console shell服务
	CreateShellServer(context.Context, *CreateShellServerRequest) (*CreateShellServerReply, error)
	// chart
	// 获取用户实验vasprun.xml中数据
	GetChartData(context.Context, *GetChartDataRequest) (*GetChartDataReply, error)
	GetImportChartData(context.Context, *GetImportChartDataRequest) (*GetImportChartDataReply, error)
}

// UnimplementedAdminServer can be embedded to have forward compatible implementations.
type UnimplementedAdminServer struct {
}

func (*UnimplementedAdminServer) SendSms(context.Context, *SendSmsRequest) (*SendSmsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSms not implemented")
}
func (*UnimplementedAdminServer) SendEmailCode(context.Context, *SendEmailCodeRequest) (*SendEmailCodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailCode not implemented")
}
func (*UnimplementedAdminServer) GetDownloadTmpCredential(context.Context, *GetDownloadTmpCredentialRequest) (*GetDownloadTmpCredentialReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDownloadTmpCredential not implemented")
}
func (*UnimplementedAdminServer) LoginOut(context.Context, *LoginOutRequest) (*LoginOutReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginOut not implemented")
}
func (*UnimplementedAdminServer) Register(context.Context, *RegisterRequest) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedAdminServer) GetUser(context.Context, *GetUserRequest) (*GetUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedAdminServer) GetUserList(context.Context, *GetUserListRequest) (*GetUserListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserList not implemented")
}
func (*UnimplementedAdminServer) UserEdit(context.Context, *UserEditRequest) (*UserEditReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserEdit not implemented")
}
func (*UnimplementedAdminServer) ResetPhone(context.Context, *ResetPhoneRequest) (*ResetPhoneReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPhone not implemented")
}
func (*UnimplementedAdminServer) CreateSetting(context.Context, *CreateSettingRequest) (*CreateSettingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSetting not implemented")
}
func (*UnimplementedAdminServer) UpdateSetting(context.Context, *UpdateSettingRequest) (*UpdateSettingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSetting not implemented")
}
func (*UnimplementedAdminServer) DelSetting(context.Context, *DelSettingRequest) (*DelSettingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelSetting not implemented")
}
func (*UnimplementedAdminServer) GetSetting(context.Context, *GetSettingRequest) (*GetSettingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSetting not implemented")
}
func (*UnimplementedAdminServer) GetSettingList(context.Context, *GetSettingListRequest) (*GetSettingListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettingList not implemented")
}
func (*UnimplementedAdminServer) CreateVaspLicense(context.Context, *CreateVaspLicenseRequest) (*CreateVaspLicenseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVaspLicense not implemented")
}
func (*UnimplementedAdminServer) UpdateVaspLicense(context.Context, *UpdateVaspLicenseRequest) (*UpdateVaspLicenseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVaspLicense not implemented")
}
func (*UnimplementedAdminServer) DelVaspLicense(context.Context, *DelVaspLicenseRequest) (*DelVaspLicenseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelVaspLicense not implemented")
}
func (*UnimplementedAdminServer) GetVaspLicense(context.Context, *GetVaspLicenseRequest) (*GetVaspLicenseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVaspLicense not implemented")
}
func (*UnimplementedAdminServer) GetVaspLicenseList(context.Context, *GetVaspLicenseListRequest) (*GetVaspLicenseListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVaspLicenseList not implemented")
}
func (*UnimplementedAdminServer) ReviewVaspLicense(context.Context, *ReviewVaspLicenseRequest) (*ReviewVaspLicenseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewVaspLicense not implemented")
}
func (*UnimplementedAdminServer) UpdateCloudEnv(context.Context, *UpdateCloudEnvRequest) (*UpdateCloudEnvReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCloudEnv not implemented")
}
func (*UnimplementedAdminServer) GetCloudEnv(context.Context, *GetCloudEnvRequest) (*GetCloudEnvEnvReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudEnv not implemented")
}
func (*UnimplementedAdminServer) GetCloudEnvList(context.Context, *GetCloudEnvListRequest) (*GetCloudEnvListEnvReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCloudEnvList not implemented")
}
func (*UnimplementedAdminServer) GetNotifyList(context.Context, *GetNotifyListRequest) (*GetNotifyListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifyList not implemented")
}
func (*UnimplementedAdminServer) ChangeNotifyStatus(context.Context, *ChangeNotifyStatusRequest) (*ChangeNotifyStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeNotifyStatus not implemented")
}
func (*UnimplementedAdminServer) CreateSystemNotify(context.Context, *CreateSystemNotifyRequest) (*CreateSystemNotifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSystemNotify not implemented")
}
func (*UnimplementedAdminServer) DeleteSystemNotify(context.Context, *DeleteSystemNotifyRequest) (*DeleteSystemNotifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSystemNotify not implemented")
}
func (*UnimplementedAdminServer) GetProject(context.Context, *GetProjectRequest) (*GetProjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (*UnimplementedAdminServer) GetProjectList(context.Context, *GetProjectListRequest) (*GetProjectListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectList not implemented")
}
func (*UnimplementedAdminServer) CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (*UnimplementedAdminServer) UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (*UnimplementedAdminServer) GetLastProject(context.Context, *GetLastProjectRequest) (*GetLastProjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastProject not implemented")
}
func (*UnimplementedAdminServer) DeployUserWeb(context.Context, *DeployUserWebRequest) (*DeployUserWebReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployUserWeb not implemented")
}
func (*UnimplementedAdminServer) GetOrganizationList(context.Context, *GetOrganizationListRequest) (*GetOrganizationListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrganizationList not implemented")
}
func (*UnimplementedAdminServer) GetProjectUserList(context.Context, *GetProjectUserListRequest) (*GetProjectUserListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectUserList not implemented")
}
func (*UnimplementedAdminServer) ChangeUserProject(context.Context, *ChangeUserProjectRequest) (*ChangeUserProjectReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserProject not implemented")
}
func (*UnimplementedAdminServer) GetUserProjectList(context.Context, *GetUserProjectListRequest) (*GetUserProjectListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserProjectList not implemented")
}
func (*UnimplementedAdminServer) CreateProjectApply(context.Context, *CreateProjectApplyRequest) (*CreateProjectApplyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectApply not implemented")
}
func (*UnimplementedAdminServer) ReviewProjectApply(context.Context, *ReviewProjectApplyRequest) (*ReviewProjectApplyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewProjectApply not implemented")
}
func (*UnimplementedAdminServer) GetProjectApplyList(context.Context, *GetProjectApplyListRequest) (*GetProjectApplyListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectApplyList not implemented")
}
func (*UnimplementedAdminServer) CreateTag(context.Context, *CreateTagRequest) (*CreateTagReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (*UnimplementedAdminServer) GetTagList(context.Context, *GetTagListRequest) (*GetTagListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTagList not implemented")
}
func (*UnimplementedAdminServer) CreateExperiment(context.Context, *CreateExperimentRequest) (*CreateExperimentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExperiment not implemented")
}
func (*UnimplementedAdminServer) LaboratoryCosCredential(context.Context, *LaboratoryCosCredentialRequest) (*LaboratoryCosCredentialReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LaboratoryCosCredential not implemented")
}
func (*UnimplementedAdminServer) SubmitExperiment(context.Context, *SubmitExperimentRequest) (*SubmitExperimentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitExperiment not implemented")
}
func (*UnimplementedAdminServer) TerminateExperiment(context.Context, *TerminateExperimentRequest) (*TerminateExperimentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateExperiment not implemented")
}
func (*UnimplementedAdminServer) GetExperimentList(context.Context, *GetExperimentListRequest) (*GetExperimentListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentList not implemented")
}
func (*UnimplementedAdminServer) GetExperiment(context.Context, *GetExperimentRequest) (*GetExperimentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperiment not implemented")
}
func (*UnimplementedAdminServer) UpdateExperiment(context.Context, *UpdateExperimentRequest) (*UpdateExperimentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExperiment not implemented")
}
func (*UnimplementedAdminServer) DeleteExperiment(context.Context, *DeleteExperimentRequest) (*DeleteExperimentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExperiment not implemented")
}
func (*UnimplementedAdminServer) GetSubExperimentList(context.Context, *GetSubExperimentListRequest) (*GetSubExperimentListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubExperimentList not implemented")
}
func (*UnimplementedAdminServer) GetExperimentLevel(context.Context, *GetExperimentLevelRequest) (*GetExperimentLevelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentLevel not implemented")
}
func (*UnimplementedAdminServer) GetExperimentBreadLine(context.Context, *GetExperimentBreadLineRequest) (*GetExperimentBreadLineReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperimentBreadLine not implemented")
}
func (*UnimplementedAdminServer) CreateShellServer(context.Context, *CreateShellServerRequest) (*CreateShellServerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShellServer not implemented")
}
func (*UnimplementedAdminServer) GetChartData(context.Context, *GetChartDataRequest) (*GetChartDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChartData not implemented")
}
func (*UnimplementedAdminServer) GetImportChartData(context.Context, *GetImportChartDataRequest) (*GetImportChartDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImportChartData not implemented")
}

func RegisterAdminServer(s *grpc.Server, srv AdminServer) {
	s.RegisterService(&_Admin_serviceDesc, srv)
}

func _Admin_SendSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SendSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/SendSms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SendSms(ctx, req.(*SendSmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SendEmailCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SendEmailCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/SendEmailCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SendEmailCode(ctx, req.(*SendEmailCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetDownloadTmpCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDownloadTmpCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetDownloadTmpCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/GetDownloadTmpCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetDownloadTmpCredential(ctx, req.(*GetDownloadTmpCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_LoginOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).LoginOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/LoginOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).LoginOut(ctx, req.(*LoginOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/GetUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetUserList(ctx, req.(*GetUserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UserEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UserEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/UserEdit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UserEdit(ctx, req.(*UserEditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ResetPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ResetPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/ResetPhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ResetPhone(ctx, req.(*ResetPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/CreateSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateSetting(ctx, req.(*CreateSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/UpdateSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateSetting(ctx, req.(*UpdateSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DelSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DelSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/DelSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DelSetting(ctx, req.(*DelSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/GetSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetSetting(ctx, req.(*GetSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetSettingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSettingListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetSettingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/GetSettingList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetSettingList(ctx, req.(*GetSettingListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateVaspLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVaspLicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateVaspLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/CreateVaspLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateVaspLicense(ctx, req.(*CreateVaspLicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateVaspLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVaspLicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateVaspLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/UpdateVaspLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateVaspLicense(ctx, req.(*UpdateVaspLicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DelVaspLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelVaspLicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DelVaspLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/DelVaspLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DelVaspLicense(ctx, req.(*DelVaspLicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetVaspLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVaspLicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetVaspLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/GetVaspLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetVaspLicense(ctx, req.(*GetVaspLicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetVaspLicenseList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVaspLicenseListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetVaspLicenseList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/GetVaspLicenseList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetVaspLicenseList(ctx, req.(*GetVaspLicenseListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ReviewVaspLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewVaspLicenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ReviewVaspLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/ReviewVaspLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ReviewVaspLicense(ctx, req.(*ReviewVaspLicenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateCloudEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCloudEnvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateCloudEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/UpdateCloudEnv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateCloudEnv(ctx, req.(*UpdateCloudEnvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetCloudEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCloudEnvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetCloudEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/GetCloudEnv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetCloudEnv(ctx, req.(*GetCloudEnvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetCloudEnvList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCloudEnvListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetCloudEnvList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/GetCloudEnvList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetCloudEnvList(ctx, req.(*GetCloudEnvListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetNotifyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotifyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetNotifyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/GetNotifyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetNotifyList(ctx, req.(*GetNotifyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ChangeNotifyStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeNotifyStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ChangeNotifyStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/ChangeNotifyStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ChangeNotifyStatus(ctx, req.(*ChangeNotifyStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateSystemNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSystemNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateSystemNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/CreateSystemNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateSystemNotify(ctx, req.(*CreateSystemNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteSystemNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSystemNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteSystemNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/DeleteSystemNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteSystemNotify(ctx, req.(*DeleteSystemNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetProjectList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetProjectList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/GetProjectList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetProjectList(ctx, req.(*GetProjectListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/UpdateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateProject(ctx, req.(*UpdateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetLastProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetLastProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/GetLastProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetLastProject(ctx, req.(*GetLastProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeployUserWeb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployUserWebRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeployUserWeb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/DeployUserWeb",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeployUserWeb(ctx, req.(*DeployUserWebRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetOrganizationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrganizationListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetOrganizationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/GetOrganizationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetOrganizationList(ctx, req.(*GetOrganizationListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetProjectUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectUserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetProjectUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/GetProjectUserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetProjectUserList(ctx, req.(*GetProjectUserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ChangeUserProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ChangeUserProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/ChangeUserProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ChangeUserProject(ctx, req.(*ChangeUserProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetUserProjectList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserProjectListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetUserProjectList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/GetUserProjectList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetUserProjectList(ctx, req.(*GetUserProjectListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateProjectApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateProjectApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/CreateProjectApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateProjectApply(ctx, req.(*CreateProjectApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_ReviewProjectApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewProjectApplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).ReviewProjectApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/ReviewProjectApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).ReviewProjectApply(ctx, req.(*ReviewProjectApplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetProjectApplyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectApplyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetProjectApplyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/GetProjectApplyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetProjectApplyList(ctx, req.(*GetProjectApplyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/CreateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateTag(ctx, req.(*CreateTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetTagList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTagListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetTagList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/GetTagList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetTagList(ctx, req.(*GetTagListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/CreateExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateExperiment(ctx, req.(*CreateExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_LaboratoryCosCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaboratoryCosCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).LaboratoryCosCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/LaboratoryCosCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).LaboratoryCosCredential(ctx, req.(*LaboratoryCosCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_SubmitExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).SubmitExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/SubmitExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).SubmitExperiment(ctx, req.(*SubmitExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_TerminateExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).TerminateExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/TerminateExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).TerminateExperiment(ctx, req.(*TerminateExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetExperimentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperimentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetExperimentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/GetExperimentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetExperimentList(ctx, req.(*GetExperimentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/GetExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetExperiment(ctx, req.(*GetExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_UpdateExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).UpdateExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/UpdateExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).UpdateExperiment(ctx, req.(*UpdateExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_DeleteExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).DeleteExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/DeleteExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).DeleteExperiment(ctx, req.(*DeleteExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetSubExperimentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubExperimentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetSubExperimentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/GetSubExperimentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetSubExperimentList(ctx, req.(*GetSubExperimentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetExperimentLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperimentLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetExperimentLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/GetExperimentLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetExperimentLevel(ctx, req.(*GetExperimentLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetExperimentBreadLine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperimentBreadLineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetExperimentBreadLine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/GetExperimentBreadLine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetExperimentBreadLine(ctx, req.(*GetExperimentBreadLineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_CreateShellServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShellServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).CreateShellServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/CreateShellServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).CreateShellServer(ctx, req.(*CreateShellServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetChartData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChartDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetChartData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/GetChartData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetChartData(ctx, req.(*GetChartDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Admin_GetImportChartData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImportChartDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServer).GetImportChartData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.Admin/GetImportChartData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServer).GetImportChartData(ctx, req.(*GetImportChartDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Admin_serviceDesc = grpc.ServiceDesc{
	ServiceName: "admin.Admin",
	HandlerType: (*AdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sendSms",
			Handler:    _Admin_SendSms_Handler,
		},
		{
			MethodName: "sendEmailCode",
			Handler:    _Admin_SendEmailCode_Handler,
		},
		{
			MethodName: "getDownloadTmpCredential",
			Handler:    _Admin_GetDownloadTmpCredential_Handler,
		},
		{
			MethodName: "loginOut",
			Handler:    _Admin_LoginOut_Handler,
		},
		{
			MethodName: "register",
			Handler:    _Admin_Register_Handler,
		},
		{
			MethodName: "getUser",
			Handler:    _Admin_GetUser_Handler,
		},
		{
			MethodName: "getUserList",
			Handler:    _Admin_GetUserList_Handler,
		},
		{
			MethodName: "userEdit",
			Handler:    _Admin_UserEdit_Handler,
		},
		{
			MethodName: "resetPhone",
			Handler:    _Admin_ResetPhone_Handler,
		},
		{
			MethodName: "createSetting",
			Handler:    _Admin_CreateSetting_Handler,
		},
		{
			MethodName: "updateSetting",
			Handler:    _Admin_UpdateSetting_Handler,
		},
		{
			MethodName: "delSetting",
			Handler:    _Admin_DelSetting_Handler,
		},
		{
			MethodName: "getSetting",
			Handler:    _Admin_GetSetting_Handler,
		},
		{
			MethodName: "getSettingList",
			Handler:    _Admin_GetSettingList_Handler,
		},
		{
			MethodName: "createVaspLicense",
			Handler:    _Admin_CreateVaspLicense_Handler,
		},
		{
			MethodName: "updateVaspLicense",
			Handler:    _Admin_UpdateVaspLicense_Handler,
		},
		{
			MethodName: "delVaspLicense",
			Handler:    _Admin_DelVaspLicense_Handler,
		},
		{
			MethodName: "getVaspLicense",
			Handler:    _Admin_GetVaspLicense_Handler,
		},
		{
			MethodName: "getVaspLicenseList",
			Handler:    _Admin_GetVaspLicenseList_Handler,
		},
		{
			MethodName: "reviewVaspLicense",
			Handler:    _Admin_ReviewVaspLicense_Handler,
		},
		{
			MethodName: "updateCloudEnv",
			Handler:    _Admin_UpdateCloudEnv_Handler,
		},
		{
			MethodName: "getCloudEnv",
			Handler:    _Admin_GetCloudEnv_Handler,
		},
		{
			MethodName: "getCloudEnvList",
			Handler:    _Admin_GetCloudEnvList_Handler,
		},
		{
			MethodName: "getNotifyList",
			Handler:    _Admin_GetNotifyList_Handler,
		},
		{
			MethodName: "changeNotifyStatus",
			Handler:    _Admin_ChangeNotifyStatus_Handler,
		},
		{
			MethodName: "createSystemNotify",
			Handler:    _Admin_CreateSystemNotify_Handler,
		},
		{
			MethodName: "deleteSystemNotify",
			Handler:    _Admin_DeleteSystemNotify_Handler,
		},
		{
			MethodName: "getProject",
			Handler:    _Admin_GetProject_Handler,
		},
		{
			MethodName: "getProjectList",
			Handler:    _Admin_GetProjectList_Handler,
		},
		{
			MethodName: "createProject",
			Handler:    _Admin_CreateProject_Handler,
		},
		{
			MethodName: "updateProject",
			Handler:    _Admin_UpdateProject_Handler,
		},
		{
			MethodName: "getLastProject",
			Handler:    _Admin_GetLastProject_Handler,
		},
		{
			MethodName: "deployUserWeb",
			Handler:    _Admin_DeployUserWeb_Handler,
		},
		{
			MethodName: "getOrganizationList",
			Handler:    _Admin_GetOrganizationList_Handler,
		},
		{
			MethodName: "getProjectUserList",
			Handler:    _Admin_GetProjectUserList_Handler,
		},
		{
			MethodName: "changeUserProject",
			Handler:    _Admin_ChangeUserProject_Handler,
		},
		{
			MethodName: "getUserProjectList",
			Handler:    _Admin_GetUserProjectList_Handler,
		},
		{
			MethodName: "createProjectApply",
			Handler:    _Admin_CreateProjectApply_Handler,
		},
		{
			MethodName: "reviewProjectApply",
			Handler:    _Admin_ReviewProjectApply_Handler,
		},
		{
			MethodName: "getProjectApplyList",
			Handler:    _Admin_GetProjectApplyList_Handler,
		},
		{
			MethodName: "createTag",
			Handler:    _Admin_CreateTag_Handler,
		},
		{
			MethodName: "getTagList",
			Handler:    _Admin_GetTagList_Handler,
		},
		{
			MethodName: "createExperiment",
			Handler:    _Admin_CreateExperiment_Handler,
		},
		{
			MethodName: "laboratoryCosCredential",
			Handler:    _Admin_LaboratoryCosCredential_Handler,
		},
		{
			MethodName: "submitExperiment",
			Handler:    _Admin_SubmitExperiment_Handler,
		},
		{
			MethodName: "terminateExperiment",
			Handler:    _Admin_TerminateExperiment_Handler,
		},
		{
			MethodName: "getExperimentList",
			Handler:    _Admin_GetExperimentList_Handler,
		},
		{
			MethodName: "getExperiment",
			Handler:    _Admin_GetExperiment_Handler,
		},
		{
			MethodName: "updateExperiment",
			Handler:    _Admin_UpdateExperiment_Handler,
		},
		{
			MethodName: "deleteExperiment",
			Handler:    _Admin_DeleteExperiment_Handler,
		},
		{
			MethodName: "getSubExperimentList",
			Handler:    _Admin_GetSubExperimentList_Handler,
		},
		{
			MethodName: "getExperimentLevel",
			Handler:    _Admin_GetExperimentLevel_Handler,
		},
		{
			MethodName: "getExperimentBreadLine",
			Handler:    _Admin_GetExperimentBreadLine_Handler,
		},
		{
			MethodName: "createShellServer",
			Handler:    _Admin_CreateShellServer_Handler,
		},
		{
			MethodName: "getChartData",
			Handler:    _Admin_GetChartData_Handler,
		},
		{
			MethodName: "getImportChartData",
			Handler:    _Admin_GetImportChartData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin.proto",
}
